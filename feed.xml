<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://elesos.github.io/</id><title>艺搜天下---纯净互联网,让每一个页面都有价值!</title><subtitle>个人博客,记录一切.</subtitle> <updated>2025-09-05T15:27:04+08:00</updated> <author> <name>xxx</name> <uri>https://elesos.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://elesos.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://elesos.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2025 xxx </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>AI系列83:第三步核心模块智能识别提示词</title><link href="https://elesos.github.io/posts/ai-83/" rel="alternate" type="text/html" title="AI系列83:第三步核心模块智能识别提示词" /><published>2025-07-09T05:30:00+08:00</published> <updated>2025-07-09T05:30:00+08:00</updated> <id>https://elesos.github.io/posts/ai-83/</id> <content src="https://elesos.github.io/posts/ai-83/" /> <author> <name>xxx</name> </author> <category term="AI系列" /> <summary> 核心模块智能识别 前置要求：请先阅读 docs/01-项目扫描报告.md 和 docs/02-项目架构文档.md，基于前两步的分析结果进行全面的模块识别。 核心目标：智能识别项目中的所有重要模块，确保识别的正确性和完整性。 第一步：项目类型确认和识别策略 1. 项目特征确认 请基于前两步分析结果确认项目特征： 项目类型：[基于架构文档确认具体类型] 架构模式：[基于架构文档确认架构特点] 代码组织方式：[基于扫描报告确认目录结构特点] 2. 智能识别策略选择 请根据项目类型自动选择合适的模块识别策略： 通用识别原则： 包含独立功能的代码组织单元 具有明确职责边界的功能集合 被其他部分引用或依赖的代码模块 具有独立配置或资源的功能单元 项目类型特定识别重点： 桌面应用：界面模块、核心逻辑模块、数据处理模块、系统交互模块 前端应... </summary> </entry> <entry><title>AI系列82:项目架构文档生成提示词2</title><link href="https://elesos.github.io/posts/ai-82/" rel="alternate" type="text/html" title="AI系列82:项目架构文档生成提示词2" /><published>2025-07-08T05:30:00+08:00</published> <updated>2025-07-08T05:30:00+08:00</updated> <id>https://elesos.github.io/posts/ai-82/</id> <content src="https://elesos.github.io/posts/ai-82/" /> <author> <name>xxx</name> </author> <category term="AI系列" /> <summary> 项目架构文档生成 前置要求：请先阅读 docs/01-项目扫描报告.md，基于扫描结果进行深度架构分析。 请根据项目扫描结果，深度分析整个项目代码库，生成完整的架构文档。 第一轮：基础架构分析 1. 项目概览（基于扫描结果验证和补充） 项目标识：[项目名称、版本、仓库信息] 核心功能：[详细功能描述，基于代码实现验证扫描结果] 项目规模确认：[验证扫描报告中的规模评估，提供准确数据] 应用领域：[从代码逻辑推断应用领域和使用场景] 目标用户：[基于功能特性推断目标用户群体] 2. 技术架构深度分析 请基于实际代码结构进行具体分析： 2.1 架构模式识别 通过分析代码结构，识别项目采用的架构模式： 目录结构分析：分析项目的目录组织方式和命名规范 入口点识别：找到项目的主要入口文件和启动逻辑 模块划分：从代码组织方式推断模块划分策略 ... </summary> </entry> <entry><title>AI系列81:根据代码反推文档提示词1</title><link href="https://elesos.github.io/posts/ai-81/" rel="alternate" type="text/html" title="AI系列81:根据代码反推文档提示词1" /><published>2025-07-07T05:30:00+08:00</published> <updated>2025-07-07T05:30:00+08:00</updated> <id>https://elesos.github.io/posts/ai-81/</id> <content src="https://elesos.github.io/posts/ai-81/" /> <author> <name>xxx</name> </author> <category term="AI系列" /> <summary> 项目扫描 请对整个项目进行全面扫描分析，按以下结构输出详细信息： 1. 项目基础信息 项目类型：[Web应用/API服务/桌面应用/移动应用/库/工具等] 主要功能：[从README、package.json等推断项目的核心功能] 项目规模：[小型&amp;lt;1万行/中型1-10万行/大型&amp;gt;10万行] 开发状态：[活跃开发/维护状态/遗留项目] 2. 技术栈深度分析 编程语言：[主要语言及版本，次要语言] 核心框架：[主框架名称及版本] 关键依赖库：[列出5-10个最重要的依赖，含版本] 数据库技术：[数据库类型、ORM框架等] 构建工具：[构建系统、包管理器、CI/CD工具] 部署方式：[容器化、云平台、传统部署等] 3. 项目结构分析 入口文件：[主要入口文件路径] 核心目录：[列出5-8个最重要的目录及其作用]... </summary> </entry> <entry><title>AI系列80:AI法律助手排行</title><link href="https://elesos.github.io/posts/ai-80/" rel="alternate" type="text/html" title="AI系列80:AI法律助手排行" /><published>2025-07-06T05:30:00+08:00</published> <updated>2025-07-06T05:30:00+08:00</updated> <id>https://elesos.github.io/posts/ai-80/</id> <content src="https://elesos.github.io/posts/ai-80/" /> <author> <name>xxx</name> </author> <category term="AI系列" /> <summary> 1，Kimi 2，gemini 垃圾： 通义法睿 元典问答 通义千问 </summary> </entry> <entry><title>AI系列79:Kiro的 Spec 工作流</title><link href="https://elesos.github.io/posts/ai-79/" rel="alternate" type="text/html" title="AI系列79:Kiro的 Spec 工作流" /><published>2025-07-05T05:30:00+08:00</published> <updated>2025-08-15T09:13:33+08:00</updated> <id>https://elesos.github.io/posts/ai-79/</id> <content src="https://elesos.github.io/posts/ai-79/" /> <author> <name>xxx</name> </author> <category term="AI系列" /> <summary> 让 AI 编程过程更加工程化、规范化，提升需求梳理、设计、开发、验收的全流程体验。 通过内置规则，AI 可自动识别并执行 Spec 工作流，用户只需用自然语言描述需求，AI 自动生成并维护 Spec 文档 让ai遵循 prompt -》需求-〉设计方案-》任务清单-〉code的步骤进行开发 工作流流程 1，需求梳理 采用 EARS（Easy Approach to Requirements Syntax 简易需求语法）方法，AI 协助用户梳理需求，生成 requirements.md。 2，技术方案设计 基于需求，AI 生成技术架构、技术选型、接口/数据库设计等，形成 design.md。 3，任务拆分 按照需求和设计，AI 拆分具体开发任务，生成 tasks.md。 4，自动执行与追踪 AI 根据任务清单自动推进开发，实时更新任务状态。 附： While &amp;lt;可选前置条... </summary> </entry> </feed>
