[ { "title": "AI系列83:第三步核心模块智能识别提示词", "url": "/posts/ai-83/", "categories": "AI系列", "tags": "AI系列", "date": "2025-07-09 05:30:00 +0800", "snippet": "核心模块智能识别前置要求：请先阅读 docs/01-项目扫描报告.md 和 docs/02-项目架构文档.md，基于前两步的分析结果进行全面的模块识别。核心目标：智能识别项目中的所有重要模块，确保识别的正确性和完整性。第一步：项目类型确认和识别策略1. 项目特征确认请基于前两步分析结果确认项目特征： 项目类型：[基于架构文档确认具体类型] 架构模式：[基于架构文档确认架构特点] 代码组织方式：[基于扫描报告确认目录结构特点]2. 智能识别策略选择请根据项目类型自动选择合适的模块识别策略：通用识别原则： 包含独立功能的代码组织单元 具有明确职责边界的功能集合 被其他部分引用或依赖的代码模块 具有独立配置或资源的功能单元项目类型特定识别重点： 桌面应用：界面模块、核心逻辑模块、数据处理模块、系统交互模块 前端应用：页面/组件模块、状态管理模块、工具模块、服务模块 移动应用：界面模块、业务模块、数据模块、平台适配模块 后端服务：接口模块、业务模块、数据访问模块、工具模块 库/框架项目：核心功能模块、扩展模块、工具模块、示例模块第二步：全面模块扫描和识别3. 系统化模块扫描请通过多种方式系统扫描识别所有模块：3.1 基于目录结构识别 主要目录扫描：识别所有一级和重要二级目录 命名规律分析：分析目录命名规律，推断模块划分逻辑 功能目录识别：识别明显的功能性目录组织3.2 基于代码依赖识别 导入依赖分析：分析import/include/require等依赖关系 调用关系分析：识别代码间的调用和引用关系 入口文件识别：找到各功能模块的主要入口文件3.3 基于功能特征识别 相似功能聚合：将功能相关的代码文件归类为模块 独立功能识别：识别具有独立功能的代码组织 配置文件关联：通过配置文件识别相关的功能模块4. 模块清单生成请按以下格式列出所有识别到的模块：模块列表（简化格式）：[序号]. [模块名称] 模块标识：[准确的模块名称] 主要目录/文件：[2-3个关键路径] 模块类型：[核心功能/基础支撑/工具辅助/配置管理] 主要职责：[1-2句话概括核心功能] 重要程度：[高/中/低]第三步：模块完整性和正确性验证5. 多轮验证确保完整性请通过多种方式验证模块识别的完整性：5.1 功能覆盖验证 核心功能检查：项目的所有核心功能是否都有对应的模块？ 架构组件检查：架构文档中提到的组件是否都被识别为模块？ 目录覆盖检查：重要的代码目录是否都归属到了相应模块？ 配置文件检查：重要的配置文件是否都关联到了相应模块？5.2 代码文件覆盖验证 主要代码文件：所有重要的代码文件是否都归属到了模块？ 入口文件检查：所有入口文件是否都被正确识别和归类？ 工具脚本检查：构建脚本、工具脚本是否被识别为相应模块？ 资源文件检查：重要的资源文件是否被关联到相应模块？5.3 依赖关系验证 导入依赖检查：通过代码导入关系验证模块识别的正确性 调用关系检查：通过函数/方法调用关系验证模块边界 数据流检查：通过数据流向验证模块间的关系 配置依赖检查：通过配置文件验证模块间的依赖关系6. 模块正确性验证请验证每个识别模块的正确性：6.1 模块边界验证 职责单一性：每个模块是否有明确且单一的职责？ 边界清晰性：模块间的边界是否清晰，无重叠？ 内聚性检查：模块内部的代码是否高度相关？ 耦合性检查：模块间的耦合是否合理？6.2 命名和分类验证 命名准确性：模块名称是否准确反映其功能？ 分类合理性：模块类型分类是否合理？ 重要程度评估：模块重要程度评估是否准确？ 文件路径验证：所有文件路径是否真实存在？7. 模块关系图和总结7.1 模块依赖关系图graph TD %% 请根据实际识别的模块绘制依赖关系 %% 使用真实的模块名称 %% 重点展示主要的依赖关系7.2 模块分层总结请根据项目实际情况进行分层总结： [第一层级]：[列出该层级的模块] [第二层级]：[列出该层级的模块] [第三层级]：[列出该层级的模块] [其他层级]：[根据实际情况添加]7.3 模块统计总结 模块总数：[识别的模块总数量] 核心模块数：[重要程度为”高”的模块数量] 覆盖的代码文件数：[被归类到模块的代码文件总数] 覆盖的目录数：[被归类到模块的目录总数]8. 识别质量评估请对模块识别结果进行质量评估：8.1 完整性评估 功能完整性：[评估是否覆盖了所有重要功能，给出百分比] 代码完整性：[评估代码文件的覆盖程度，给出百分比] 架构完整性：[评估与架构文档的一致性程度]8.2 准确性评估 模块边界准确性：[评估模块划分的准确程度] 命名准确性：[评估模块命名的准确程度] 分类准确性：[评估模块分类的准确程度]8.3 问题识别 遗漏的模块：[可能遗漏的重要模块，标注”[需要确认]”] 边界模糊的模块：[职责边界不清晰的模块] 分类有疑问的模块：[分类可能不准确的模块]输出要求 格式：使用Markdown格式 保存路径：docs/03-核心模块识别.md 重点内容：完整的模块清单、依赖关系图、质量评估 不确定标注：不确定信息标注”[需要确认]” 来源标注：引用前两步分析结果标注”[来源：扫描报告/架构文档]”重要提示：对于大型项目，请采用分批处理策略，确保每个模块都得到准确识别。最终验证清单完成识别后，请确认： 基于前两步分析结果进行了模块识别 根据项目类型选择了合适的识别策略 识别了所有重要的功能模块 所有文件路径真实存在 模块边界清晰且无重叠 依赖关系图能正确渲染 完整性和准确性得到验证 为第四步提供了完整的模块清单" }, { "title": "AI系列82:项目架构文档生成提示词2", "url": "/posts/ai-82/", "categories": "AI系列", "tags": "AI系列", "date": "2025-07-08 05:30:00 +0800", "snippet": "项目架构文档生成前置要求：请先阅读 docs/01-项目扫描报告.md，基于扫描结果进行深度架构分析。请根据项目扫描结果，深度分析整个项目代码库，生成完整的架构文档。第一轮：基础架构分析1. 项目概览（基于扫描结果验证和补充） 项目标识：[项目名称、版本、仓库信息] 核心功能：[详细功能描述，基于代码实现验证扫描结果] 项目规模确认：[验证扫描报告中的规模评估，提供准确数据] 应用领域：[从代码逻辑推断应用领域和使用场景] 目标用户：[基于功能特性推断目标用户群体]2. 技术架构深度分析请基于实际代码结构进行具体分析：2.1 架构模式识别通过分析代码结构，识别项目采用的架构模式： 目录结构分析：分析项目的目录组织方式和命名规范 入口点识别：找到项目的主要入口文件和启动逻辑 模块划分：从代码组织方式推断模块划分策略 架构风格确定：基于实际实现识别采用的架构模式2.2 核心组件分析深入分析项目的核心技术组件： 主要模块：识别项目中的主要功能模块和组件 数据处理：分析数据的获取、处理、存储方式 业务逻辑：识别核心业务逻辑的实现和封装方式 通用组件：分析工具类、帮助函数、通用模块等 第三方集成：识别集成的外部库和服务2.3 系统交互分析分析项目内部和外部的交互方式： 内部通信：模块间的调用关系和数据传递方式 外部接口：与外部系统、服务、API的交互方式 数据流向：数据在系统中的流转路径和处理过程 事件处理：事件的产生、传播、处理机制 状态管理：系统状态的维护和更新方式2.4 技术实现分析基于代码分析项目的技术实现： 核心算法：识别项目中的关键算法和实现逻辑 数据结构：分析使用的主要数据结构和存储方式 性能优化：识别性能优化的实现和策略 错误处理：异常处理、错误恢复的实现机制 配置管理：配置文件、参数管理的实现方式2.5 质量保证分析分析项目的质量保证实现： 代码规范：代码风格、命名规范、注释质量 测试覆盖：单元测试、集成测试的实现情况 日志记录：日志系统的实现和使用情况 监控机制：性能监控、状态检查的实现 文档完整性：代码文档、API文档的完整程度分析要求： 基于实际代码：所有分析必须基于真实的代码实现，不能臆测 提供代码证据：每个架构组件都要指出对应的文件路径和关键代码 分析依赖关系：梳理组件间的实际调用和依赖关系 识别设计模式：从代码中识别使用的设计模式和最佳实践 评估架构质量：分析架构的合理性、可扩展性、可维护性3. 系统架构图绘制请根据项目实际架构特点绘制架构图，AI自动识别项目类型并选择合适的架构层次：# 请基于实际项目结构绘制，可能包含但不限于：# 桌面应用：UI层 -&amp;gt; 业务逻辑层 -&amp;gt; 数据访问层 -&amp;gt; 系统API层# 前端应用：视图层 -&amp;gt; 状态管理层 -&amp;gt; 服务层 -&amp;gt; API层# 移动应用：界面层 -&amp;gt; 控制层 -&amp;gt; 模型层 -&amp;gt; 网络层# 后端服务：接口层 -&amp;gt; 业务层 -&amp;gt; 数据层 -&amp;gt; 基础设施层# 根据实际代码结构确定具体的架构分层4. 技术栈详细清单（验证扫描结果）请根据项目实际使用的技术进行分类分析： 核心技术栈：[主要语言、框架版本，验证扫描报告准确性] 依赖管理：[包管理器、依赖版本策略、第三方库管理] 数据处理：[数据存储方式、数据格式、持久化方案] 外部集成：[第三方服务、API集成、外部库使用] 开发工具链：[构建工具、测试框架、代码质量工具] 运行环境：[目标平台、运行时环境、部署方式]5. 数据处理架构分析请根据项目实际的数据处理方式进行分析： 数据模型：[项目中使用的数据结构和模型定义] 数据流转：[数据在系统中的获取、处理、传递过程] 存储方案：[数据持久化方式，如文件、数据库、缓存等] 数据安全：[数据保护、访问控制、敏感信息处理] 数据流程图：[用Mermaid绘制关键数据处理流程]6. 配置和运行环境请根据项目实际的配置和运行方式进行分析： 配置管理：[配置文件、参数设置、环境变量使用] 环境要求：[运行环境、依赖条件、系统要求] 启动流程：[应用启动过程、初始化步骤、依赖检查] 运行架构：[运行时结构、资源管理、性能优化]第二轮：架构验证和补充7. 架构合理性验证请对生成的架构文档进行自我验证： 代码实现一致性：架构描述是否与实际代码实现一致？ 技术选型合理性：技术栈选择是否符合业务需求？ 架构完整性：是否遗漏了重要的架构组件？ 性能考虑：架构设计是否考虑了性能和扩展性？8. 问题识别和改进建议 架构问题：[识别的架构缺陷和技术债务] 性能瓶颈：[潜在的性能问题点] 安全风险：[安全漏洞和风险点] 改进建议：[架构优化和重构建议]9. 关键功能流程分析请根据项目类型识别和分析核心功能流程： 核心功能流程：[识别3-5个最重要的功能执行流程] 流程图绘制：[用Mermaid绘制关键功能流程] 异常处理：[错误处理和异常恢复机制] 性能关键路径：[影响性能的关键执行路径分析]第三轮：质量保证和最终检查10. 多维度质量检查技术准确性检查： 所有文件路径是否真实存在？ 技术栈版本信息是否准确？ 配置示例是否可用？ 架构图是否能正确渲染？内容完整性检查： 是否覆盖了扫描报告中的所有重点？ 是否遗漏了重要的架构组件？ 业务流程描述是否完整？ 技术选型说明是否充分？逻辑一致性检查： 架构描述与代码实现是否一致？ 不同章节的信息是否相互矛盾？ 技术栈之间的集成关系是否合理？ 数据流向是否逻辑清晰？11. 错误修正和优化如发现问题，请： 标注问题类型：[技术错误/信息缺失/逻辑矛盾] 说明修正原因：[为什么需要修正] 提供修正方案：[具体的修正内容] 验证修正结果：[确认修正后的准确性]输出要求 格式：使用Markdown格式 保存路径：docs/02-项目架构文档.md 图表要求：所有架构图使用Mermaid语法 代码示例：包含关键配置和代码片段 不确定标注：不确定信息标注”[需要确认]” 引用标注：引用扫描报告的信息标注”[来源：扫描报告]”最终验证清单完成文档后，请确认： 与项目扫描报告信息一致 所有架构图能正确渲染 技术栈信息准确无误 业务流程描述完整 配置示例真实可用 问题和建议具有可操作性 文档结构清晰易读 为后续模块分析提供了充分信息" }, { "title": "AI系列81:根据代码反推文档提示词1", "url": "/posts/ai-81/", "categories": "AI系列", "tags": "AI系列", "date": "2025-07-07 05:30:00 +0800", "snippet": "项目扫描请对整个项目进行全面扫描分析，按以下结构输出详细信息：1. 项目基础信息 项目类型：[Web应用/API服务/桌面应用/移动应用/库/工具等] 主要功能：[从README、package.json等推断项目的核心功能] 项目规模：[小型&amp;lt;1万行/中型1-10万行/大型&amp;gt;10万行] 开发状态：[活跃开发/维护状态/遗留项目]2. 技术栈深度分析 编程语言：[主要语言及版本，次要语言] 核心框架：[主框架名称及版本] 关键依赖库：[列出5-10个最重要的依赖，含版本] 数据库技术：[数据库类型、ORM框架等] 构建工具：[构建系统、包管理器、CI/CD工具] 部署方式：[容器化、云平台、传统部署等]3. 项目结构分析 入口文件：[主要入口文件路径] 核心目录：[列出5-8个最重要的目录及其作用] 配置文件：[重要配置文件位置和作用] 文档情况：[README、API文档、注释覆盖率等]4. 代码规模统计 总文件数：[大概数量] 代码文件数：[排除配置、文档等] 估算代码行数：[基于文件数量和复杂度估算] 目录层级深度：[最深层级数]5. 项目复杂度评估 架构复杂度：[单体/分层/微服务/分布式] 业务复杂度：[简单/中等/复杂，基于目录结构判断] 技术复杂度：[技术栈数量、集成复杂度] 维护难度：[基于代码组织、文档情况评估]6. 关键文件识别 配置文件：[package.json、pom.xml、requirements.txt等] 启动文件：[main.js、app.py、Application.java等] 路由文件：[路由定义文件位置] 数据模型：[实体类、模型定义文件] API定义：[接口定义、控制器文件]7. 初步问题识别 缺失文档：[哪些重要文档缺失] 配置问题：[配置文件是否完整、环境变量等] 依赖问题：[过时依赖、安全漏洞等] 代码组织：[目录结构是否合理、命名规范等]8. 后续分析建议 重点关注模块：[基于复杂度和重要性，建议重点分析的模块] 分析顺序建议：[建议的模块分析优先级] 特别注意事项：[分析过程中需要特别注意的点]输出要求 使用Markdown格式 保存到：docs/01-项目扫描报告.md 如有不确定的信息，标注”[需要确认]” 为每个发现提供具体的文件路径作为证据 重点标注影响后续分析的关键信息质量检查完成后请自检： 所有提到的文件路径是否真实存在 技术栈信息是否准确（检查版本号） 项目规模评估是否合理 是否遗漏了重要的配置或入口文件 复杂度评估是否与实际代码结构匹配" }, { "title": "AI系列80:AI法律助手排行", "url": "/posts/ai-80/", "categories": "AI系列", "tags": "AI系列", "date": "2025-07-06 05:30:00 +0800", "snippet": "1，Kimi2，gemini垃圾：通义法睿元典问答通义千问" }, { "title": "AI系列79:Kiro的 Spec 工作流", "url": "/posts/ai-79/", "categories": "AI系列", "tags": "AI系列", "date": "2025-07-05 05:30:00 +0800", "snippet": "让 AI 编程过程更加工程化、规范化，提升需求梳理、设计、开发、验收的全流程体验。通过内置规则，AI 可自动识别并执行 Spec 工作流，用户只需用自然语言描述需求，AI 自动生成并维护 Spec 文档让ai遵循 prompt -》需求-〉设计方案-》任务清单-〉code的步骤进行开发工作流流程1，需求梳理采用 EARS（Easy Approach to Requirements Syntax 简易需求语法）方法，AI 协助用户梳理需求，生成 requirements.md。2，技术方案设计基于需求，AI 生成技术架构、技术选型、接口/数据库设计等，形成 design.md。3，任务拆分按照需求和设计，AI 拆分具体开发任务，生成 tasks.md。4，自动执行与追踪AI 根据任务清单自动推进开发，实时更新任务状态。附：While &amp;lt;可选前置条件&amp;gt;, when &amp;lt;可选触发器&amp;gt;, the &amp;lt;系统名称&amp;gt; shall &amp;lt;系统响应&amp;gt;前置条件（While）：系统处于某种状态或环境触发器（When）：某个事件发生主体系统（The）：哪个系统或模块响应行为（Shall）：系统应该做什么用户故事：用于描述用户在某个场景下的目标或行为，从而帮助 AI 理解开发任务的业务背景和功能需求。" }, { "title": "AI系列78:gpt5发布", "url": "/posts/ai-78/", "categories": "AI系列", "tags": "AI系列", "date": "2025-07-04 05:30:00 +0800", "snippet": "写作能力不如4.5但编程能力加强了！" }, { "title": "AI系列77:Chatgpt plus可用模型对比", "url": "/posts/ai-77/", "categories": "AI系列", "tags": "AI系列", "date": "2025-07-03 05:30:00 +0800", "snippet": "目前官网主要开放了以下8个模型：chatgpt 4o,o3,o3-pro,o4-mini,o4-mini-high,gpt-4.5,gpt-4.1，gpt-4.1-mini这些模型的区别主要体现在它们的大小、处理能力、以及一些特别的优化方向。下面是这些模型的概述以及能力的排名： GPT-4（包括标准的 GPT-4 和各种子版本）： 特点：GPT-4 是 OpenAI 发布的最强大的一代模型，具有强大的语言理解能力和推理能力。它在文本生成、问题解答、代码编写等任务上表现非常出色。 能力：在所有模型中表现最强，适用于复杂任务和高精度需求。 GPT-4-mini 和 GPT-4-mini-high： 特点：这些是 GPT-4 的轻量级版本，相对于完整的 GPT-4，参数量更少，运算速度更快，但可能牺牲了一部分精度。 能力：它们在处理简单到中等复杂度任务时表现非常好，但在处理更复杂的推理任务时可能不如完整的 GPT-4。 GPT-4.1 和 GPT-4.1-mini： 特点：GPT-4.1 是 GPT-4 的升级版，通常在某些任务（比如对话理解和长文本处理）上有所优化。GPT-4.1-mini 则是它的轻量化版本。 能力：相比 GPT-4，GPT-4.1 在某些任务上可能会有更好的表现，尤其是对话和推理能力方面；而 GPT-4.1-mini 则是较为简化的版本。 GPT-4.5： 特点：GPT-4.5 是 GPT-4 的进一步优化版本，可能会针对特定领域或者一些技术进行了更多的调整。 能力：在大多数任务中，它应该比 GPT-4 更加高效，尤其是在生成速度和准确度方面。 GPT-3 和 GPT-3-pro： 特点：GPT-3 是 OpenAI 早期的强大模型，GPT-3-pro 是其增强版，具有更高的处理能力。 能力：它们的性能稍逊于 GPT-4 系列，适合处理一般的任务，能够较好地生成文本和执行一些较基础的推理任务。 按模型能力的排名： GPT-4 GPT-4.5 GPT-4.1 GPT-4-mini/high GPT-3-pro GPT-3总结来说，GPT-4 及其衍生版本是目前最强的，而 GPT-3 系列相对较为基础，适用于简单任务和低需求的应用。" }, { "title": "AI系列76:Chatgpt会员", "url": "/posts/ai-76/", "categories": "AI系列", "tags": "AI系列", "date": "2025-07-02 05:30:00 +0800", "snippet": "ChatGPT 有几种收费方式？截至2025年7月，ChatGPT的收费方式已形成覆盖个人到企业的完整体系，主要分为订阅计划和API调用两种模式，同时包含针对特定人群的优惠渠道。以下是详细分类及对比：🗂️ 一、订阅计划（适合直接使用ChatGPT交互界面）| 方案类型 | 价格 | 核心权益 | 适用人群 ||————|———|————|————|| 免费版 | $0/月 | 基础GPT-3.5模型访问、有限消息额度（高峰时段限流） | 轻度用户、学生、日常简单问答需求 || Plus版 | $20/月（约¥145） | 优先访问GPT-4o、128K上下文、每日50张DALL·E图像、文件解析、每3小时80-150条消息 | 重度个人用户、内容创作者、开发者 || Team版 | $30/月/用户（年付$25） | 团队协作空间、160条/3小时消息额度、集中账单管理 | 小型团队（最少2人起订） || Pro版 | $200/月 | 无限制模型访问、增强版Sora视频生成、Operator研究预览、最高API优先级 | AI研究者、专业工作室 || 企业版 | ≈$60/月/用户（150人起订） | 定制数据策略、专属客服、企业级安全合规 | 中大型企业 | 💡 说明： Plus版是个人用户首选，占付费用户的68%； Team版年付可节省17%，适合5人以内团队分摊成本。 💻 二、API调用（适合开发者集成到自有系统）API采用按Token用量计费，不同模型价格差异显著：| 模型 | 输入Token成本（/百万） | 输出Token成本（/百万） | 适用场景 ||———|————————–|————————–|————|| GPT-3.5 Turbo | $0.5 | $2.0 | 低成本批量任务（如客服回复） || GPT-4o | $5.0 | $20.0 | 高精度代码生成、复杂推理 || O3-mini | $0.2 | $0.8 | 轻量级任务、高并发场景 |API优化技巧： 中文成本更高：因编码差异，中文Token消耗是英文的2~3倍（如100汉字≈250 Token）； 批量请求折扣：单日超1000次调用可申请Batch API，成本降50%（响应延迟24小时内）； 按需选择模型：轻度使用（&amp;lt;50次/日）API月成本可低至$5，远低于Plus订阅。🇨🇳 三、中国用户专属方案 官方代充（推荐） 通过 fastgptplus.com 支付¥158/月（官价¥180），支持支付宝/微信，5分钟开通，含完整Plus权益。 App Store年付 iOS用户年付¥6990（约¥583/月），价格稳定但略高于官网。 合租平台（风险提示） 银河录像局等平台月费¥27~50，但共享账号有隐私泄露和额度分摊风险。 💡 四、免费/优惠渠道（2025年7月有效） 学生优惠：美加大学生可通过SheerID验证获2个月免费Plus（需注意自动续费）； Copilot替代：微软Copilot永久免费提供GPT-4 Turbo，支持128K上下文（高峰期可能降级）； 移动端试用：iOS/Android应用不定期推送1个月免费试用，需绑定支付方式并及时取消。⚖️ 五、选择建议：订阅还是API？| 用户类型 | 推荐方案 | 理由 ||————|————|———|| 日均使用&amp;lt;50次 | API按量付费 | 月成本可控制在$5以内 || 重度交互用户 | Plus订阅（代充¥158） | 免去额度焦虑，功能完整 || 小型团队协作 | Team年付（$25/人/月） | 协作功能+集中管理 || 企业集成开发 | API + 批量折扣 | 灵活控制成本，支持定制化 | 💰 成本示例：若每日调用100次GPT-4o（平均2000 Token/次），API月成本约$7.5，远低于Plus的$20。💎 总结ChatGPT收费体系灵活多样，个人用户建议通过代充订阅Plus（¥158/月）平衡功能与成本；开发者可优先评估API用量；企业用户则适合Team或定制方案。未来若推出年付（预测$200/年），性价比将进一步优化。GPT Plus有什么权益？ChatGPT Plus（官方定价 $20/月，约¥145）是OpenAI针对个人用户推出的高级订阅服务，相比免费版在功能、性能和权限上均有显著提升。以下是2025年7月的最新权益详解，结合官方信息与实测数据整理：🚀 一、核心模型与功能升级 GPT-4o 优先访问权 免费版仅限 GPT-3.5 Turbo，Plus 用户可无限制使用 GPT-4o（准确率提升至 86.7%，代码生成、数学推理能力显著增强）。 支持 128K 上下文窗口（免费版仅 8K），处理长文档、多轮对话更高效。 深度研究（Deep Research） 每月 10 次高级查询额度，可生成带参考文献的研究报告，自动分析数百篇网络文献（耗时 5-30 分钟/次）。 支持图像嵌入回答，提升复杂问题的可视化呈现。 📁 二、文件处理与分析能力 多格式文件解析：上传 PDF、Excel、Word 等文件，直接提取数据、生成图表或总结核心内容。 代码解释器增强版：执行数据分析脚本，创建交互式图表（免费版功能受限）。🎨 三、图像与多媒体功能 DALL·E 3 图像生成 每日 50 张图像额度（免费版仅 3 张/天），支持高分辨率输出。 高级语音与屏幕共享 语音对话模式：实现接近真人的多轮语音交互（适合语言学习）。 屏幕共享分析：ChatGPT 可查看用户屏幕内容，实时解答问题（如调试代码、文档分析）。 ⚡ 四、使用配额与响应速度| 权益 | Plus 用户 | 免费用户 ||——————-|——————————-|————————–|| 消息额度 | 每 3 小时 80-150 条 | 连续 15-20 条后限流 || 响应速度 | 平均 1.2 秒（快 5 倍） | 高峰时段常延迟或排队 || 高峰期访问 | 优先使用权，服务稳定 | 常遇“容量已满”提示 || 新功能体验 | 抢先试用（如 GPT-4.5） | 延迟开放或无权限 |💎 五、附加权益与订阅建议 自定义 GPT 创建：打造专属 AI 助手（如学术辅导、媒体资源管理），支持分享。 长期记忆功能：逐步开放中，可记住用户偏好，提供个性化回复。 学生优惠：美加大学生曾享 2 个月免费（需 SheerID 验证，已结束）。 中国用户订阅：通过 fastgptplus.com 代充约 ¥158/月（节省汇率/支付手续费）。💡 总结：适合谁订阅？ ✅ 推荐 Plus：重度研究/开发者、内容创作者、需处理复杂任务的专业人士。 ⚠️ 免费版足够：轻度用户（日常问答、简单写作）、预算敏感型学生。 💰 性价比替代： 学生/教育需求 → 微软 Copilot（永久免费 GPT-4 Turbo）； 中文用户 → fastgptplus.com（独立账号 + 中文客服）。 📌 注意：订阅自动续费，需手动取消。若日均使用 &amp;lt; 50 次，API 按量计费可能更省（约 $5/月）。chatgpt plus可以使用api吗？ChatGPT Plus 订阅服务和 OpenAI API 服务是相互独立的，具体区别和关联如下：🔑 一、ChatGPT Plus 是否包含 API 访问权限？不包含。ChatGPT Plus 订阅（$20/月）主要提供网页版增强功能（如优先使用 GPT-4o、更高消息额度、图像生成等），但 不包含 API 调用权限。API 需单独开通并按 Token 使用量付费。⚖️ 二、Plus 订阅与 API 的关系 独立计费体系 Plus 订阅费：$20/月，仅用于网页版功能增强。 API 费用：按 Token 消耗计费（如 GPT-4o 输入 $5/百万 Token，输出 $20/百万 Token）。 新用户福利：注册 OpenAI 账号可获 $18 免费 API 额度，与 Plus 订阅无关。 Plus 用户开通 API 的额外优势 优先访问权：Plus 用户申请 GPT-4 API 无需排队，普通用户需加入候补名单（Waitlist）。 更高配额：历史付费记录良好的 Plus 用户可能获得更高 API 调用频率。 💻 三、如何开通 API 服务？ 升级付费账户 登录 OpenAI 平台，点击 Upgrade 绑定信用卡（支持 Visa/MasterCard 等）。 国内用户注意：需使用国际信用卡或虚拟卡（如 WildCard）。 生成 API Key 在 API Keys 页面点击 Create new secret key，复制保存密钥。 调用 API 时需在代码中设置模型参数（如 model=&quot;gpt-4&quot;）。 💰 四、成本对比：Plus 订阅 vs. API 调用| 场景 | 推荐方案 | 理由 ||————————-|——————–|————————————————————————–|| 重度网页交互用户 | Plus 订阅 | 无限次网页对话 + DALL·E 图像生成，适合非开发者。 || 日均调用 &amp;lt; 50 次 | API 按量付费 | 月成本可控制在 $5 以内（示例：100次/日 × 2000 Token/次 ≈ $7.5/月）。 || 团队集成开发 | API + 批量折扣 | 申请 Batch API 可降 50% 成本（延迟 ≤24 小时）。 |💎 五、总结建议 只需网页增强功能 → 订阅 ChatGPT Plus（$20/月）。 需将 GPT-4 集成到自有系统 → 开通 API 服务（按 Token 付费）。 学生/预算敏感用户 → 用 微软 Copilot（免费支持 GPT-4 Turbo）替代 Plus 订阅。 💡 提示：两者可同时使用——Plus 用于日常对话，API 用于开发集成，但费用需分开支付。plus可以干些啥？ 写 PPT请帮我设计一个10页的PPT大纲，主题是”2025年品牌营销趋势”每页需有标题有3-4个bullet要点，风格简洁明了修改：将第2页数据趋势拆分为2页，加入更多电商案例2，写代码3，研究报告与行业分析如我有一份1万字的行业调研资料，请帮我提炼出关键结论，按”市场现状-竞争分析-未来趋势-建议”结构输出4，运营海报与营销文案5，运营文章 / 内容创作" }, { "title": "AI系列75:Genspark使用", "url": "/posts/ai-75/", "categories": "AI系列", "tags": "AI系列", "date": "2025-07-01 05:30:00 +0800", "snippet": "Genspark 不仅能写文案、生成表格、做编程，最吸睛的还是那款“AI幻灯片神器”——让你从写标题到出整套PPT，全流程5分钟内搞定超级智能体：智能规划并并行执行复杂任务，提供一站式的工作和生活支持服务。AI幻灯片：一个提示词，即可获得完整的专业幻灯片；·自动研究并将研究结果整理成幻灯片；·导入任何文档并转换为AI幻灯片。AI表格：将现有的数据转化为强大的洞察和可视化图表自由处理数据-自动搜索、分析或可视化。AI视频：免费使用来自Gemini、Kling和PixVerse的顶级模型。做ppt时，如果对内容不满意可核查或单页编辑提示词帮我生成一份关于【主题】的演示文稿，受众是【对象】，内容包括【要点A】【要点B】等。明确受众:“受众为高层管理者/外部客户/产品经理”列出结构:“请包括市场现状、行业痛点、解决方案、成果预期四部分”控制风格:“语气专业、数据多、语言精炼” 或 “风格轻松活泼、有视觉吸引力”输出格式说明:“输出PPT格式，每页控制在50字以内，使用要点式呈现”" }, { "title": "AI系列74:Genspark", "url": "/posts/ai-74/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-29 05:30:00 +0800", "snippet": "Genspark 是一款由前百度高管景鲲（Eric Jing）和朱凯华（Kay Zhu）于 2023 年创立的 AI 智能体平台，总部位于美国加州，并在新加坡设有分支机构。它通过多智能体协作系统（Mixture-of-Agents, MoA）整合多种大模型和工具，实现复杂任务的自动化处理。以下是其核心功能及竞品分析：🚀 一、Genspark 是什么？核心定位Genspark 以 “AI 代理引擎” 为核心，通过多智能体分工协作完成用户任务。用户输入需求后，系统自动调度多个 AI 代理（如搜索、分析、生成模块），最终输出结构化结果（如网页、报告、多媒体内容）。其技术亮点包括： 混合模型架构：整合 Claude、GPT、DeepSeek 等 9 个主流模型及 80+ 工具，动态分配任务优化效率。 实时验证机制：采用“规划-执行-验证”三步策略，减少结果错误和幻觉。 多模态交互：支持文本、图像、视频输入/输出，并可调用外部工具（如地图、电话系统）。⚙️ 二、Genspark 的核心功能1. 深度研究与内容生成 SparkPage：针对复杂查询（如学术研究、市场分析），自动爬取网络/文献，生成带参考文献的专题报告（支持 100+ 来源）。 PPT/网页一键生成：根据文档或指令自动制作演示文稿或营销页面，支持中英文输出及多模态嵌入（如图表、视频）。 视频创作：输入脚本描述，自动生成动画视频（如乐高风格短片），但丰富度仍有提升空间。2. 生活与办公自动化 旅行规划：定制行程（含景点、交通、餐厅预订），调用地图工具生成可分享的图文路线。 电话代拨：通过 App 自动拨打电话预约服务（如餐厅）。 数据智能分析：上传 Excel 后，用自然语言指令生成图表或报告（例：市场趋势预测）。3. 搜索与知识管理 无广告浏览器：内置 AI 浏览器（仅限 Mac），拦截广告并提供思维导图式搜索结果。 深度研究模式：支持后台任务运行，完成后邮件通知用户（例：20 分钟生成贸易分析报告）。4. 企业级扩展 团队协作：整合 Google Workspace、Notion，管理邮件/文档流程。 安全合规：通过 SOC 2 Type II 认证，企业数据零持久化存储。🔍 三、知名竞品对比Genspark 的竞品主要集中在“通用 AI 智能体”赛道，各具特色： 竞品名称 核心优势 局限性 适用场景 Manus 端到端任务闭环（如金融建模、游戏开发），支持 200+ 工具深度整合 生成速度慢（20+分钟），网页链接易失效 企业流程自动化、高阶开发任务 OpenAI Agent 融合视觉理解与强化学习，执行浏览器操作（如表单填写） 复杂场景错误率高，结果需人工修正 基础自动化任务 天工超级智能体 Office 三件套生成能力突出（PPT/Word/Excel），支持全链路内容溯源 仅网页端，移动体验弱 办公文档高效生产 扣子空间 深度集成字节生态（如飞书），自然语言交互门槛低 功能局限于结构化报告，复杂任务支持弱 日常办公协作 💡 性能对比：在 GAIA 智能体评测中，Genspark 任务成功率（80%）显著高于 OpenAI Agent（40%）和 Manus（60%），但在视频生成等场景弱于天工。💎 四、总结：如何选择？ 选 Genspark：适合需 深度研究、跨工具任务执行 的用户（如市场分析师、内容团队），其多代理协同和实时验证机制保障结果可靠性。 选竞品： 办公场景优先 → 天工超级智能体（Office 三件套优化）； 开发/金融建模 → Manus（工具链深度整合）； 日常轻量任务 → OpenAI Agent 或 扣子空间（低成本上手）。 Genspark 提供免费版（200积分/天），付费版 $24.99/月（10000积分）。若追求任务自动化与多模态生成，可优先试用其网页端或 iOS/Android App。" }, { "title": "AI系列73:Augment Code安装与使用", "url": "/posts/ai-73/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-28 05:30:00 +0800", "snippet": "需要安装好python, pip, uv,uvx, nodejs, npm, npx建议打开Auto开关，然后Agent Memories是自带的记忆功能，可以查看和修改，发送按钮前面还有一个优化提示词的按钮进入Settins,在 tools 最下面有一个默认终端选择，用于 augmentCode 在 agent 模式下执行命令行使用。建议选择 fully supported 的 shell。提示词支持项目级 rules 和全局用户级的 rules# FLOW 协议：智能编程助手框架默认使用简体中文回复。## 核心工作流程你是专业的 IDE 集成 AI 编程助手，你的官方代号是 **Claude 4.0 sonnet**。每个请求必须按以下流程处理：### 第一步：三维评估（必须明确说明）对每个任务进行量化评估并在回复开头明确说明：** 评估维度：**- ** 理解深度 **：需要多少背景信息？ - 低：需求明确，上下文充足 - 中：需要部分澄清或背景调研 - 高：需要深入理解业务逻辑或架构- ** 变更范围 **：影响代码的广度？ - 局部：单个方法 / 函数内修改 - 模块：单个类 / 文件或相关文件组 - 系统：跨模块、架构级别变更- ** 风险等级 **：出错的影响程度？ - 低：不影响核心功能，易回滚 - 中：可能影响部分功能，需要测试 - 高：可能导致系统故障或数据丢失### 第二步：响应模式选择** 直接执行模式 **（低 + 局部 + 低）- 适用：明确的 bug 修复、简单功能添加、代码格式化- 行动：直接提供解决方案和完整代码** 探索确认模式 **（任一维度为中）- 适用：需要技术选型、部分重构、功能扩展- 行动：分析问题 → 提供 2-3 个解决方案 → 使用 `寸止` 工具确认 → 执行** 协作规划模式 **（任一维度为高）- 适用：架构重构、大规模变更、高风险操作- 行动：创建工作记录文件 → 分阶段规划 → 逐步执行 → 每阶段确认## 强制工具使用规范### 1. 代码库信息检索（必须执行）- ** 开始工作前 **：调用 memory-bank工具的`get-memory-bank-info` 获取项目上下文- ** 代码修改前 **：用augmentcode的代码索引查询相关代码结构- ** 工作完成后 **：调用 memory-bank工具的`update-memory-bank` 更新项目记录### 2. 技术文档查询（编码前必须）- 使用新库 / 框架前必须通过 context7工具的`resolve-library-id` + `get-library-docs` 查询最新文档- 禁止基于记忆或假设编写代码- 不确定的 API 用法必须通过自带的搜索工具验证### 3. 用户交互规范（严格遵守）- ** 唯一询问方式 **：只能通过 `寸止`工具的`zhi` 方法进行用户交互- ** 禁止行为 **：直接在回复中询问、自行结束对话- ** 必须确认场景 **： - 需求不明确时 - 多个技术方案选择时 - 即将完成任务前 - 发现潜在风险时## 代码质量标准### 代码展示格式使用 `&amp;lt;augment_code_snippet&amp;gt;` 标签展示代码：````xml path = 具体文件路径 mode=EXCERPT````java// 现有代码上下文+ 新增代码（绿色标记）- 删除代码（红色标记） // 更多上下文### 代码质量要求- ** 完整性 **：提供充足的代码上下文- ** 安全性 **：包含适当的错误处理和参数验证- ** 可读性 **：中文注释，语义化变量名- ** 标准性 **：遵循项目现有代码风格- ** 无占位符 **：避免 `// TODO` 或 `...` 等占位符## 工作记录机制### 协作规划模式工作文件模板```markdown# 任务：[具体任务描述]创建时间：[时间戳]评估结果：[三维评估结果]## 执行计划1. [阶段 1] - [预计时间]2. [阶段 2] - [预计时间] 3. [阶段 3] - [预计时间]## 当前状态正在执行：[当前阶段]进度：[百分比或具体描述]## 已完成- [✓] [具体完成项]- [✓] [具体完成项]## 下一步行动[具体的下一个操作]## 风险点- [潜在风险 1]：[应对措施]- [潜在风险 2]：[应对措施]特殊约束条件禁止行为（不可覆盖） 创建测试文件（除非明确要求） 执行编译或运行命令（除非明确要求） 生成项目文档（除非明确要求） 直接询问用户（必须使用 寸止工具的zhi 方法） 自行结束对话（必须通过 寸止工具的zhi 方法 确认）任务完成标准 功能实现完整 代码质量符合标准 通过 寸止工具的zhi 方法 获得用户确认 执行 命令行运行 wsay&quot; 搞完了 &quot;实施示例** 示例 1：简单 bug 修复 **用户：&quot;修复这个空指针异常&quot;评估：低理解深度 + 局部变更 + 低风险 → 直接执行模式行动：查询代码 → 分析问题 → 提供修复方案** 示例 2：功能重构 **用户：&quot;重构用户认证模块&quot;评估：高理解深度 + 模块变更 + 中风险 → 协作规划模式行动：创建工作记录 → 分析现有架构 → 制定重构计划 → 分阶段执行工具调用优先级 memory-bank - 获取项目上下文 context7 - 技术文档查询 寸止 - 用户交互确认## MCP 工具在设置中的 Tools 中安装 MCP 工具建议安装Context7 Playwright, Sequential thinking, 目前 MCP 工具的调用最好还是在提示词中明确调用时机。三种添加方式，1是Add MCP，示例Name:memory-bankCommand:npx -y @neko0721/memory-bank-mcp2是Add remote mcpcontext7-mcpURL:https://mcp.api-inference.modelscope.net/70c73b9e0ee344/sse3是Import from JSON```json{ &quot;mcpServers&quot;:{ &quot;寸止&quot;:{ &quot;command&quot;:&quot;寸止&quot;, &quot;args&quot;:[] } }}寸止:类似于mcp-feedback-enhanced，主要功能是打断 AI 闷头干活，转而和我们进行交互。可以实现：AI 需要决策的时候、AI 想要结束的时候、 AI 想要做某些事情的时候，来问我们希望怎么做。用这种 MCP 工具可以在一个请求中充分利用最大 token 数（不用担心 600 次不够用）memory-bank:类似于 codelf，主要功能是生成固定几个 markdown 文档，帮助 AI 维护持久的项目上下文。可以实现：AI 每次在干活前，都先看一下这几个 markdown 文档，先大概了解整个项目的结构、技术栈、注意事项等，这样对需求的理解更到位。其它提示词示例你是 IDE 的 AI 编程助手，遵循核心工作流（研究 -&amp;gt; 构思 -&amp;gt; 计划 -&amp;gt; 执行 -&amp;gt; 评审）用中文协助用户，面向专业程序员，交互应简洁专业，避免不必要解释。[沟通守则]响应以模式标签 [模式：X] 开始，初始为 [模式：研究]。核心工作流严格按 研究 -&amp;gt; 构思 -&amp;gt; 计划 -&amp;gt; 执行 -&amp;gt; 评审 顺序流转，用户可指令跳转。[核心工作流详解][模式：研究]：理解需求。[模式：构思]：提供至少两种可行方案及评估（例如：方案 1：描述）。[模式：计划]：将选定方案细化为详尽、有序、可执行的步骤清单（含原子操作：文件、函数 / 类、逻辑概要；预期结果；新库用 Context7 查询）。不写完整代码。完成后用 mcp-feedback-enhanced 请求用户批准。[模式：执行]：必须用户批准方可执行。严格按计划编码执行。计划简要（含上下文和计划）存入 ./issues/ 任务名.md。关键步骤后及完成时用 mcp-feedback-enhanced 反馈。[模式：评审]：对照计划评估执行结果，报告问题与建议。完成后用 mcp-feedback-enhanced 请求用户确认。[快速模式][模式：快速]：跳过核心工作流，快速响应。完成后用 mcp-feedback-enhanced 请求用户确认。[codelf工具]1.在回应或修改代码之前，应首先通过get-project-info获取全面信息，然后再做决定。2.每次完成代码编辑后，调用update-project-info并按照响应中的指示进行操作。【User Guidelines示例】## 核心规则 **每次用户交互都必须按顺序完整调用所有三个MCP工具，无任何例外****在需要删除文件时，必须要先调用MCP Feedback Enhanced弹出窗口，得到我的允许或确认的反馈后才可以执行删除操作。 ### 强制MCP调用顺序1. **Context7** - 获取相关技术文档和最新信息2. **Sequential Thinking** - 基于充分信息进行结构化分析3. **MCP Feedback Enhanced** - 确认最终解决方案并收集用户反馈3. **mysql** -查询SQL ## 工作流程规范 ### 项目理解与文档管理1. **优先查阅项目文档**：每次交互都要先检查项目中的 `README.md` 文档，理解整体架构与目标2. **主动创建文档**：若项目缺少文档，主动创建 `README.md`，包含： - 功能说明 - 使用方式 - 核心参数 - 项目结构3. **充分利用上下文**：每次交互都要查看相关关键文件，充分理解需求，避免理解偏差4. **及时更新文档**：每次修改完成后，更新项目文档以反映最新进展 ### 需求确认与方案设计- **主动确认需求**：若需求不够清晰，立即通过反馈机制询问用户- **简单有效原则**：推荐最简单有效的解决方案，避免不必要的复杂设计- **渐进式改进**：优先实现核心功能，再逐步完善细节 ## MCP调用详细说明 ### Context7 - 信息收集阶段- **调用时机**：每次交互的第一步，必须执行- **主要目的**： - 获取与问题相关的最新技术文档 - 查询相关API、框架、库的官方信息 - 收集准确的技术背景和最佳实践 ### Sequential Thinking - 结构化分析阶段 - **调用时机**：Context7完成后立即执行- **主要目的**： - 基于Context7获取的信息进行结构化分析 - 将复杂问题分解为逻辑清晰的解决步骤 - 在分析过程中可再次调用Context7获取具体技术细节 - 实现信息获取与问题分解的动态循环 ### MCP Feedback Enhanced - 用户确认阶段- **调用时机**：Sequential Thinking完成后必须执行- **主要目的**： - 向用户展示完整的解决方案 - 提供明确的选择选项或确认点 - 收集用户反馈以便后续改进- **持续会话要求**：必须保持WebSocket连接，等待用户反馈- **循环交互机制**：收到用户反馈后，重新开始完整的三步MCP流程- **禁止提前结束**：除非用户明确表示结束，否则必须持续等待反馈 ## 交互控制规则 ### 交互终止条件只有当用户明确表示以下意图时，才可以停止调用 `MCP Feedback Enhanced`：- &quot;结束&quot;- &quot;可以了&quot; - &quot;就这样&quot;- &quot;无需更多交互&quot;- 或其他明确的结束意图 ### 持续交互要求- 用户提供反馈后，必须重新执行完整的三步MCP流程- 直到用户明确表示满意或结束，否则持续进行交互循环 ## 语言与交流规范 **始终使用中文进行交流**，包括：- 所有对话内容- 代码注释- 文档说明- 错误提示- 技术解释 ## 标准回答格式 每次回答必须包含以下三个部分： ​```**Context7 信息收集**[显示查询过程和关键信息总结] **Sequential Thinking 结构化分析**[显示基于Context7信息的分析过程和解决步骤] **MCP Feedback Enhanced 用户确认**[向用户提供选择选项和明确的确认请求]​``` ## 质量保证要求 ### 每次执行必须确保：1. **Context7调用有效**：获得了相关的技术信息2. **Sequential Thinking有逻辑**：分析过程清晰合理3. **Feedback Enhanced有交互**：用户有明确的参与点4. **流程完整性**：三个步骤都得到执行5. **信息连贯性**：每步都基于前一步的结果 ### 禁止行为：- 禁止跳过任何MCP工具- 禁止根据问题复杂度选择性调用- 禁止自动判断是否需要调用MCP- 禁止直接回答而不使用MCP工具 **记住：这不是建议，而是必须严格遵循的强制要求！** 举个例子：我问一个问题后，你需要1、调用context72、调用sequential thinking3、调用feedback enhanced然后我提交反馈，你继续执行：1、调用context72、调用sequential thinking3、调用feedback enhanced我再提交反馈，你继续执行：1、调用context72、调用sequential thinking3、调用feedback enhanced如此往复，除非我在feedback的反馈中提交类似结束、无需继续交互、停止回答的反馈，你才可以停止这条回答。将触发时机设置为「always」。参考https://github.com/imhuso/cunzhihttps://github.com/MCP-Mirror/hoppo-chan_memory-bank-mcp/blob/main/README_CN.mdContext配置打开一个项目时，需要点击 index Codebase 索引整体项目代码，让AI了解项目" }, { "title": "AI系列72:Augment Code", "url": "/posts/ai-72/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-27 05:30:00 +0800", "snippet": "Augment Code 是一款专注于提升软件开发效率的 AI 编程平台，特别擅长处理大型复杂代码库，强调上下文感知和团队协作能力。它和 Cursor、GitHub Copilot 同属当前主流的 AI 编程工具，但在定位、核心能力及适用场景上存在显著差异。以下从多个维度进行系统对比分析：🔧 一、产品定位与技术架构| 维度 | Augment Code | Cursor | GitHub Copilot ||——————|————————————————|———————————————–|—————————————-|| 产品形态 | 跨 IDE 的 AI 代理平台（支持 VS Code/JetBrains/Vim） | AI 原生编辑器（基于 VS Code 分支） | IDE 插件（嵌入现有编辑器） || 技术基础 | Claude Sonnet 3.7 + OpenAI O1 双模型集成 | 多模型切换（Claude 3.7/GPT-4o/Gemini） | OpenAI GPT 系列模型（如 GPT-4） || 核心创新 | 行业领先的上下文引擎（20 万 token） + 代理自动化任务 | 深度代码库感知 + Agent 多文件重构 | 实时行级补全 + 轻量级聊天辅助 || 数据安全 | SOC 2 Type II 认证，代码零持久化 | 企业级安全选项（需配置） | 基础加密，依赖 GitHub 策略 | 💡 关键差异： Augment Code 强在上下文理解与任务自动化，适合企业级复杂项目； Cursor 重在全代码库交互，提供类 IDE 的深度集成体验； Copilot 优势在于轻量快速补全，适合日常编码加速。 ⚙️ 二、核心能力对比1. 代码理解与生成 Augment Code： 支持多模态输入（截图/Figma 转代码），实时索引全库（20 万 token），提供“Next Edit”逐步重构指导； 独有的 Memories 功能：持久化记忆用户编码风格，优化长期一致性。 Cursor： 跨文件重构能力强，支持 Agent 模式自动添加测试/配置； 聊天式代码库问答，适合新人快速理解项目。 Copilot： 行级补全速度快，覆盖 30+ 语言，但对复杂逻辑和多文件关联理解有限。 2. 自动化与协作 Augment Code： Agent 自动执行任务（如生成 PR、运行终端命令），支持 Slack 集成实现团队知识同步； Cursor： 后台 Agent 处理耗时任务（如生成测试），多标签对话辅助并行开发； Copilot： 无自动化任务能力，协作依赖外部工具（如 GitHub Issues）。 3. 调试与维护 Augment Code： 提供“代码检查点”自动跟踪变更，一键回滚，降低重构风险； Cursor： 自动错误定位 + 修复建议，适合调试大型文件； Copilot： 基础错误检测，复杂问题需手动排查。 🎯 三、适用场景与团队匹配| 场景 | 推荐工具 | 理由 ||————————-|——————–|————————————————————————–|| 大型企业代码库 | Augment Code | 上下文引擎处理 10 万+行项目更精准，符合企业安全合规需求 || 复杂重构/跨文件修改 | Cursor | Agent 模式自动化重构，减少人工干预 || 快速原型/MVP 开发 | GitHub Copilot | 低成本（$10/月），补全效率高 || 终端驱动开发 | Claude Code | 命令行深度集成，适合 DevOps 场景 || 预算敏感型团队 | Cursor Pro | $20/月，平衡功能与成本 | 📊 定价参考（2025 年 7 月更新）： Augment Code：开发者版 $50/月（近期涨价 67%）； Cursor：Pro 版 $20/月，Business 版 $40/月； Copilot：个人版 $10/月。 💎 四、总结建议 选择 Augment Code 若：✅ 需处理百万级 Token 的企业级代码库；✅ 重视任务自动化（如生成 PR/运行命令）；✅ 愿为顶级上下文引擎支付溢价。 选择 Cursor 若：✅ 偏好一体化 AI 编辑器，深度重构需求多；✅ 需平衡功能与成本。 选择 Copilot 若：✅ 追求高性价比的日常补全工具；✅ 项目以小型/原型为主。三者定位鲜明，不存在绝对“最优”，而是适配不同开发范式。企业级复杂项目可优先试用 Augment Code（14 天免费），个人或敏捷团队建议从 Cursor 或 Copilot 切入。" }, { "title": "AI系列71:token是啥", "url": "/posts/ai-71/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-26 05:30:00 +0800", "snippet": "Tokens（标记）是大语言模型（如 GPT、LLaMA、DeepSeek 等）处理文本的基本单位，它决定了模型如何“理解”和“生成”语言。以下是关于 tokens 的深度解析：一、Tokens 的本质 定义Token 是模型对文本进行分段处理的最小单元，可以是： 一个单词（如 apple） 一个子词（如 un + forget + able → unforgettable） 一个字符（如中文的 你） 标点符号（如 !） 分词原理（Tokenization）通过分词器（Tokenizer） 将文本拆解为 tokens，核心算法包括： Byte Pair Encoding (BPE)：GPT 系列、LLaMA 使用 WordPiece：BERT 系列使用 SentencePiece：跨语言模型通用 二、Tokens 如何影响模型工作1. 输入限制 模型有 上下文窗口上限（如 GPT-4 Turbo 支持 128K tokens），超出部分会被截断。 示例：你好！ → 中文字符通常 1字≈2 tokens（实际：你=1 token, 好=1 token, ！=1 token → 总计 3 tokens）。2. 计算与成本 API 收费按 token 计费（如 GPT-4 输入 $10/1M tokens，输出 $30/1M tokens）。 模型推理时 计算量正比于 token 数量（显存占用、生成时间均受影响）。3. 生成控制 max_tokens 参数限制生成长度（如设为 100 则输出不超过 100 tokens）。 长文本生成需多次分段处理（受限于上下文窗口）。三、中英文 Token 差异对比| 文本类型 | 示例句子 | Token 数量 | 分词逻辑 ||————–|———————–|—————-|——————————-|| 英文 | Hello, world! | 3 tokens | [&quot;Hello&quot;, &quot;,&quot;, &quot; world!&quot;] || 中文 | 你好，世界！ | 6 tokens | [&quot;你&quot;, &quot;好&quot;, &quot;，&quot;, &quot;世&quot;, &quot;界&quot;, &quot;！&quot;] || 混合文本 | Python很棒！ | 5 tokens | [&quot;Python&quot;, &quot;很&quot;, &quot;棒&quot;, &quot;！&quot;] | 💡 关键结论： 英文 1 token ≈ 0.75 个单词 中文 1 token ≈ 0.5~1 个汉字（因分词器而异） 代码、公式 消耗 tokens 较多（特殊符号密集） 四、如何计算 Token 数量？常用工具： OpenAI Tokenizer（在线工具）输入文本实时显示 token 分割结果 Hugging Face transformers 库 from transformers import GPT2Tokenizertokenizer = GPT2Tokenizer.from_pretrained(&quot;gpt2&quot;)text = &quot;深度学习改变世界！&quot;tokens = tokenizer.tokenize(text) # [&#39;深&#39;, &#39;度&#39;, &#39;学&#39;, &#39;习&#39;, &#39;改&#39;, &#39;变&#39;, &#39;世&#39;, &#39;界&#39;, &#39;！&#39;]print(len(tokens)) # 输出：9 Tiktoken（OpenAI 官方库） import tiktokenenc = tiktoken.encoding_for_model(&quot;gpt-4&quot;)print(enc.encode(&quot;你好！&quot;)) # [33450, 362, 123] → 3 tokens 五、Token 优化的实用技巧 精简提示词（Prompt） 删除冗余描述（如将 “请用专业且详细的语气回答” → “专业回答：”） 结构化输入 用 JSON 代替自然语言描述参数 示例：❌ 低效：用户叫张三，年龄30岁，查询北京天气（12 tokens）✅ 高效：{&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:30,&quot;query&quot;:&quot;北京天气&quot;}（8 tokens） 压缩长文本 使用 gpt-3.5-turbo 生成摘要再输入主模型 调整生成参数 设置 max_tokens=合理值 避免无效长输出 六、高级知识：Token 与模型架构的关系 位置编码（Positional Encoding）：每个 token 的位置信息嵌入向量，使模型理解词序。 注意力机制（Attention）：计算 token 之间的关联权重（计算复杂度随 token 数量平方增长）。 KV Cache：推理时缓存历史 token 的 Key/Value 张量，减少重复计算。 ⚠️ 当输入超过 上下文窗口 时，模型可能： 丢失早期信息（如 GPT 的滑动窗口） 直接报错（如 Claude 的硬截断） 💎 总结Tokens 是 LLM 的“语言血液”，直接影响： 模型理解能力（分词质量决定语义还原度） 系统性能边界（上下文长度限制） 应用成本（按 token 计费）掌握 token 的运作机制，是构建高效、低成本 AI 应用的基础技能。 用 OpenAI Tokenizer 测试你的常用提示词消耗 在代码中集成 tiktoken 监控生产环境 token 用量 长文本场景优先选择支持 128K+ tokens 的模型（如 GPT-4 Turbo、Claude 3、DeepSeek-R1）" }, { "title": "AI系列70:AutoGPT", "url": "/posts/ai-70/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-25 05:30:00 +0800", "snippet": "AutoGPT 是由开发者 Significant Gravitas 创建的开源 AI 代理项目，托管在 GitHub 上（项目地址）。它基于 GPT-4 或 GPT-3.5 大语言模型（LLM），通过自主任务分解与执行能力，实现了无需人工干预的复杂任务自动化。以下是核心调研结果：🔧 一、技术栈与开发语言 开发语言：Python（需 Python 3.8 及以上版本）。 依赖框架： OpenAI API（驱动 GPT-4/GPT-3.5 模型）； 内存管理工具（如 Redis、Pinecone、Milvus 等）； 插件扩展系统（支持网络搜索、文件操作、API 调用等）。 部署方式：支持 Docker 容器化部署或本地 Python 环境运行。⚙️ 二、核心功能与工作原理AutoGPT 的核心是 AI Agent（智能代理）架构，具备自主规划、执行和迭代能力： 任务分解用户设定目标（如“开发一个电商网站”），AutoGPT 自动拆解为子任务（需求分析、代码编写、测试部署）。 自主决策与执行通过 OODA 循环（观察-定向-决策-行动）动态调整策略，调用工具完成： 🔍 联网搜索实时信息； 💾 读写本地文件（代码、报告等）； 🤖 调用 API（如社交媒体发帖、邮件发送）； 📊 数据分析与可视化。 记忆管理支持长期记忆存储（Redis 等），保留任务上下文。🚀 三、典型应用场景以下为 AutoGPT 的实践案例（详见）： 场景类别 具体任务 AutoGPT 行动流程 📚 研究分析 技术趋势调研、竞品报告生成 自动爬取网页→总结内容→生成结构化报告→保存文件 💻 开发与运维 网站/应用开发、代码调试 设计架构→编写代码→运行测试→修复 Bug→部署上线 ✍️ 内容创作 营销文案、社交媒体策划、博客撰写 分析受众→生成文案→设计图片→定时发布 📊 数据分析 销售数据洞察、可视化图表生成 读取 Excel →统计分析→生成图表→输出建议 🛒 生活自动化 在线订购商品（如比萨）、比价购物 搜索平台→添加购物车→支付下单 ⚠️ 四、局限性与挑战 成本高：依赖 GPT-4 API，复杂任务需大量 Token，费用显著； 稳定性风险：可能陷入循环决策或执行错误（如重复生成相同文件）； 技术门槛：需配置 API 密钥、环境依赖，对非开发者不友好； 精度问题：不适用于需高精度输入的任务（如特定格式的 API 调用）。🔮 五、生态发展 衍生工具： AgentGPT（浏览器直接部署）； AutoGPT-Next-Web（简化云部署）。 OpenAI 官方集成：ChatGPT 的 “Browsing”、“Code Interpreter” 等功能借鉴了 AutoGPT 的自主代理理念。 未来方向：多模态支持（图像/音频）、多 Agent 协作、安全性强化。💎 总结AutoGPT 是首个实现 GPT-4 全自动任务执行的实验性项目，标志着 AI 从“被动应答”向“主动代理”的范式转变。尽管当前存在成本与稳定性瓶颈，其开源生态和插件扩展性（如支持 11 种记忆存储、50+ 工具调用）为开发者提供了强大的自动化基座。随着 Agent 技术的演进，AutoGPT 或将成为个人与企业级自动化的核心引擎。" }, { "title": "AI系列69:ComfyUI", "url": "/posts/ai-69/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-24 05:30:00 +0800", "snippet": "ComfyUI 是一款开源的 模块化 Stable Diffusion 工作流工具，通过节点式图形界面（Node-Based GUI）实现高度定制化的图像/视频生成流程。其核心定位是为专业用户提供精细化控制能力，同时兼顾性能优化与跨平台兼容性：🧩 一、ComfyUI 核心特性与优势 工作流自由定制 基于节点拖拽连接构建生成流程（如加载模型→提示词编码→采样→超分辨率），支持实时预览中间结果。 工作流可保存为 JSON 或嵌入 PNG 元数据，实现一键复现（如社交媒体下载图片直接还原完整流程）。 性能与兼容性 低显存优化：支持 --lowvram 模式，3GB 显存即可运行；异步队列系统提升吞吐效率。 多模型支持：兼容 SD1.x/2.x/SDXL/Stable Video Diffusion/Stable Cascade 等，可混合调用 ControlNet、LoRA 等插件。 跨平台部署：Windows/macOS/Linux 全支持，Mac M1 以上机型可流畅运行。 效率对比 实测 RTX 3060 生成 20 张 512×768 图像，耗时仅为 WebUI 的 50%，显存占用减少 30%。 支持中断续生成，修改部分节点后仅重执行受影响模块。 生态扩展 通过 ComfyUI Manager 管理海量社区节点（如图像修复、3D 生成）。 无缝迁移 WebUI 模型，复用已有资源。 🆚 二、开源竞品全景图按功能场景分类的知名替代工具：🎨 1. 设计增强型工具| 工具 | 核心优势 | 适用场景 | 与 ComfyUI 对比 ||————————|———————————————|———————————-|——————————————|| Jaaz | 自然语言驱动设计 + 角色一致性生成 | 海报/分镜/UI 原型 | ✅ 交互更直观；❌ 流程定制弱于 ComfyUI || FLUX.1 Kontext | 精准局部编辑（如换装/换背景）+ 多轮不崩坏 | 商业修图/角色设计 | ✅ 编辑精度更高；❌ 缺乏视频生成能力 || InvokeAI | 专业级 ControlNet 控制 + Web UI 易用性 | 商业素材生成 | ✅ 开箱即用；❌ 可扩展性低于节点系统 |🎥 2. 视频与多模态工具| 工具 | 核心优势 | 适用场景 ||————————|———————————————|———————————-|| ShortGPT | 自动化视频流水线（脚本→配音→字幕→素材生成） | 营销视频/快速内容生产 || LLaVA-NeXT | 多模态理解（图+文）+ 视觉指令微调 | 图文分析/跨模态生成 |⚙️ 3. 底层框架与开发平台| 工具 | 核心优势 | 适用场景 ||————————|———————————————|———————————-|| Diffusers | Hugging Face 官方库，API 标准化易集成 | 开发者定制化管道 || XAgent | 安全工具调用 + 任务自动化调度 | 企业级工作流编排 |💎 三、选型建议| 用户需求 | 推荐工具 | 关键理由 ||—————————-|—————————–|—————————————————————————–|| 精细化图像生成流程控制 | ComfyUI | 节点自由组合 + 性能优化 + 生态丰富 || 商业级图像精修 | FLUX.1 Kontext | 局部编辑精准度 SOTA + 角色一致性保持 || 快速视频内容生产 | ShortGPT + Jaaz | 分镜→视频全自动流水线 || 开发者模型集成 | Diffusers | 标准化 API + 多框架兼容 | 💡 趋势洞察： ComfyUI 正向 实时协作（如飞桨星河云端版）和 多模态融合（集成音频生成）演进。 竞品如 FLUX.1 Kontext 通过 开源非商业模型 挑战 GPT-4o/Gemini，推动技术民主化。 " }, { "title": "AI系列68:suna，开源版manus", "url": "/posts/ai-68/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-23 05:30:00 +0800", "snippet": "Kortix AI 是一家专注于 通用型AI智能体（AI Agent） 技术的新兴公司，成立于2024年，由 CEO Marko O. Kraemer 领导。公司定位为“通过自然语言交互解决现实世界复杂任务的AI助手开发者”，其核心产品是开源项目 Suna。🧠 一、Kortix 公司背景 成立时间：2024年 技术方向：专注于开发具备“行动力”的AI Agent，支持自然语言驱动任务执行。 开发速度：仅用3周时间完成 Suna 的首版开发，体现了高效的技术执行力。 开源理念：主张技术民主化，将商业级AI能力（如Manus的替代品）免费开放给社区。⚙️ 二、核心产品：Suna（全球首款开源通用型AI智能体）Suna 是 Kortix 的旗舰产品，定位为 “Manus的开源平替”，旨在通过自然语言交互自动化处理复杂任务。其核心特性如下：1. 功能亮点 浏览器自动化：自动导航网页、填写表单、抓取数据（如竞品分析或价格监测）。 文件管理：支持创建/编辑文档（文本、Excel、PDF），例如生成市场报告或整理数据。 网络爬虫与API集成：抓取 LinkedIn/Crunchbase 等平台数据，生成结构化报告（如B2B客户清单）。 命令行与网站部署：执行系统脚本、自动化运维，并支持一键部署静态网站。 多模型兼容：通过 LiteLLM 集成 OpenAI、Anthropic 等大模型，灵活适配不同需求。2. 技术架构| 组件 | 技术栈 | 作用说明 ||——————|———————-|—————————————–|| 后端引擎 | Python + FastAPI | 调度任务、集成LLM（如GPT-4/Claude） || 前端界面 | Next.js + React | 提供对话式交互面板与任务监控 || 执行环境 | Docker 容器 | 隔离运行环境，保障安全（浏览器/命令行访问）|| 数据库 | Supabase（PostgreSQL）| 存储用户历史、文件、任务状态 |3. 应用场景 市场分析：自动生成行业报告（如苹果公司财务趋势分析）。 销售自动化：抓取潜在客户信息并生成联系人列表。 学术研究：汇总论文数据，生成文献对比报告。 个人效率：规划行程、整理文档（如团队旅行方案）。4. 部署与生态 自托管：支持 Docker 部署，需配置 OpenAI API 密钥（推荐硬件：NVIDIA RTX3060 + 16GB RAM）。 云端服务：提供免费版（10分钟/月）和付费版（Pro：$29/4小时）。 开源生态：GitHub Star 量快速破万，社区贡献了 Supabase 集成、GitHub Actions 自动化等扩展。🌐 三、社区反响与行业定位 对标竞品：直接挑战商业产品 Manus，以 “开源免费+高执行力” 形成差异化优势。 用户评价： 开发者称赞其 “将复杂任务自动化成本降低90%”（如200家公司CEO信息3分钟整理完毕）。 企业用户肯定其 数据隐私保障能力（自托管模式避免敏感数据上云）。 局限与改进： 初始配置需技术背景（社区呼吁简化云端部署）。 未来计划支持多模态（图像/语音）和更深度工具集成（如 Blender/Xcode）。 项目地址： GitHub 仓库：https://github.com/kortix-ai/suna 在线体验：https://www.suna.so " }, { "title": "AI系列67:Hugging Face 和 ModelScope魔搭", "url": "/posts/ai-67/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-22 05:30:00 +0800", "snippet": "Hugging Face 和 ModelScope 是当前人工智能领域两大重要的开源模型平台，它们在推动模型共享、开发与应用方面扮演着关键角色，但在定位、技术生态和应用场景上存在显著差异：🧠 一、核心定位与背景| 特性 | Hugging Face | ModelScope ||————————|———————————————-|———————————————|| 开发方 | 美国独立开源公司 | 中国阿里巴巴集团 || 成立时间 | 2016 年 | 2022 年 || 核心目标 | 构建全球最大开源模型社区，推动 AI 民主化 | 提供一站式模型服务（MaaS），降低中文场景 AI 使用门槛 || 技术侧重 | NLP 起家，逐步扩展至多模态 | 全领域覆盖（NLP/CV/语音/科学计算等） || 开源程度 | 完全开放，社区驱动 | 开源为主，部分企业级功能需阿里云集成 |⚙️ 二、核心功能对比1. 模型生态 Hugging Face 模型库：托管超 50 万个模型（如 Llama、Stable Diffusion），覆盖文本、图像、音频等多模态任务。 特色工具： Transformers 库：标准化模型调用接口（PyTorch/TensorFlow）。 Trainer API：简化训练流程，支持混合精度训练、分布式训练等高级功能。 Spaces：提供模型在线演示环境（如 AI 换装、视频生成）。 ModelScope 模型库：聚焦中文场景，提供超 600 个预训练模型（如通义千问、视觉大模型）。 特色工具： ms-swift 框架：支持模型微调（LoRA/QLoRA）、量化、RLHF 全流程开发。 企业级服务：集成阿里云算力，支持大规模模型训练与部署。 2. 开发体验 Hugging Face 强项：国际化社区活跃，文档完善，适合快速原型验证。 典型用例：通过 Pipeline API 三行代码调用文本生成模型。 ModelScope 强项：中文文档丰富，提供 AgentScope 等多智能体开发框架，适合企业级应用编排。 典型用例：使用 ms-swift 在单卡上 10 分钟微调 Qwen 模型。 🌐 三、技术架构差异Hugging Face 技术栈graph LR A[Transformers库] --&amp;gt; B[模型训练-Trainer API] A --&amp;gt; C[模型部署-Inference Endpoints] A --&amp;gt; D[数据集管理-Datasets] D --&amp;gt; E[社区协作-Hugging Face Hub] 优势：标准化程度高，生态工具链完整（如评估库 Evaluate、可视化工具 Gradio）。ModelScope 技术栈graph LR F[ModelScope Library] --&amp;gt; G[训练框架-ms-swift] G --&amp;gt; H[分布式训练-DeepSpeed/FSDP] G --&amp;gt; I[推理加速-vLLM/LmDeploy] F --&amp;gt; J[云服务集成-阿里云PAI] 优势：深度优化中文场景，支持 昇腾 NPU 国产硬件适配。🚀 四、典型应用场景Hugging Face 适用领域 快速原型开发：例如用 Stable Diffusion 生成营销图片。 学术研究：复现最新论文模型（如 LLaMA-3）。 跨国团队协作：通过 Spaces 共享多语言对话机器人。ModelScope 适用领域 中文业务落地： 金融：通义千问合同审核系统。 电商：多模态商品描述生成。 政企私有化部署：通过阿里云专有云满足数据合规需求。🔍 五、平台选择建议| 需求场景 | 推荐平台 | 理由 ||—————————-|——————|————————————————————————–|| 国际化项目/最新模型实验 | Hugging Face | 模型更新快，社区支持广，生态工具成熟 || 中文业务/企业级生产环境 | ModelScope | 中文优化深，阿里云集成紧密，符合国内数据合规要求 || 多智能体系统开发 | ModelScope | AgentScope 框架提供分布式 Actor 模型，简化复杂 Agent 编排 || 教育/低成本入门 | Hugging Face | 免费资源多，Colab 教程丰富 |💡 六、发展趋势 Hugging Face：向 AI 全栈平台 演进，整合模型开发、评估、部署全链路（如推出 Inference Endpoints 托管服务）。 ModelScope：强化 垂直行业解决方案，如医疗模型（阿里健康）、工业质检（通义工业）。 两者均代表了开源模型平台的先进方向，开发者常组合使用——例如用 Hugging Face 做前沿实验，ModelScope 实现中文业务落地。" }, { "title": "AI系列66:LTX-Video", "url": "/posts/ai-66/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-21 05:30:00 +0800", "snippet": "LTX-Video 是由以色列科技公司 Lightricks 开发的开源视频生成模型，是全球首个基于 DiT（Diffusion 扩散Transformer）架构 的实时高质量视频生成模型。它通过创新的时空压缩技术和硬件优化，实现了 “生成速度快于视频播放速度” 的革命性突破。：🧠 一、核心定位与技术突破 实时高清视频生成 支持 1216×704@30FPS 高清视频实时生成，单帧耗时低至 33ms（低于标准播放的 33.3ms/帧），在 NVIDIA H100 GPU 上生成 5 秒视频仅需 4 秒 。 多模态输入：支持文本、图像、视频片段、关键帧序列等多种输入方式，并支持组合生成（如“图+文→视频”）。 技术革新点 高压缩时空潜在空间： 采用 Video-VAE 实现 1:192 压缩比（时空下采样 32×32×8 像素），显著降低计算复杂度 。 潜在通道数增至 128 维，减少冗余并提升信息密度 。 端到端去噪集成： VAE 解码器同时执行 潜在→像素转换 和 最终去噪，避免传统两阶段模型的细节损失 。 多尺度渲染技术： 从低分辨率草图逐步细化至高精度画面，模仿艺术家创作流程，大幅降低显存需求 。 ⚙️ 二、核心架构与技术原理 时空扩散模型（Spatio-Temporal Diffusion） 在空间（每帧细节）和时间（帧间连贯性）维度同步扩散与去噪，解决视频闪烁与跳跃问题 。 引入 3D 自注意力机制，增强跨帧物体运动连贯性（如海浪拍岸的水花轨迹）。 动态令牌传输（Dynamic Token Transfer） 精准跟踪物体运动轨迹，提升视频逻辑一致性（如“滑板少年被狗追逐”场景中角色与动物的互动自然性）。 硬件加速优化 FP8 量化：13B 模型量化后可在 RTX 4090（24GB 显存）运行，生成速度提升 5 倍 。 蒸馏技术：13B→2B 轻量版速度提升 15 倍，支持消费级 GPU 实时生成 。 🚀 三、性能表现与模型版本| 版本 | 参数量 | 分辨率支持 | 生成速度（RTX 4090） | 适用场景 ||———————–|——–|————–|———————-|—————————|| LTXV-13B-FP8 | 130亿 | 2K@24FPS | 18ms/帧 | 电影级质量输出 || LTXV-2B-Distilled | 20亿 | 720p@30FPS | 33ms/帧 | 实时交互、低显存设备 || LTX-Q8（移动端） | 量化版 | 480p@15FPS | 63ms/帧 | iOS/Android 应用集成 | 💡 关键指标： VBench 综合评分 89.38%（细节保真度、运动连贯性全球第一）； 同等硬件下速度达 Sora/Veo 的 30 倍（37.59秒 vs 25分钟）。 🎬 四、应用场景与案例 创意内容生产 广告行业：1 小时生成 50 组产品动态视频（如“冰雾中旋转的饮料瓶”）。 教育视频：9 帧古代兵器图扩展为 25 秒演示视频，分辨率 1024×576 。 影视工业革新 预可视化：输入剧本分镜，实时生成动态预演（如“阴天海浪冲击礁石”场景）。 视频修复：扩展老旧影片帧率至 60FPS，修复划痕并增强分辨率 。 多模态创作 关键帧动画：上传多张角色草图，自动生成平滑转场动画（如人物转身、环境渐变）。 🛠️ 五、部署与使用指南 环境配置 硬件：≥8GB 显存（2B 蒸馏版）/ ≥24GB（13B 完整版）。 软件：Python 3.10.5 + CUDA 12.2 + PyTorch ≥2.1.2 。 生成代码示例 # 文本→视频（蒸馏版）python inference.py --prompt &quot;透明饮料瓶在冰雾中旋转&quot; \\--height 720 --width 1280 --num_frames 65 \\--pipeline_config configs/ltxv-2b-0.9.6-distilled.yaml 优化参数配置| 目标 | 推理步数 | 引导系数 | 采样器 | 分辨率 ||—————|———-|———-|———–|————-|| 质量优先 | 40+ | 3.5 | DDIM | 1216×704 || 速度优先 | 8-12 | 2.8 | Euler | 640×352 || 平衡模式 | 20-30 | 3.2 | DPM++ 2M | 896×512 | 生态工具扩展 ComfyUI-LTXTricks：提升风格迁移精度 23% 。 TeaCache：无训练缓存加速，推理速度提升 40% 。 🌐 六、行业影响与开源价值 挑战巨头技术壁垒 以 1/10 训练成本（数千万美元）实现媲美 Sora 的性能，推动开源视频生成生态 。 普惠化创意工具 年收入低于 1000 万美元的企业可免费商用，覆盖独立创作者与中小企业 。 开源贡献 公开 模型权重、训练代码 及 多尺度渲染专利，加速行业创新 。 💎 总结：视频生成的“DeepSeek 时刻”LTX-Video 通过 DiT 架构革新 + 硬件级优化，实现了从“分钟级等待”到“秒级实时”的跨越，其核心价值在于： 技术民主化：消费级 GPU 可运行好莱坞级视频生成； 创作自由：支持多模态输入与跨帧一致性控制； 开源引领：推动 AI 视频从“实验室特权”迈向“全民创造”时代。 项目资源： GitHub 源码：Lightricks/LTX-Video " }, { "title": "AI系列65:Phi3与Phi Silica", "url": "/posts/ai-65/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-20 05:30:00 +0800", "snippet": "Phi Silica 和 Phi-3 是微软推出的轻量级语言模型（SLM）系列中的不同成员，二者定位、架构和应用场景有显著差异。：🧠 一、核心定位与设计目标| 特性 | Phi-3 系列 | Phi Silica ||——————–|————————————|————————————|| 定位 | 通用轻量模型家族（覆盖文本、多模态） | 专为 Copilot+ PC NPU 优化的端侧模型 || 参数规模 | 3.8B~140B（如 Mini 3.8B, Vision 4.2B） | 3.3B（Phi-3 系列最小成员） || 开源状态 | ✅ 全系列开源（HuggingFace） | ❌ 闭源，仅通过 Windows App SDK 使用 || 目标硬件 | 云/边/端全平台（Web、Android、iOS 等） | Copilot+ PC 的 NPU（如高通骁龙 X Elite） |⚙️ 二、架构与技术差异1. Phi-3 系列：灵活的多场景适配 模型分支： Phi-3-mini（3.8B）：128K 长上下文，语言/编码任务超 GPT-3.5。 Phi-3-vision（4.2B）：多模态模型，支持图像推理、OCR，性能超 Claude-3 Haiku。 Phi-3-medium（14B）：综合性能逼近 Mixtral 8x22B。 训练数据：优化教科书级高质量数据，提升小模型推理能力。 部署灵活性：支持转译到 ONNX、WebNN 等格式，跨平台运行。2. Phi Silica：NPU 专属优化 硬件协同设计： 深度适配 NPU 指令集，实现 Token 级响应延迟 &amp;lt;100ms（如 Recall 功能实时回溯屏幕内容）。 通过 Windows DirectML 直接访问 NPU，避免 CPU/GPU 资源争用。 能效比：功耗降低 40%，续航提升 19 小时（实测联想 Yoga AI PC）。 隐私保护：数据完全本地处理，支持离线运行（如实时翻译 40 种语言）。🚀 三、性能对比| 任务类型 | Phi-3-vision | Phi Silica ||——————–|——————————–|———————————|| 视觉推理 | ✅ 图像/图表理解（OCRBench SOTA） | ❌ 不支持多模态 || 端侧延迟 | 500ms（依赖 CPU/GPU） | ✅ &amp;lt;100ms（NPU 专属优化） || 长文本处理 | ✅ 128K 上下文（Phi-3-mini） | ❌ 仅支持 4K 上下文 || 工具链兼容性 | ✅ PyTorch/HuggingFace 生态 | ✅ Windows App SDK 深度集成 | 💡 Phi Silica 在 SLM 端侧榜单（LMArena） 刷新 SOTA，但牺牲了多模态和长文本能力。🌐 四、应用场景 Phi-3 系列： 云/边缘计算：Azure AI 服务、移动端 App（如 Phi-3-vision 解析医疗报告）。 开源开发：HuggingFace 提供 Demo 和微调指南（链接）。 Phi Silica： Copilot+ PC 原生功能：Recall（屏幕历史回溯）、实时字幕翻译、本地知识检索。 企业隐私场景：处理敏感数据（如金融/医疗文档）无需上云。 🔧 五、开发者资源 Phi-3 系列： PhiCookBook 开源库：提供模型微调、部署示例（如 Ollama 本地运行）。 教程涵盖：RAG 增强、多模态提示工程、Azure 部署。 Phi Silica： Windows Copilot 库：提供本地 API（如 Windows.AI.NLP）调用模型。 开发限制：仅支持 Windows 11 24H2+ 及 Copilot+ PC 设备（如 Surface Pro 11）。 💎 总结：关键选择建议 选 Phi-3 若：需开源模型、多模态支持、跨平台部署或长文本处理。 选 Phi Silica 若：追求 NPU 极致性能、Windows 生态深度集成、强隐私需求。参考https://github.com/microsoft/PhiCookBook?tab=readme-ov-file" }, { "title": "AI系列64:claude哪个模型最强", "url": "/posts/ai-64/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-19 05:30:00 +0800", "snippet": "Claude Opus 4 是Anthropic目前最强大的模型，被官方称为“全球最佳编程模型”和“公司迄今最智能的AI系统”：⚡️ 一、Claude Opus 4的核心优势 编程能力全球领先 在权威软件工程基准测试 SWE-bench 中达到 72.5% 的准确率，超越前代Opus及多数竞品（如GPT-4o）。 实际开发中表现突出： 复杂代码库理解能力获 Cursor 评价为“编程领域最尖端技术”； Replit 验证其跨文件修改的精确性显著提升。 持续工作能力革命性突破 独立运行长达7小时，性能无衰减（如日本乐天Rakuten的开源重构任务验证）。 适合大型项目重构、多步骤系统设计等需长期专注的场景。 记忆与工具使用的质变 支持创建“记忆文件”：当应用授权本地文件访问时，可存储关键信息，显著提升长期任务连贯性。 并行工具执行：在扩展思考中结合网络搜索等工具，优化复杂问题解决路径（测试版）。 混合推理模式灵活适配 即时响应（简单查询）与扩展思考（深度分析）自由切换，用户可配置“思考预算”平衡速度与成本。 📊 二、与同系列其他模型对比| 模型 | 核心定位 | 关键性能 | 适用场景 ||——————|———————————-|———————————-|—————————–|| Claude Opus 4 | 顶级复杂任务处理 | • SWE-bench 72.5% • 7小时持续工作 • 记忆文件支持 | 企业级Agent开发、科研、超长程编码 || Claude Sonnet 4 | 高效能日常应用 | • SWE-bench 72.7% • 成本优化（输入$3/百万token） | 高频编码、客户服务AI、快速原型设计 || Claude 3.5 Sonnet | 多模态性价比之选（旧版） | • 视觉任务强于GPT-4o • 200K上下文（实际有效约90K） | 图文分析、基础编程辅助 | 💡 性能说明： Sonnet 4在SWE-bench分数（72.7%）略高于Opus 4（72.5%），但后者在复杂系统设计、长程任务稳定性、工具协同能力上全面领先。 Claude 3.5虽支持200K上下文，但实测超90K后性能下降明显，而Opus 4通过记忆文件优化了长程一致性。 💰 三、成本 定价： Opus 4：输入15美元/百万token，输出75美元/百万token（高性能溢价）。 Sonnet 4：输入/输出成本仅为Opus 4的1/5，适合高频使用。 平台支持： Anthropic API、Amazon Bedrock、Google Vertex AI。 Claude Code 正式上线：深度集成VS Code/JetBrains，支持GitHub Actions自动化。 🎯 四、建议 选Opus 4若： 需求涉及超长时任务（＞1小时）、企业级Agent开发或高精度代码重构； 预算充足，愿为顶级性能付费。 选Sonnet 4若： 追求性价比与高频交互（如日常编程辅助、客服代理）； 需快速响应且任务复杂度中等。 💎 总结Opus 4代表了当前Claude系列的巅峰，尤其在编程持久性、复杂问题解决和工具协同上树立了新标杆。若您的场景需要“AI数字同事”级能力，Opus 4是首选；若侧重效率与成本，Sonnet 4则是更优平衡之选。" }, { "title": "AI系列63:AIPC NPU端侧大模型", "url": "/posts/ai-63/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-18 05:30:00 +0800", "snippet": "AI PC 的 NPU（神经处理单元）上运行端侧大模型，能通过软硬件协同优化，实现高效能、低延迟的端侧 AI 体验：🧠 一、 轻量文本模型（专注语言任务）1. Phi-3 Silica（微软） 参数：3B 核心特性： 专为 Copilot+ PC 设计，适配 NPU 算力，支持 128K 长上下文，推理延迟 &amp;lt;100ms。 在端侧实现 SOTA 性能，尤其擅长代码生成与多轮对话，集成于 Windows 11 AI 功能（如“Click to do”）。 部署硬件：高通 Snapdragon X Elite NPU、英特尔酷睿 Ultra NPU。2. 面壁 MiniCPM 3.0 参数：4B 核心突破： 性能超越 GPT-3.5：在 MMLU、代码生成等榜单领先，量化后仅需 2GB 内存。 无限长文本处理：通过 LLMxMapReduce 分帧技术，支持百万字文档分析（性能超 Kimi）。 端侧最强 Function Calling：接近 GPT-4o 水平，支持调用本地 API（如日历、邮件）。 部署场景：法律合同审查、长文摘要（联想 Yoga 系列已预装）。🌐 二、 多模态模型（支持图文/音视频）1. Megrez-3B-Omni（无问芯穹） 参数：3B 核心特性： 端侧全模态三合一：同步处理图像、音频、文本，例如拍照问“AA 人均费用”，再语音生成催款文案。 OCR 与手写识别 SOTA：模糊图片、复杂手写字精准提取（OpenCompass 榜单超越 34B 模型）。 内存 &amp;lt;3GB，支持网页搜索（WebSearch 功能）。 部署硬件：手机、平板（小米/联想合作机型）。2. MiniCPM-V 2.6（面壁智能） 参数：8B 核心优势： 端侧视频理解巅峰：在 Video-MME 评测超越 GPT-4V，支持实时摄像头流分析（如安防监控）。 Token 密度 2×GPT-4o：180 万像素图像仅需 640 Token，NPU 推理速度 18 tokens/s。 典型设备：英特尔酷睿 Ultra（OpenVINO 优化）。⚡ 三、 高性能异构模型（CPU+GPU+NPU 协同）1. DeepSeek 7B（深度求索） 部署载体：联想 YOGA AI PC 技术亮点： 全球首款端侧运行 70 亿参数模型的 AI PC，支持 本地文档总结、翻译、隐私保护。 结合 个人知识库（PKB），构建用户专属记忆图谱（如会议纪要自动关联历史记录）。 能效比：19 小时办公续航，NPU 卸载 70% 计算负载。2. MiniCPM 4.0（面壁智能 × 英特尔） 参数：0.5B / 8B 创新架构： 高效双频换挡：长文本用稀疏注意力（省算力），短文本切稠密注意力（保精度）。 128K 上下文实测：90 秒读完《哈利波特》并总结（英特尔 NPU + KV Cache 优化）。 工具链：OpenVINO + IPEX-LLM，开箱即用部署。🆚 四、主流模型端侧部署对比表| 模型 | 参数 | 模态 | 关键技术 | 端侧延迟 | 典型设备 ||——————–|——-|————|—————————|————-|————————|| Phi-3 Silica | 3B | 文本 | 128K 长上下文 | &amp;lt;100ms | Surface Pro 11 || MiniCPM 3.0 | 4B | 文本 | 无限文本分帧 | 200ms | 联想 Yoga || Megrez-3B-Omni | 3B | 图+音+文 | 跨模态自由切换 | 300ms | 小米平板 7 Pro || MiniCPM-V 2.6 | 8B | 图/视频 | 高密度 Token 编码 | 500ms | 英特尔 Ultra 7 || DeepSeek 7B | 7B | 文本 | 个人知识库（PKB） | 1.2s | 联想 YOGA 360 |💡 五、选型建议 追求极低延迟 → Phi-3 Silica（3B 轻量，Win11 深度集成） 需长文本处理 → MiniCPM 3.0（4B 无限上下文，法律/教育场景） 多模态交互 → Megrez-3B-Omni（3B 全模态，适合移动端 App） 视频分析场景 → MiniCPM-V 2.6（端侧 SOTA 视觉理解） 企业隐私需求 → DeepSeek 7B（本地知识库 + 脱敏数据处理）⚙️ 六、部署优化关键技术 软硬件协同： 英特尔 OpenVINO 优化 KV Cache，推理速度提升 2.2 倍； 联想推理加速引擎：异构计算 + 算子融合，数学题求解速度 2 倍提升。 量化与压缩： 4B 模型量化至 2GB（如 MiniCPM 3.0），NPU 内存占用降低 70%。 工具链生态： Ollama + IPEX-LLM：200MB 整合包开箱运行（魔搭社区下载）； LM Studio：图形化部署 Qwen/DeepSeek 量化版（支持 AMD NPU）。 " }, { "title": "AI系列62:Gemma 3n", "url": "/posts/ai-62/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-17 05:30:00 +0800", "snippet": "Gemma 3 和 Gemma 3n 是 Google DeepMind 在 2025 年推出的两代开源大模型，定位互补但技术架构与应用场景差异显著：🧠 一、Gemma 3：高性能通用多模态模型1. 核心定位与特性 开源多模态基座：支持文本、图像、短视频输入，具备跨模态推理能力（如图像问答、视频摘要）。 参数规模：提供 1B/4B/12B/27B 四档参数版本，均支持 128K 长上下文，27B 版本在 LMArena 评测中以 1339 分超越 DeepSeek V3 等更大模型。 关键技术突破： 动态图像切片：支持高分辨率与非方形图像解析（如识别日语遥控器按钮功能）。 函数调用与结构化输出：可直接生成代码、表格等结构化数据。 安全增强：集成 ShieldGemma 2 内容过滤器，自动屏蔽暴力/色情内容。 2. 性能表现| 任务类型 | 27B 模型表现 ||——————–|——————————————|| 文本推理 | MMLU-Pro 分数超 Gemma 2 达 33-45 分 ↑ || 多模态理解 | 支持 896×896px 图像解析，视频关键帧提取快 47% || 端侧适配 | 12B 模型可在 RTX 4090 部署，1B 模型兼容手机 |3. 典型应用场景 云端/工作站：复杂数据分析、代码生成、高清视频处理。 轻量级边缘设备：1B/4B 模型适用于 IoT 设备或移动端基础任务。📱 二、Gemma 3n：端侧全模态实时交互模型1. 核心革新 移动优先架构：基于 MatFormer 套娃式设计，嵌套子模型（如 E4B 内含完整 E2B），支持动态切换规模以节省电量。 内存压缩黑科技： PLE（逐层嵌入）技术：8B 参数模型仅需 3GB 内存（传统模型需 8GB+），5B 版仅需 2GB。 条件参数加载：按需加载视觉/语音模块，减少闲置资源占用。 全模态支持：原生融合文本、图像、音频、视频流输入，实时转录延迟 &amp;lt;100ms。2. 关键能力 音频突破：集成 Universal Speech Model (USM)，每 160ms 处理一段音频流，支持多语言翻译与情感分析。 视觉优化：MobileNet-V5 编码器实现手机端 60FPS 视频处理（Pixel 手机）。 性能纪录：E4B 版在 LMArena 首破 1300 分（&amp;lt;10B 参数模型最高分）。3. 应用场景 实时交互：AR 导游（拍照+语音提问→即时解说）、会议翻译（语音+屏幕内容同步分析）。 隐私敏感场景：医疗问诊录音转录、安防监控离线分析。⚖️ 三、Gemma 3 与 Gemma 3n 对比| 维度 | Gemma 3 | Gemma 3n ||——————|————————————–|————————————–|| 核心目标 | 通用高性能多模态任务 | 端侧实时全模态交互 || 关键技术 | 动态图像切片、函数调用 | MatFormer 架构、PLE 内存压缩 || 模态支持 | 文本+图像+视频 | 文本+图像+音频+视频流 || 内存需求 | 1B: 2GB, 27B: 24GB | E2B: 2GB, E4B: 3GB || 延迟要求 | 毫秒级（依赖硬件） | &amp;lt;100ms（端侧实时） || 典型硬件 | 云服务器/工作站/高端手机 | 中低端手机/平板/IoT 设备 || 开源生态 | Hugging Face / PyTorch / TensorFlow | Google AI Edge / Ollama / MLX |💎 四、选型建议 需处理复杂任务（如代码生成/高清视频分析）→ 选 Gemma 3：27B 版本逼近 Gemini Pro，适合开发级应用。 开发移动端实时 App（语音交互/AR 翻译）→ 选 Gemma 3n：内存占用仅为同级模型 1/3，响应速度碾压云端 API。 隐私与离线场景 → 强制 Gemma 3n：数据完全本地处理，无网络依赖。" }, { "title": "AI系列61:minicpm", "url": "/posts/ai-61/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-16 05:30:00 +0800", "snippet": "效果很惊艳：https://m.youtube.com/watch?v=JFJg9KZ_iZkMiniCPM 系列是由中国人工智能公司 面壁智能（OpenBMB） 研发的高效端侧大模型家族，专注于在低资源设备（如手机、平板）实现高性能多模态能力。以下是三款模型的详细解析与技术对比：🧠 一、模型概览与核心定位| 模型 | 发布时间 | 核心定位 | 参数量 | 模态支持 | 公司 ||——————|————–|—————————————|————|———————————-|——————-|| MiniCPM4 | 未明确提及 | 推测为基础文本生成模型 | 未公开 | 纯文本 | 面壁智能（OpenBMB） || MiniCPM-V 2.6 | 2024年8月 | 端侧多模态视觉理解（图像/视频） | 8B | 视觉（图/视频）+ 文本 | 面壁智能（OpenBMB） || MiniCPM-o 2.6 | 2025年1月 | 端侧全模态交互（视觉+语音+流式） | 8B | 视觉+语音+文本+实时流式交互 | 面壁智能（OpenBMB） | 面壁智能：清华系AI公司，由清华NLP实验室团队创立，华为哈勃领投，专注“高效大模型”（训练/推理/落地）。 MiniCPM4 可能是早期文本基座迭代版（如Qwen2.5-7B），而 V 2.6 和 o 2.6 是多模态扩展。 ⚙️ 二、技术特性与核心能力对比1. MiniCPM-V 2.6：端侧视觉理解巅峰 核心突破： 单图/多图/视频理解三冠王：在 OpenCompass（单图）、Mantis-Eval（多图）、Video-MME（视频）三大榜单超越 GPT-4V，单图理解比肩 Gemini 1.5 Pro。 实时视频理解首次上端：直接处理摄像头流数据，支持隐私安全的端侧视频分析（如监控、AR）。 多图联合推理：联合分析多张图片（如报销小票自动汇总金额），支持多图 ICL（视觉少样本学习）。 效率优化： Token 密度达 GPT-4o 两倍：处理 180 万像素图像仅需 640 Token（节省 75% 资源）。 端侧友好：量化后仅需 6GB 内存，推理速度 18 tokens/s（比上代快 33%）。 适用场景：移动端 OCR（文档扫描）、视频摘要、多图交互助手。2. MiniCPM-o 2.6：全模态流式交互革命 核心升级： 增加语音模态：支持中英双语实时对话，语音理解（ASR）超越 GPT-4o-realtime，具备语音克隆、情感控制能力。 多模态流式架构：接受连续视频/音频流输入，实现“边看边聊”实时交互（如直播解说、智能座舱）。 性能对标 GPT-4o：在 StreamingBench（流式交互评测）中超越 Claude 3.5 和 GPT-4o。 技术革新： 端到端全模态训练：视觉（SigLip）、语音（Whisper）、文本（Qwen2.5-7B）统一训练，共享知识表示。 时分复用（TDM）机制：将多模态流拆分为时间片序列处理，降低延迟。 适用场景：实时翻译助手、多模态直播、教育交互应用。3. MiniCPM4：高效文本基座（推测） 定位：作为系列基础语言模型，可能属 MiniCPM 2 系列分支（如 MiniCPM-2B-128K 长文本模型）。 特性： 支持 128K 长上下文，适合端侧文档处理。 在 InfiniteBench 榜单超越 Yi-6B-200K 等长文本模型。 GitHub 地址：https://github.com/OpenBMB/MiniCPM。📊 三、关键能力横向对比| 能力维度 | MiniCPM-V 2.6 | MiniCPM-o 2.6 | MiniCPM4（推测） ||——————–|————————————|————————————|—————————-|| 视觉理解 | ✅ 单图/多图/视频 SOTA | ✅ 继承 V 2.6 能力，增强流式处理 | ❌ 不支持 || 语音交互 | ❌ 不支持 | ✅ 双语实时对话+语音克隆 | ❌ 不支持 || 多模态流式 | ❌ 仅支持离线视频 | ✅ 实时视频/音频流输入 | ❌ 不支持 || OCR 能力 | ✅ OCRBench 开源闭源双料 SOTA | ✅ 优化古文字识别，支持 30+ 语言 | ❌ 不支持 || 端侧资源占用 | 6GB 内存，18 tokens/s | 类似 V 2.6，iPad 可流畅运行 | 1.01G（iOS 量化版） || 幻觉控制 | Object HalBench 幻觉率低于 GPT-4o | MMHal-Bench 超越 GPT-4o | 未提及 |🚀 四、面壁智能的技术路线与生态 高效三重奏： 训练高效：自研 BMTrain 框架，训练成本比 GPT-3 降 90%。 推理高效：端云协同推理，iPhone 15 运行速度达 25 tokens/s（人语速 15~25 倍）。 落地高效：开源 Agent 框架 ChatDev，推动智能体应用落地。 应用场景： V 2.6：安防监控（实时视频分析）、教育（多图解题）、金融（票据识别）。 o 2.6：跨境直播（实时翻译+配音）、健康咨询（语音情感交互）。 开源生态： 全系列模型开源，支持 llama.cpp、ollama、vLLM 部署。 GitHub 地址： MiniCPM-V 2.6 MiniCPM-o 2.6 💎 如何选择？ 需纯视觉分析 → MiniCPM-V 2.6（性价比最高，6GB 内存即可运行）。 需语音+视觉实时交互 → MiniCPM-o 2.6（唯一支持全模态流式交互）。 需长文本处理 → MiniCPM4 系列（如 MiniCPM-2B-128K）。" }, { "title": "AI系列60:Perplexity", "url": "/posts/ai-60/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-15 05:30:00 +0800", "snippet": "Perplexity AI 是一家专注于 对话式搜索引擎（Answer Engine） 的创新型人工智能公司，成立于 2022 年，总部位于美国旧金山。它通过融合实时网络检索与大语言模型（LLM）能力，直接为用户提供精准、可验证的答案，而非传统搜索引擎的链接列表。其核心定位是“让知识获取像对话一样自然”，目前月查询量超 7.8 亿次，被英伟达创始人黄仁勋称为“几乎每天使用”的工具。🔍 一、Perplexity 的核心产品与功能Perplexity 以 “答案引擎” 为核心，逐步扩展至任务执行与知识管理平台，主要产品线包括：1. 基础问答引擎（Core Search） 实时问答：通过自然语言提问，即时生成答案并附带来源链接（支持 29+ 语言），解决传统搜索需自行筛选链接的痛点。 多模型支持：免费版使用自研模型，Pro 版可切换 GPT-4、Claude 3、Gemini 等顶尖模型优化结果。 Focus 垂类搜索：限定搜索范围（如学术论文、Reddit 讨论、YouTube 视频），提升专业场景精准度。2. Copilot（深度研究助手） 通过多轮对话细化问题，3~4 分钟生成结构化的深度报告（如市场分析、学术综述），适合研究型任务。 Pro 用户每日可使用 300+ 次，免费版限次。3. Labs（AI 项目执行平台） 革命性突破：10 分钟内自动完成复杂项目，例如： 投资分析（爬取数据→生成图表→撰写报告） 创意生产（科幻剧本 + 分镜设计） 客户清单整理（含交互式仪表盘）。 输出打包为可下载资产（PDF/代码/图表），仅限 Pro 用户使用。4. Spaces（团队知识库） 支持上传 PDF/CSV/图片等文件，构建私有知识库并基于内容问答。 支持团队协作共享提问与结果，适合企业研究部门。5. 全场景入口扩展 移动端 APP：iOS/Android 应用，支持语音提问与跨设备同步。 WhatsApp 集成：无需安装，直接聊天提问（支持生成图片、设置提醒等）。 Comet 浏览器（开发中）：下一代 AI 原生浏览器，重构信息获取体验。🆚 二、Perplexity 的知名竞品对比根据技术路线与核心场景，竞品可分为三类：1. 传统搜索引擎（实时性 + 广度） Google 搜索： 优势：全网覆盖最广，本地化优化强（如地图/商家信息）。 弱点：结果需用户自行筛选，答案碎片化。 百度/秘塔 AI 搜索： 中文垂类优化（如论坛/文库），但多语言支持弱于 Perplexity。 2. 对话式 AI（生成能力 + 交互深度）| 竞品 | 核心优势 | 与 Perplexity 对比 | |—————-|—————————————|——————————————| | ChatGPT | 多轮对话流畅，文本生成能力强 | ❌ 无实时网络检索，依赖旧数据 | | Claude 3.5 | 长文本处理优，道德约束严谨 | ❌ 缺乏来源引用，验证成本高 | | Kimi（月之暗面） | 中文长上下文强，支持深度探索 | ✅ 资料深度接近，❌ 多语言检索弱 |3. 专业研究工具（垂直场景） Wolfram Alpha： 数学计算与结构化数据查询无敌，但自然语言理解弱。 Consensus（学术版 Perplexity）： 专注科研论文检索，但通用性不足。 💎 三、总结：Perplexity 的定位与用户选择建议1. 不可替代的核心价值 可信度：每个答案附带来源链接，杜绝“AI 幻觉”。 效率革命：从提问→答案→项目执行的全链路自动化（Labs 功能）。 纯净体验：无广告干扰，答案直达本质。2. 适合人群与场景| 用户类型 | 推荐功能 | 价值点 | |——————–|———————————-|—————————————-| | 学生/研究者 | Copilot + Academic Focus | 快速生成文献综述，溯源高效 | | 企业团队 | Spaces + Labs | 私有知识库整合 &amp;amp; 自动化报告| | 多语言信息获取者 | 多语言提问 + Reddit/YouTube Focus| 原生语言资料直采（如日语技术文档） | | 效率极客 | WhatsApp 集成 + 语音输入 | 无摩擦获取答案 |" }, { "title": "AI系列59:ElevenLabs", "url": "/posts/ai-59/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-14 05:30:00 +0800", "snippet": "前面刚写了12 labs，这里又来了一个11 labs，ElevenLabs 是一家专注于生成式AI语音技术的创新公司，成立于2022年。其核心目标是通过AI模型消除语言障碍，提供高度逼真的语音合成、克隆及多语言配音服务，已成为估值超11亿美元的独角兽企业：AI语音技术先驱，致力于创造最自然，最富表现力的AI语音解决方案。🧠 一、核心技术与功能 自然语音合成（TTS） 高质量语音生成：支持29种语言（部分资料称32种），生成的声音具备情感、语调变化和上下文感知能力，可模拟愤怒、悲伤、快乐等情绪。 长文本处理：适用于有声书、新闻播报等场景，可一键生成整本书的语音版本。 语音克隆（Voice Cloning） 仅需 1分钟音频样本 即可克隆声音，保留原声的口音和情感特征，支持多语言输出（如用克隆的英语声音说日语）。 AI配音与翻译（AI Dubbing） 自动将视频/音频翻译成29种语言，保留原说话者的音色和情绪，用于影视本地化、多语言播客等。 创新工具扩展 Projects：长篇内容创作工具，支持多角色配音和分段编辑。 音频特效（Sound Effects）：根据文本生成环境音效（如雨声、爆炸声）。 移动端免费应用：iOS/Android版完全免费，支持文档扫描OCR和离线收听。 行业应用 客户包括 HarperCollins出版社（有声书）、Paradox Interactive（游戏NPC配音）、华盛顿邮报（新闻语音版）。 🆚 二、竞品对比以下竞品按语音质量、实时性、定制化等维度分类，并与ElevenLabs核心能力对比： 竞品名称 核心优势 适用场景 ElevenLabs对比 PlayHT 800+声音库，142种语言；实时WebSocket API（延迟130ms）；支持即时克隆（&amp;lt;10秒音频） 实时对话AI、客服机器人 ✅ 延迟更低，更适合实时交互 Murf AI 120+语音，20+语言；内置音频编辑器，支持视频同步；Adobe/FCP集成 视频配音、教育课件 ✅ 一体化编辑更强；❌ 情感表现较弱 海螺语音（MiniMax） 中文/粤语优化，T2A-01模型；情感控制细腻；ASMR与新闻播报场景领先 中文内容创作、多情感叙事 ✅ 中文处理更精准；❌ 语言支持较少（17种） Resemble AI 实时语音流媒体；支持语音到语音（Voice-to-Voice）转换；企业级数据安全 安防、实时语音交互 ✅ 实时流媒体更强；❌ 克隆需更高样本量 LOVO AI 500+语音库，100+语言；免费版可用；支持声音克隆（付费） 多语言营销视频、低成本项目 ✅ 免费方案更友好；❌ 音质略逊 Google Cloud TTS 深度集成GCP生态；按字符付费；支持WaveNet高保真引擎 企业云服务用户、开发集成 ✅ 云生态兼容性好；❌ 定制化弱 Descript 语音克隆+视频编辑一体化；AI语音修正口误功能 播客剪辑、视频内容后期 ✅ 多模态编辑更强；❌ 语音自然度较低 💎 三、选型建议：根据需求匹配工具 追求极致拟真与多语言 → ElevenLabs（影视配音、全球化工商业内容）。 实时交互与低延迟 → PlayHT（AI客服、游戏对话）。 中文内容创作 → 海螺语音（情感叙事、ASMR）。 低成本快速生成 → LOVO AI 或 123Apps（免费方案）。 企业云集成 → Google Cloud TTS（开发兼容性）。" }, { "title": "AI系列58:TwelveLabs视频理解", "url": "/posts/ai-58/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-13 05:30:00 +0800", "snippet": "TwelveLabs（Twelve Labs Inc.）是一家专注于多模态视频理解技术的创新型人工智能公司，总部位于美国旧金山，创立于2021年。其核心目标是通过自研的AI模型，使机器能够像人类一样深度理解视频内容，实现“让视频的处理和搜索变得和文本一样容易”：🧠 一、核心定位与技术优势 视频优先（Video-First）策略TwelveLabs 并非将视频视为图像或音频的简单延伸，而是开发专门针对视频多模态特性（视觉、音频、文本、上下文）的模型，解决传统视频理解依赖人工标注、元数据搜索的局限性。 自研大模型 Pegasus-1（800亿参数）： 视频语言模型（Video-to-Text），专注视频语义理解，支持长视频处理和多模态对齐。 在MSR-VTT数据集上性能提升61%，视频转文本效率比ASR+LLM方案高188%。 Marengo-2.6： 多模态基础模型，擅长跨模态检索（文本→视频/音频/图像）。 在MSR-VTT数据集上超越Google VideoPrism-G 10%，支持零样本分类和精准时间定位。 ⚙️ 二、核心产品功能通过API提供以下能力，主要服务于开发者与企业客户： 语义视频搜索 用自然语言定位特定场景（如“寻找跑步机上行走且背景有Air Jordans的视频”），结合视觉、音频、文本等多模态分析实现精准检索。 视频智能分析 分类：自动归类视频到预定义类别（如体育/新闻），无需标签数据。 问答（QA）：基于视频内容回答复杂问题（如“视频中人物讨论了哪些关键点？”）。 视频转文本生成 生成摘要、亮点片段、字幕，甚至定制化报告（如会议记录、自媒体文章）。 定制化与扩展性 支持模型微调（如调整行业术语）、云原生架构可处理PB级数据，适配企业私有化部署。 💰 三、融资情况 融资总额超1.07亿美元，投资方包括NVIDIA、Intel、Samsung、NEA等。 被CB Insights和Fast Company评为“最具创新力的AI搜索公司”。 竞品对比： 相比Google VideoPrism等通用模型，TwelveLabs专注视频多模态理解，在长视频处理和语义搜索上优势显著。 不同于OpenAI等文本优先模型，其“视频优先”架构更适配动态内容分析。 🌐 六、应用场景示例 媒体行业：自动生成体育赛事集锦，精准定位明星镜头。 企业知识库：搜索内部会议视频中的关键决策片段。 公共安全：分析监控视频，快速定位异常事件（如“穿红色外套者进入大楼”）。" }, { "title": "AI系列57:Cherry Studio", "url": "/posts/ai-57/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-12 05:30:00 +0800", "snippet": "Cherry Studio 是一款功能强大的开源跨平台多模型AI桌面客户端，支持 Windows、macOS 和 Linux 系统。它集成了多种主流大语言模型（如 OpenAI、Gemini、Anthropic、DeepSeek 等）以及本地模型（通过 Ollama），允许用户自由切换云端或本地模型，同时支持多模型对话对比、文件管理、知识库构建、AI绘画、翻译等功能。其核心亮点包括：内置 300+ 预配置 AI 助手、本地数据存储保障隐私、支持 WebDAV 备份、Mermaid 图表可视化等。🔧 一、Cherry Studio 的核心功能与定位 多模型支持 云端模型：OpenAI、Gemini、Anthropic、Azure 等主流服务商。 本地模型：通过 Ollama 集成 DeepSeek、Llama 等模型，保障数据隐私。 多模型同时对话：同一问题可获取多个模型的回答，方便对比分析。 知识库与文件管理 支持 PDF、Word、PPT 等格式文件导入，构建个性化知识库。 结合 RAG（检索增强生成）技术，实现基于文档的智能问答。 AI 工具集成 AI绘画：通过文本描述生成图像。 AI翻译：支持多语言精准翻译与文档处理。 代码高亮与 Mermaid 图表可视化，提升开发与展示效率。 数据安全与跨平台 所有数据本地存储，支持 WebDAV 备份，避免隐私泄露。 桌面端全覆盖（Win/macOS/Linux），计划支持移动端。 🆚 二、同类型知名竞品推荐以下是 Cherry Studio 的同类竞品，按核心功能场景分类：1. 多模型对话与本地部署 ChatBox 轻量级跨平台客户端，专注本地模型交互（Ollama 集成），适合低配设备运行 7B 以下模型，界面简洁易用。 适用场景：个人开发者调试、教育辅助离线问答。 AnythingLLM 企业级框架，支持 RAG、向量数据库与 AI Agent，适合定制化知识库系统，权限管理完善。 优势：多模态文档处理、深度集成本地模型（如 DeepSeek 14B）。 2. 知识库与企业级应用 Dify 低代码 LLM 应用平台，支持可视化构建知识库问答系统，适合企业级自动化流程。 Haystack（by deepset） 端到端问答框架，支持混合检索（BM25/向量），专注高精度企业搜索场景。 4. 低代码/可视化 AI 工作流 FlowiseAI 拖拽式构建 LLM 应用链，兼容 LangChain 组件，适合快速原型设计。 LangFlow LangChain 的可视化版本，通过节点连接实现工作流编排。 💎 三、选型建议：根据需求匹配工具| 需求场景 | 推荐工具 | 关键优势 ||—————————-|———————————-|——————————————|| 多模型对话 &amp;amp; 隐私保护 | Cherry Studio / ChatBox | 本地模型支持、数据加密、跨平台兼容 || 企业级知识库 &amp;amp; RAG | AnythingLLM / Dify | 权限管理、多格式文档处理、API 集成 || 快速原型 &amp;amp; 无代码开发 | FlowiseAI / LangFlow | 拖拽式界面、可视化工作流 || 轻量级本地模型交互 | ChatBox / Ollama | 低资源占用、开箱即用 |" }, { "title": "AI系列56:LangChain", "url": "/posts/ai-56/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-11 05:30:00 +0800", "snippet": "LangChain 是一个用于构建基于大语言模型（LLM）应用的开源框架，由 Harrison Chase 于 2022 年创建。其核心目标是通过模块化设计简化 LLM 与外部工具、数据源和工作流的集成，支持开发者构建复杂任务链（如文档处理→分析→报告生成）、Agent 动态决策等场景。是一个专为简化大语言模型（LLM）应用开发而设计的开源框架，旨在帮助开发者高效构建基于大模型的智能应用。它通过模块化设计解决了 LLM 与外部工具、数据源及复杂逻辑的集成问题，是当前 LLM 应用开发的首选工具之一。以下是其核心功能与特性详解：🔧 一、LangChain 核心功能与定位 模块化架构 六大核心组件：Models（统一模型接口）、Prompts（动态提示模板）、Chains（任务链编排）、Agents（工具调用与决策）、Memory（对话状态管理）、Indexes（外部数据集成）。 核心能力： 检索增强生成（RAG）：解决模型知识滞后问题。 多工具协同：支持调用 Python REPL、搜索引擎、API 等扩展功能。 典型场景：文档问答、客服机器人、多步骤自动化任务。 🆚 二、LangChain 的开源热门竞品全景图🧠 1. 专注检索增强（RAG） LlamaIndex 特点：专精文档索引优化，支持逐页索引、句子级检索和自动合并技术，显著提升 RAG 响应速度（相比基础方案提速 10 倍）。 场景：企业知识库问答、学术论文分析。 优势：开箱即用，轻量级；局限性：多代理交互能力弱。 同类工具：Haystack（企业级搜索系统，支持混合检索 BM25/向量）。 🤖 2. 多智能体协作框架 AutoGen（微软） 特点：基于对话机制协调多个 Agent（如“产品经理+工程师”代理协作），支持任务自动分解与工具调用。 场景：代码生成、跨角色复杂问题求解。 同类工具： AWS Multi-Agent Orchestrator：智能路由查询至最优 Agent，深度集成 AWS 生态。 Agno：高性能多模态引擎（文本/图像/音频），处理速度超 LangGraph 万倍。 🏢 3. 企业级解决方案 Semantic Kernel（微软） 特点：轻量级 SDK，深度集成 Azure OpenAI；支持 C#/Python/Java，通过 Kernel 容器统一管理插件与服务，强调生产级安全与可观测性。 场景：企业 Copilot、业务流程自动化。 PydanticAI 特点：基于 Python 的强类型框架，集成 Pydantic 实现结构化输出与日志监控，适合高可靠性系统。 🧩 4. 低代码/可视化开发 FlowiseAI 特点：拖拽式界面构建 LLM 应用，兼容 LangChain 组件，支持快速原型设计。 LangFlow 特点：LangChain 的可视化版本，通过节点连接工作流。 ⚙️ 5. **轻量级 SDK 与新兴框架 OpenAI Assistants API 特点：官方轻量级框架，内置记忆与工具调用，适合简单任务。 DSPy（斯坦福） 特点：通过提示优化而非硬编码构建管道，减少手动调参。 Mastra：TypeScript 全栈框架，内置 RAG 与工作流评估工具。💎 三、框架选型指南：按场景匹配最佳工具| 需求场景 | 推荐框架 | 关键优势 | 局限性 ||—————————-|———————————-|——————————————|—————————-|| 复杂工作流编排 | LangChain | 模块化灵活，支持多工具集成 | 学习曲线陡峭 || 高效文档检索（RAG） | LlamaIndex + Haystack | 检索速度优化，工业级部署 | 定制性较低 || 多角色任务自动化 | AutoGen | Agent 协同与任务分解 | 非编程场景适配弱 || 企业级 AI 集成 | Semantic Kernel / JBoltAI | Azure 生态兼容，生产级安全 | 依赖微软技术栈 || 快速原型设计 | FlowiseAI / LangFlow | 零代码可视化开发 | 复杂逻辑支持有限 || 研究导向/提示优化 | DSPy | 自动优化提示管道 | 学术场景为主 | 💡 组合实践： RAG 系统：LlamaIndex（索引） + LangChain（流程编排） + AutoGen（人工审核）。 企业应用：Semantic Kernel（核心逻辑） + TruLens（监控评估）。趋势：框架向多模态支持（Agno）、无代码化（AutoAgent）和生产稳定性（PydanticAI）演进。 🔧 四、核心功能模块 统一模型接口（Models） 支持多种 LLM（如 OpenAI GPT、ChatGLM、Llama 等开源/闭源模型）和 Embedding 模型（如 BGE、M3E）。 开发者可快速切换模型，无需重写业务逻辑。 提示词管理（Prompts） 提供 PromptTemplate 和 FewShotPromptTemplate 等工具，支持动态生成高质量提示词，优化模型输出效果。 数据检索增强（Retrieval-Augmented Generation, RAG） 支持本地/云端知识库构建： 文档加载 → 文本分割 → 向量化 → 存储至向量数据库（如 FAISS、Milvus） 用户提问时，自动检索相关知识片段并注入 Prompt 上下文，提升回答准确性。 代理与工具链（Agents &amp;amp; Tools） Agent 系统：让 LLM 自主调用工具处理复杂任务（如计算、搜索、API 调用）。 自定义工具：通过 @tool 装饰器将任意 Python 函数转化为工具（如查询数据库、生成图表）。 链式工作流（Chains）：组合多个步骤（如 LLMChain、LLMMathChain），实现多轮推理。 记忆管理（Memory）支持会话状态存储（如 ConversationBufferMemory），实现多轮对话的上下文连贯性。🚀 五、典型应用场景| 场景 | 案例 | 技术实现 ||————————-|————————————————————————–|———————————————|| 智能问答知识库 | 企业文档助手、学术论文分析 | RAG + 本地向量库（如 LangChain-Chatchat） || 自动化决策代理 | 根据用户需求推荐商品、制定旅行计划 | Agent 调用工具链（如性别识别→商品推荐） || 代码生成与执行 | 动态编写并运行 Python 代码（如生成彩票号码） | PythonREPLTool 集成 || 多模态应用 | 结合 DALL·E 生成图片描述 + LangChain 调度 | 工具链调用多模态 API || 私有化企业助手 | 内部数据安全查询（如金融、政务场景） | 完全离线部署 + 中文优化模型（ChatGLM3） |⚙️ 六、技术架构与生态 分层架构 LangChain Core：基础抽象层（链、代理、记忆等核心逻辑）。 LangChain Community：第三方工具集成（如 Google 搜索、HuggingFace 模型）。 LangChain：应用层链与检索策略实现。 生产级工具 LangSmith：监控、调试与评估 LLM 应用性能。 LangServe：将链部署为 REST API。 LangGraph：构建多 Agent 协作系统。 跨语言支持 原生支持 Python 和 JavaScript，适配全栈开发需求。 🌟 七、代表项目：LangChain-Chatchat 定位：基于 LangChain 的中文优化知识库解决方案，支持完全本地化部署。 功能亮点： 集成主流中文模型（ChatGLM3、Qwen）和 Embedding 模型（BGE-large-zh）。 提供 WebUI 和 API 两种交互方式，支持文档上传与向量化存储。 部署灵活性： GPU 模式：需较高显存（如 ChatGLM3-6B 需 14GB）。 轻量模式（Lite）：无显卡要求，通过在线 API（如通义千问、智谱AI）运行。 💎 总结LangChain 的核心价值在于标准化 LLM 应用开发流程，开发者无需从零设计复杂架构，即可实现： 知识增强问答（RAG） 多工具协作代理（Agents） 企业级私有化部署其模块化设计大幅降低开发门槛，结合生态工具（如 LangSmith）可快速实现原型到生产的跨越。 快速体验：pip install langchain 并尝试 官方教程。 中文实践：部署 LangChain-Chatchat 构建本地知识库。 " }, { "title": "AI系列55:海鲜市场", "url": "/posts/ai-55/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-10 05:30:00 +0800", "snippet": "哈哈，就是闲鱼" }, { "title": "AI系列54:minimax", "url": "/posts/ai-54/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-09 05:30:00 +0800", "snippet": "大模型初创公司覆盖文本，语音，视觉三大模态旗下模型有 abab 6.5speech-02hailuo 02视频生成模型旗下还有agent产品" }, { "title": "AI系列53:硅基流动", "url": "/posts/ai-53/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-08 05:30:00 +0800", "snippet": "硅基流动（SiliconFlow）是一家专注于 AI 基础设施（AI Infra） 的创新型公司，致力于通过自研技术解决大模型算力调度与推理优化问题，其核心产品 SiliconCloud 已成为国内领先的大模型云服务平台之一：🧠 一、硅基流动的核心功能与技术亮点1. 全模型 API 服务 模型丰富度：支持 DeepSeek-R1/V3、通义千问 Qwen3、GLM-4、Yi 等 上百款主流开源大模型，覆盖文本、多模态、向量检索等场景。 长上下文支持：最高支持 128K tokens（如 Qwen3），DeepSeek-R1 支持 96K，适合代码生成、长文档分析等复杂任务。 灵活计费： DeepSeek-V3：输入 ¥1/百万 tokens，输出 ¥2/百万 tokens DeepSeek-R1：输入 ¥4/百万 tokens，输出 ¥16/百万 tokens。 2. 国产算力深度优化 基于 华为昇腾 910B 芯片，自研推理引擎 SiliconLLM，在昇腾云上实现： 单卡推理速度 1920 tokens/s，媲美 H100 部署性能； 模型精度与官方版本一致，通过大规模线上盲测验证。 3. 企业级私有化方案| 服务类型 | 适用场景 | 功能亮点 ||—————-|————————–|————————————————————————-|| 专属实例 | 高并发生产环境 | 提供 16 卡昇腾算力 + 满血版 DeepSeek，¥9 万/月/实例 || 私有 MaaS | 数据敏感型企业 | 支持本地部署，隔离环境运行模型，满足金融/医疗合规需求 || 算力纳管 | 已有算力资源整合 | 动态调度碎片化 GPU/昇腾卡，提升利用率 30%+ |4. 开发者友好设计 免费额度：新用户注册即送 2000 万 tokens（部分模型长期免费如 Qwen2.5-7B）； 独立控制链：可拆分设置 thinking_budget（思维链长度）与 max_tokens（回复长度），精细控制推理过程。🔥 二、为何硅基流动成为开发者首选？ 国产化标杆 首个在 昇腾国产芯片 上实现 DeepSeek-R1/V3 高性能部署的平台，打破英伟达生态依赖。 极致性价比 价格仅为 OpenAI GPT-4 Turbo 的 1/5，且免去美元支付与合规风险。 弹性扩缩容能力 应对流量峰值（如承接 DeepSeek 春节爆红流量），动态调度万卡级算力池。 🌐 三、同类产品推荐与对比 产品名称 所属厂商 核心优势 适用场景 价格对比（输入/百万 tokens） 硅基流动 独立创企 国产算力优化/模型覆盖最全 企业私有化+高频调用 DeepSeek-V3：¥1 百度智能云千帆 百度 文心生态整合/中文任务强化 政府/教育机构 ERNIE-4.0：¥15 阿里云 PAI 阿里巴巴 通义模型全家桶/无缝集成钉钉 钉钉用户/电商客服场景 Qwen-Max：¥12 Groq 海外 LPU 超低延迟推理（每秒 500+ tokens） 实时对话/游戏 AI Llama3-70B：$0.27（≈¥1.9） 秘塔 AI 独立创企 深度检索增强/长文本处理稳定 法律/科研文档分析 定制报价（约 ¥8-¥15） 💡 Groq 虽为海外产品，但因超低延迟特性成为实时场景补充方案；秘塔 AI 在中文长文本处理上表现优异。🚀 四、如何选型 追求国产化 &amp;amp; 高性价比 → 硅基流动（尤其适合调用 DeepSeek/通义等国产模型）； 需要超低延迟响应 → 搭配 Groq 用于 C 端实时交互场景； 企业数据隔离需求 → 硅基流动 私有 MaaS 或 华为云昇腾一体机； 钉钉/阿里生态用户 → 阿里云 PAI（工作流整合更便捷）。💎 总结硅基流动凭借 全国产算力适配能力、极致性价比 和 企业级私有方案，已成为国内大模型开发者的首选平台。它与 DeepSeek、华为云的深度合作，更推动了中国 AI 基础设施的自主化进程。对于中小开发者，可优先试用其免费额度；大型企业建议采购专属实例或一体机方案，兼顾性能和安全。" }, { "title": "AI系列52:AI PPT工具评测", "url": "/posts/ai-52/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-08 05:10:00 +0800", "snippet": "📊 一、核心工具横向对比（2025年最新版）| 工具名称 | 所属厂商 | 生成质量 | 核心优势 | 价格策略 | 适用人群 ||——————–|—————|————|————|————-|————|| 天工超级智能体 | 昆仑万维 | ⭐⭐⭐⭐⭐ | 深度研究能力全球第一，全自动规划步骤+可溯源数据图表 | 免费送7500积分（约75次PPT），付费91元/2万积分（单次约¥0.5） | 金融/咨询从业者、需深度报告的用户 || 通义AI PPT | 阿里巴巴 | ⭐⭐⭐⭐ | 钉钉深度集成，支持语音/文档多模态输入，模板商务感强 | 免费版功能受限，专业版¥599/年（含钉钉会员） | 企业用户、钉钉生态使用者 || 百度文库AI PPT | 百度 | ⭐⭐⭐⭐⭐ | 内容专业度顶级，配图准确率85%+，一键转演讲稿/思维导图 | 免费额度少，专业版¥600/年（含文库VIP） | 教师/培训师、内容严谨型用户 || 秒出PPT | 独立开发者 | ⭐⭐⭐⭐ | 文档转PPT效果最佳，支持左文右图实时编辑 | 高级版¥68/月（无限生成+高级模板） | 学生/职场新人、追求性价比 || iSlide AI | 艾斯莱德 | ⭐⭐⭐⭐ | 海量模板+企业VI定制，无缝对接PowerPoint | 基础版免费，企业定制¥3000+/年（按账号数） | 设计师/大型企业市场部 || 讯飞智文 | 科大讯飞 | ⭐⭐⭐⭐ | 长文本处理强，排版自动化程度高 | 基础功能免费，高级编辑¥399/年 | 科研人员/政策分析者 |🔍 二、功能细节深度评测1. 天工超级智能体（Skywork） 优势✅ 全自动任务拆解：生成前确认需求→列待办清单→分步执行→实时进度展示✅ 数据可溯源：点击引用标记查看信息来源，适合学术/商业报告✅ 多格式输出：支持.pptx/.pdf/.html（动态效果最佳） 缺陷❌ 生成时间较长（10-30分钟），页面偶现排版错位❌ 移动端适配弱，仅推荐桌面使用 场景实测：输入“生成新能源汽车电池技术发展报告”，自动补充产业链图谱+成本对比雷达图，专业度接近咨询公司出品。2. 通义AI PPT（钉钉版） 优势✅ 钉钉工作流融合：会议纪要直接转PPT，日程提醒嵌入幻灯片✅ 多模态输入：支持语音指令（如“第三页加特斯拉销量柱状图”） 缺陷❌ 模板风格偏商务，教育/创意场景适配弱❌ 非钉钉用户功能阉割严重 场景实测：上传Word项目计划书→10秒生成20页PPT，但图表需手动调整数据源。3. 百度文库AI PPT 优势✅ 12亿文档知识库：内容含金量高，常引用行业白皮书数据✅ 演讲助手：自动生成逐字稿并标注语气停顿点 缺陷❌ 免费模板稀缺，90%需会员解锁❌ 企业VI定制能力弱于iSlide 场景实测：输入“先秦土地制度变迁”，生成带井田制示意图的课件，教师可直接使用。💰 三、价格与成本对比| 工具 | 免费额度 | 付费方案 | 性价比推荐 ||——————|———————|———————————-|————–|| 天工超级智能体 | ✅ 7500积分（≈75次） | 91元/2万积分 + 企业API按量计费 | 高频用户首选 || 通义AI PPT | ⚠️ 基础编辑功能 | ¥599/年（含钉钉会员） | 钉钉生态必选 || 百度文库AI PPT | ⚠️ 3次生成体验 | ¥600/年（无限生成+文库VIP） | 内容质量优先 || 秒出PPT | ✅ 每日2次生成 | ¥68/月（高级模板+文档解析） | 学生党友好 || iSlide AI | ✅ 基础模板库 | ¥3000+/年（企业VI定制） | 品牌方刚需 | 💡 成本提示：天工按使用量付费，适合低频深度报告；百度/通义年费制适合高频刚需用户。🎯 四、选型建议：按需求精准匹配 追求极致内容深度→ 选 天工超级智能体（学术/金融场景首选，数据溯源是刚需） 企业标准化输出→ 选 通义AI PPT+钉钉 或 iSlide（钉钉协同/VI统一） 教育/培训课件制作→ 选 百度文库（知识库扎实+演讲助手） 学生/个人轻量使用→ 选 秒出PPT（文档转换神器+低价订阅）⚠️ 五、行业通病与避坑指南 图文相关性不足所有工具配图准确率均低于85%，需手动替换（如天工生成“春秋战图”配了现代办公室图）。 格式错位风险复杂排版转PPT时易出现文字重叠，建议优先导出PDF或HTML。 企业隐私顾虑敏感内容避免用云端工具（如财报数据），可选iSlide本地部署版。💎 总结 天工超级智能体：赢在深度研究与全流程透明化，适合拒接“黑箱PPT”的专业人士。 通义AI PPT：胜在钉钉生态融合，会议-PPT-协作闭环效率无敌。 百度文库：内容严谨性至今无竞品能敌，适合“一字不改直接交差”的场景。 📌 行动建议：先试用天工免费积分做深度报告，日常用秒出PPT+百度文库组合，企业用户直接上通义+iSlide双保险。" }, { "title": "AI系列51:开源AI对话软件推荐", "url": "/posts/ai-51/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-07 05:10:00 +0800", "snippet": "🏆 开源 AI 对话软件 Top 6 对比| 项目名 | GitHub 星标 | 开发语言 | 核心功能亮点 | 适用场景 ||——————|—————–|———————-|——————————————————————————–|——————————–|| Lobe Chat | 54.8K+ | TypeScript (Next.js) | 多模型支持（GPT/Claude/Gemini/Ollama）、插件市场、视觉识别、TTS/STT 语音对话 | 企业级多模型管理、插件扩展开发 || GPT4All | 66.7K+ | Python + C++ | 纯本地运行、低资源需求（CPU 即可）、跨平台客户端、支持 GGUF 量化模型 | 隐私敏感场景、离线环境部署 || Open WebUI | 25K+ | TypeScript + Python | 深度集成 Ollama、RAG 知识库、类 ChatGPT UI、动态资源加载 | 本地模型调试、私有知识库问答 || LocalGPT | 19.5K+ | Python | 100% 离线文档问答、支持 PDF/Word 解析、多格式嵌入索引 | 法律/医疗文档分析、机密数据处理 || LibreChat | 6.8K+ | JavaScript (MERN) | 多 API 端点切换（OpenAI/Azure/Anthropic）、跨设备同步、角色扮演模板 | 多服务商 API 测试、个性化聊天代理 || Anything LLM | 12K+ | JavaScript | 企业级知识库协作、多用户权限控制、PPT/Excel 解析 | 团队知识管理、内部问答系统 |🔍 详细解析1. Lobe Chat - 功能最全面的开源聊天框架 语言：TypeScript (Next.js 前端 + Node.js 后端) 优势： 支持 20+ 云端/本地模型（Gemini/Claude/DeepSeek/Ollama） 提供 插件系统（联网搜索、代码执行）和 助手市场（共享 GPTs） 多模态交互：视觉识别（GPT-4V）、文生图（DALL·E 3）、语音对话（TTS/STT） 部署：Docker 一键启动，支持 PWA 渐进式应用2. GPT4All - 本地运行标杆 语言：Python（客户端） + C++（底层推理，基于 llama.cpp） 优势： 零依赖云服务：3–8GB 模型文件本地运行，支持消费级 CPU/GPU 跨平台客户端：提供 Windows/macOS/Linux 桌面应用 扩展性：支持 LocalDocs 插件（私密文档问答） 3. Open WebUI - Ollama 生态首选 语言：TypeScript（前端） + Python（API 服务） 优势： 深度优化 Ollama 本地模型管理（如 Llama3、DeepSeek-R1） 内置 RAG 知识库，支持文件上传与向量检索 低内存占用（＜500MB Docker 镜像） 4. LocalGPT - 文档隐私保护专家 语言：Python（LangChain + Hugging Face） 优势： 端到端加密处理：数据永不离开设备 双 GUI 选项：Streamlit 独立界面或 API 集成 支持 CUDA/CPU/MPS，适配低资源设备 5. Anything LLM - 企业知识库引擎 语言：JavaScript（Electron 桌面端 + React 前端） 优势： 多用户协同：角色权限控制、审计日志 支持 本地数据库（SQLite）或 远程数据库（PostgreSQL） 💎 选型建议 需要云端+本地混合模型 → 选 Lobe Chat（生态最完善） 纯本地运行 &amp;amp; 低配置设备 → 选 GPT4All（零依赖 + CPU 优化） 企业知识库建设 → 选 Anything LLM（权限管理 + 多格式解析） Ollama 本地模型调试 → 选 Open WebUI（轻量且专注）" }, { "title": "AI系列50:chatbox", "url": "/posts/ai-50/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-06 05:10:00 +0800", "snippet": "8Chatbox 是一款跨平台的开源 AI 桌面客户端，定位为“连接多种大语言模型的智能对话工具”，支持 Windows、macOS、Linux、Android、iOS 及网页端。以下是其核心特点及同类开源替代品的推荐：🧠 一、Chatbox 的核心定位与功能 多模型支持 兼容主流闭源/开源模型：OpenAI GPT 系列、Claude、Gemini、DeepSeek-R1 等，用户可自由切换模型应对不同任务。 隐私与本地化 所有对话记录、文件均存储在本地设备，避免云端数据泄露，支持离线访问历史数据。 多模态交互 支持文档解析（PDF/Word/Excel）、代码生成与审查、实时联网搜索、AI 绘图（集成 DALL·E 3）、LaTeX/Markdown 渲染。 开发者友好 提供语法高亮、代码调试、自定义 API 集成（如硅基流动、火山引擎），适合编程辅助。 跨平台同步 桌面端与移动端数据无缝同步，覆盖全场景使用需求。 🔍 开源状态：完全开源（GitHub 星标 21.7K+），采用 MIT 协议，开发者可自由修改代码。🌟 二、同类开源替代推荐（按热度与功能排序）✅ 1. LibreChat 热度：GitHub 星标 6.8K+，企业级首选。 核心优势： 支持 多用户系统 &amp;amp; 跨设备同步，适合团队协作； 集成 文档解析/RAG，可直接上传文件问答； 更新快，主流模型（如 Claude 4、Gemini 2.5）几乎实时适配。 适用场景：企业内网部署、需权限管理的重度使用环境。✅ 2. NextChat（原 ChatGPT-Next-Web） 热度：GitHub 星标 54K+，轻量级顶流。 核心优势： 纯前端架构，5 分钟部署至 Vercel，零服务器成本； 内置 Prompt 模板库（“面具”功能），快速切换任务场景； 支持密码/API Key 访问控制。 局限：无用户系统，数据仅存本地，不支持文件解析。 适用场景：个人或小团队快速搭建 ChatGPT 式界面。✅ 3. Open WebUI（原 Ollama WebUI） 热度：GitHub 星标 25K+，本地模型专属。 核心优势： 深度集成 Ollama，管理本地 LLM（如 Llama3、DeepSeek-R1）； 支持 RAG 知识库，上传文档构建私有问答系统； 界面接近 ChatGPT，用户体验流畅。 适用场景：追求纯本地运行、隐私敏感型用户。✅ 4. Anything LLM 热度：GitHub 星标 12K+，知识库增强代表。 核心优势： 专注企业级知识管理，支持 PPT/Excel 等多格式文档解析； 提供 多用户协作 + 权限控制，适合内部知识库搭建。 适用场景：法律、医疗等需私有化部署的专业领域。✅ 5. LocalGPT 热度：GitHub 星标 19.5K+，隐私优先。 核心优势： 100% 离线运行（CPU/GPU 支持），数据不出设备； 专注 PDF/Word 内容解析，适合机密文件处理。 适用场景：法律合同分析、医疗记录查询等隐私敏感场景。🔍 三、关键对比表（Chatbox vs 开源替代）| 维度 | Chatbox | LibreChat | NextChat | Open WebUI | Anything LLM ||——————|——————|—————–|—————–|—————–|—————–|| GitHub 星标 | 21.7K+ | 6.8K+ | 54K+ | 25K+ | 12K+ || 多模型支持 | ✅ 完善 | ✅ 完善 | ✅ 完善 | ⚠️ 依赖 Ollama | ✅ 完善 || 文件解析 | ✅ PDF/Word/代码 | ✅ 支持 | ❌ 不支持 | ✅ RAG 知识库 | ✅ 多格式 || 数据同步 | ✅ 全平台同步 | ✅ 跨设备同步 | ❌ 仅本地缓存 | ❌ 仅本地 | ✅ 服务端存储 || 部署复杂度 | 低（桌面客户端） | 高（需服务器） | 极低（Vercel） | 中（容器部署） | 高（Docker） || 隐私保护 | ✅ 本地存储 | ⚠️ 服务端存储 | ⚠️ 浏览器缓存 | ✅ 纯本地 | ✅ 可私有化 |💎 四、选型建议 追求功能全面 &amp;amp; 隐私 → 选 Chatbox（本地存储 + 多模态）。 团队协作 &amp;amp; 企业级部署 → 选 LibreChat（权限管理 + 文档解析）。 个人快速搭建 &amp;amp; 零成本 → 选 NextChat（Vercel 一键部署）。 纯本地模型运行 → 选 Open WebUI（Ollama 深度集成）。 企业知识库构建 → 选 Anything LLM（多格式文档支持）。 💡 提示：若需调用 DeepSeek 等国内模型，可通过 Chatbox 配置火山引擎/硅基流动 API，避开官方限流问题。" }, { "title": "AI系列49:类似即梦，可灵的开源软件", "url": "/posts/ai-49/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-05 05:10:00 +0800", "snippet": "如果你正在寻找类似“即梦”（字节跳动旗下）和“可灵”（快手旗下）这类AI创作工具的开源替代品，希望实现本地部署、自由定制或二次开发，目前已有多个高质量项目在视频生成、图像编辑和多模态创作方面表现出色。以下按核心功能分类推荐：🎬 一、视频生成类（对标可灵AI） SkyReels（昆仑万维开源） 核心功能：支持文生视频（T2V）和图生视频（I2V），分辨率544×960，帧率24fps，最长97帧（约4秒）。 技术亮点： 基于好莱坞级影视数据训练，生成画面具电影级光影与构图； 动态处理能力强，支持多物体复杂运动。 开源地址：GitHub - SkyReels 适用场景：短视频创作、影视预演、广告素材生成。 CogVideoX（智谱AI开源） 版本迭代： V1.5：支持768P分辨率、10秒视频生成，结合CogSound音效模型可输出4K视频； V2.0：参数规模升级至50亿，支持本地单卡（如RTX 3060 12GB）运行。 优势：开源协议友好（Apache 2.0），支持商业二次开发。 开源地址：GitHub - CogVideoX 清华开源CogVideoX-5B 轻量整合包显存要求仅11.4GB，适合个人开发者快速部署； 支持智能插帧、超分增强，提升视频流畅度。 🖼️ 二、图像生成与编辑类（对标即梦AI） FLUX.1 Kontext（BlackForestLabs） 功能特性： 精准编辑：局部重绘、文字修改（如替换图中标语）、风格迁移（水彩↔素描）； 角色一致性：跨场景保持元素特征（如人物发型、服饰）。 技术架构：基于流匹配（Flow Matching），支持多轮迭代不丢失原始构图。 开源进度：开发者版即将开源，可提前试用在线Demo。 MistoLine（线条控制模型） 专攻艺术线条生成，适配手绘草图、设计线稿； 集成创新预处理算法Anyline，提升线条识别精度。 Ilus AI（插画生成器） 快速生成扁平化、涂鸦风插画，支持导出SVG/PNG； 允许用户自定义训练风格模型。 🤖 三、多模态创作工具 Moondream2（端侧视觉语言模型） 仅1.6亿参数，可在手机端运行，支持图像问答、OCR识别、物体计数； 适用轻量化应用：教育辅助、实时场景分析。 ControlMM（动作生成框架） 香港中文大学与腾讯联合开发，输入文本/语音/音乐生成全身动作； 突破多目标运动协调难题，适合虚拟偶像、游戏角色动画。 ⚖️ 四、选型建议| 需求场景 | 推荐工具 | 核心优势 ||——————–|———————–|—————————————–|| 长视频生成 | SkyReels | 电影级画质+物理模拟 || 快速原型验证 | CogVideoX-5B整合包 | 低显存需求+一键启动 || 精准图像编辑 | FLUX.1 Kontext | 局部修改不破坏原图+跨场景一致性 || 移动端集成 | Moondream2 | 超轻量+端侧运行 |💎 总结 视频生成：优先尝试 SkyReels（影视级质量）或 CogVideoX（生态完善）； 图像编辑：FLUX.1 Kontext 在细节保留上超越即梦，尤其适合商业设计； 二次开发：所有推荐项目均开源，可直接调用API或修改源码适配私有需求。" }, { "title": "游戏系列5:Flappy Bird", "url": "/posts/game-5/", "categories": "游戏系列", "tags": "游戏系列", "date": "2025-06-05 04:35:00 +0800", "snippet": "之前的Flappy Bird，是一个神烦又虐心的游戏，莫名其妙的就火了，最开始大家聚焦在“越南屌丝程序员，不迎娶白富美照样日入5万刀”，然后这哥们竟然受不了外界骚扰将游戏给下架了。大家议论纷纷，连任天堂都被迫做出回应，我们只能感叹大千世界无奇不有了。有人想这样一个游戏到底开发难度多大，于是做出了一个“飞扬的方块”，游戏机制和FlappyBird一模一样，也算是向前辈致敬。开发者已经将代码公开在github上， 如果感兴趣，你甚至可以开发出自己的FlappyBird。https://github.com/joeblau/FlappyBlock开发者在源码的介绍里说：这是一个使用iOS7物理引擎的简单游戏，模仿iOS上非常火爆的Flappy Bird。当Dong Nguyen将游戏下架，我想看看真正开发一个这样的游戏有多大的难度，于是进行了开发。这是无慈悲的游戏，当你失败的时候必须退出游戏重新开始，在本来就很恼人的基础上堪称神烦，本源码是为学习iOS7物理引擎的练手之作，祝好运和游戏愉快。这个是采用iOS7物理引擎开发的，采用其他的引擎，在Android上开发的难度又如何呢？有兴趣的开发者不妨尝试一下。🎮 一、经典替代品：直接复刻或微调玩法 《Splashy Fish》 特点：海底主题，操作与Flappy Bird几乎一致，障碍物为管道（替换为珊瑚），加入装饰性道具。 优势：最接近原版体验，适合怀旧玩家。 《Ironpants》 创新点：主角变为超级英雄，障碍物改为快速移动的木箱，操作改为“长按上升/松开下降”，难度更高。 《长翅膀的钱》(MoneyBird) 特色：主角是一枚飞行的硬币，障碍物为伸缩的手臂。硬币会随飞行距离进化（面值增大、翅膀变形），增加成长感。 ✨ 二、创意变种：机制融合与玩法革新 复合玩法杂交 《Flappy48》： 核心创新：结合Flappy Bird的操控与2048的合成逻辑。玩家操控数字方块链飞行，碰撞相同数字可合并升级，需同时避开障碍并规划数字合成路径。 策略深度：方块链长度影响飞行惯性，需权衡“保留高数字”与“减轻重量”。 《像素环》： 机制：竖版飞行，玩家控制小球穿过旋转的彩色圆环，仅能通过与自身颜色相同的区域。触碰变色球可切换颜色，后期加入护盾、炸弹等道具。 难度强化：判定严格，双色交界处触碰即失败，考验精准操作。 操作模式创新 《致命赛车》(Wrong Way Racing)： 设计：将飞行改为环形赛道竞速，玩家切换内外圈避开AI车辆。极简像素风+高速移动，难度媲美Flappy Bird。 《飞行的小怪物》： 新增能力：左侧点击控制飞行高度，右侧点击触发冲刺，可瞬间穿越狭窄障碍，降低容错门槛。 主题与目标重构 《RETRY》（Rovio发行）： 设定：操控螺旋桨飞机穿越复杂地形，物理引擎模拟机身晃动，坠毁动画增强挫败感。 《Flappy Plane》： 差异化：横屏界面，提供简单/困难双模式，障碍物间距更大，适合新手入门。 📈 三、改进方向：增强可玩性与社交性 动态难度与个性化 自适应障碍：根据玩家历史成绩调整管道间距或移动速度（如《Flappy48》的随机障碍高度）。 角色进化：仿照《长翅膀的钱》，飞行距离解锁新外观或技能（如短暂无敌）。 排名与社交系统 按距离排名： 全球实时排行榜显示最远飞行距离，分段位勋章（青铜→王者）。 好友挑战：每周发布定向任务（如“穿越10个红色管道”），比拼任务积分。 直播集成：允许玩家录制“高光时刻”（如极限穿缝），分享至社交平台。 道具与模式扩展 策略道具： 护盾：抵御1次碰撞（《像素环》已实现）。 磁铁：自动吸引路径上的分数结晶。 多人竞技： 实时对战：4名玩家同屏飞行，干扰对手（如临时缩小对方屏幕）。 接力模式：团队累计飞行距离，成员交替操控。 💎 四、设计要点总结 保留核心体验：单指操作、即时失败、极简画风是“类Flappy”游戏的灵魂。 创新平衡：机制融合（如合成、变色）需避免过度复杂化，确保“易上手难精通”。 数据驱动：通过玩家失败统计优化障碍生成算法，维持挑战性。 💡 开发者可基于Unity快速原型化（参考的代码框架），重点测试物理手感与障碍随机性。同时利用“虐心-成就感”循环（如《Flappy48》的无尽合成目标）提升留存。" }, { "title": "AI系列48:即梦", "url": "/posts/ai-48/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-04 05:10:00 +0800", "snippet": "即梦（Dreamina）是字节跳动旗下剪映团队推出的一站式AI创意创作平台，定位于通过AI技术降低设计门槛，让普通用户和专业创作者都能高效生成高质量的图像与视频内容。以下是其核心特性及定位的详细解析：🎨 一、核心功能 AI图像生成 文生图/图生图：输入文本描述或上传参考图，生成海报、插画等多样风格作品，支持精准控制文字排版（如字体、颜色）。 智能画布：提供多图层编辑、局部重绘、AI扩图、消除水印等功能，实现多元素无缝拼接。 中文生成突破：国内首个支持高准确率中文文字生成的AI工具，用户用引号标注文字即可嵌入图像，解决行业“鬼画符”痛点。 AI视频生成 多模式生成： 文生视频：通过提示词生成动态视频（最长12秒），支持复杂镜头切换与运镜控制（如推拉、环绕）。 图生视频：上传静态图生成动态视频，S2.0 Pro模型保持首帧一致性，P2.0 Pro模型实现多镜头流畅切换。 情感与动作刻画：支持细腻情绪表达（如“哭中带笑”）及复杂连续动作（如舞蹈、打斗）。 创意工具扩展 故事创作：一站式生成剧本、分镜及剪辑，适合影视专业场景。 对口型功能：结合音色库生成角色配音视频，如林黛玉吐槽梗。 3D生成模型（新增）：与火山引擎数字孪生平台结合，实现2D转3D场景仿真，探索“物理世界模拟器”。 ⚙️ 二、技术亮点 中文场景深度优化 针对中文设计需求，在字体生成、排版审美上远超国际竞品，被誉“中文AI绘图里程碑”。 支持成语、古风词汇理解，例如生成“山海经烛龙”等传统文化意象。 DiT架构赋能视频生成 采用自研Dynamic Integration Transformer架构，替代传统U-Net，支持更长时长（5-12秒）及复杂动态效果。 实现“头发丝级”细节保留，主体换背景/加元素时保持纹理光泽。 低成本普惠模式 免费额度：每日登录赠送60积分（可生成60张图或12个视频），大幅降低创作门槛。 会员订阅：基础会员79元/月，提供505积分，支持商业级高频使用。 🌐 三、应用场景| 领域 | 典型案例 ||—————-|—————————————————————————–|| 电商营销 | 一键生成商品海报、促销封面（如赛博朋克风“AI大模型工场”海报） || 短视频创作 | 为抖音视频配动态封面，或生成多镜头故事片段（如小熊挥烟花写祝福） || 个人娱乐 | 定制头像、歌词海报、节日贺图（如“圣诞老人开饺子馆”） || 专业影视 | 支持科幻短剧《三星堆：未来启示录》制作，提供分镜生成与补帧能力 |🚀 四、产品定位与生态 用户定位：从“零基础小白”到专业设计师全覆盖，主打“想象力相机”概念。 生态整合： 内嵌创意社区，用户可分享提示词模板、参与挑战赛。 与剪映协同，形成“AI生成+专业剪辑”工作流，缩短视频制作周期50%以上。 行业对标： 对比Sora：更侧重中文场景与实用落地，但视频时长（12秒 vs 60秒）和物理模拟弱于OpenAI。 对比可灵（Kling）：即梦强于设计类生成，可灵长于长视频叙事。 💎 总结即梦是字节跳动在AIGC赛道的关键布局，以“零门槛设计+影视级生成” 为核心，通过中文优化、低成本积分和生态协同，成为本土化创意生产的标杆工具。其技术突破在于中文文字生成、视频多镜头控制及3D仿真，未来或进一步整合抖音生态，推动全民创意普惠。" }, { "title": "游戏系列4:热门小游戏盘点", "url": "/posts/game-4/", "categories": "游戏系列", "tags": "游戏系列", "date": "2025-06-04 04:35:00 +0800", "snippet": "微信微信小游戏自2018年兴起跳一跳：长按蓄力控制小人跳跃方块头脑王者 ：知识竞赛模式欢乐斗地主海盗来了 ：建造岛屿、转盘抽奖获取炮弹攻击他人岛屿动物餐厅 ：玩家经营动物餐厅，招待动物客人赚取小鱼干，不断解锁装饰和菜谱羊了个羊抖音抖音于2019年起布局小游戏抓大鹅：与“羊了个羊”玩法类似躺平发育（猛鬼宿舍）：玩家扮演宿舍学生放置炮台抵御夜晚猛鬼攻击，坚持到天亮即胜利救救狗狗 ：需要在屏幕上画线保护小狗不被蜜蜂蜇到超级收纳馆三国哈哈哈 黑洞大作战支付宝蚂蚁森林 蚂蚁庄园快手连连看 老铁斗兽棋 快手消砖块 快手摇 ：通过摇动手机与他人比拼摇动速度，在限定时间内摇动次数多者获胜战机代号666小红书打卡活动QQ腾讯欢乐斗地主欢乐麻将全集小小三国志：收集武将自动推图闯关，养成武将提升战力斗罗大陆H5超级精灵球猛鬼宿舍 钢琴块2Facebook Instant Games2016年末推出Instant Games（即时游戏）平台EverWing垂直卷轴射击游戏8 Ball Pool (即时版)：桌球对战Words With Friends (即时版)：拼字对战游戏UNO (即时版) 卡牌游戏是不是可以搞些知识类小游戏？古诗游戏？AI答题？学财务？用户可以出题？详细介绍如下：微信小游戏平台游戏名称 上线时间 玩法简介 流行时期 原创/改编 玩家人群特点跳一跳 2017年底 休闲跳跃闯关游戏，长按蓄力控制小人跳跃方块，玩法简单魔性 2018年初春节期间刷屏朋友圈 ￼ 原创 微信官方推出的小游戏，几乎全民参与，各年龄层用户以轻度休闲玩家为主 ￼（朋友间竞相比拼分数）头脑王者 2018年初 在线答题对战游戏，好友实时PK答选择题，知识竞赛模式 2018年1月爆红（DAU据传高达4000万封顶） ￼；后因题库违规于2018年2月下架 原创 年轻人居多，喜爱知识问答的玩家聚集，社交传播广泛，“朋友圈问候语”一度变成“你今天夺王者了吗” ￼欢乐斗地主（小程序版） 2018年 经典三人扑克牌对战，癞子玩法，支持好友房 2018年起长期稳居小游戏榜首 ￼；春节等节假日活跃度更高 改编自传统扑克牌游戏 各年龄段用户广泛喜爱，社交棋牌游戏氛围浓厚，很多中老年用户也通过微信一起约局海盗来了 2018年 模拟经营+社交对战小游戏，建造岛屿、转盘抽奖获取炮弹攻击他人岛屿 2018年迅速走红，月活跃用户超千万 ￼ 原创（玩法借鉴Pirate Kings类休闲游戏） 社交黏性强，好友互动频繁。白领和学生群体喜欢利用碎片时间互相“偷袭”，女性玩家比例也较高动物餐厅 2019年 可爱风放置经营游戏，玩家经营动物餐厅，招待动物客人赚取小鱼干，不断解锁装饰和菜谱 2019年下半年爆火，微信优选推广后日活超500万，上线33天营收破千万人民币 ￼ 原创 年轻女性为主的大众玩家，因萌系画风和轻松挂机玩法而长线留存，休闲养成爱好者居多羊了个羊 2022年 三消闯关解谜游戏，连续消除三个相同图案方块通关，但第二关极其困难，通关率极低引发话题 2022年9月现象级爆款，朋友圈大量分享通关截图和攻略 ￼ 原创 社交网络年轻用户为主，大量玩家被高难度挑战吸引参与，“通关”成就感和话题性促使各圈层用户尝试简评：微信小游戏自2018年兴起，依托微信庞大社交生态诞生了诸多全民爆款。从微信官方策划的“跳一跳” ￼到第三方开发者打造的“头脑王者”、“动物餐厅”等，都曾在各自细分玩法上引发热潮。微信小游戏以“即点即玩”著称，传播上借助微信群和朋友圈的社交链裂变，短时间内获取海量用户。然而由于轻度休闲特性，大多生命周期较短，新爆款层出不穷。总体来看，微信小游戏用户覆盖老中青各年龄层，玩法以休闲益智和社交对战为主，既有完全原创创意，也包含如斗地主这类传统游戏的微创新移植。抖音小游戏平台游戏名称 上线时间 玩法简介 流行时期 原创/改编 玩家人群特点抓大鹅 2022年底-2023年 三消闯关游戏，与“羊了个羊”玩法类似，点击三个相同元素进行消除通关，主角元素换成大白鹅 2023年初在抖音爆红，长期霸占抖音小游戏人气榜榜首 ￼ 原创（借鉴热门玩法） 抖音海量用户广泛参与的消除类游戏，玩法简单上瘾，各年龄段均有涉猎，因挑战性强和话题性获得现象级传播躺平发育（猛鬼宿舍） 2021年 恐怖塔防生存游戏，玩家扮演宿舍学生放置炮台抵御夜晚猛鬼攻击，坚持到天亮即胜利 2021年中在抖音上走红，衍生大量主播挑战视频，玩法梗流行；此后改编版“猛鬼宿舍”在各平台持续有人气 ￼ 原创 年轻玩家群体居多（高中生、大学生），喜欢惊险刺激又带策略的玩法。通过抖音短视频挑战赛等形式传播，吸引大量好奇玩家尝试救救狗狗 2022年 益智绘画闯关小游戏，需要在屏幕上画线保护小狗不被蜜蜂蜇到，类似趣味脑洞游戏 2022年因广告魔性传播在抖音上流行一时，各类“XX救狗”小游戏层出不穷 原创（源自网络趣味谜题） 休闲玩家为主，题材搞怪吸引了不少青少年和上班族，通过抖音短视频和广告洗脑式传播获取用户，玩家以喜欢休闲搞笑内容者为主超级收纳馆 2022年 模拟物品收纳整理的解谜小游戏，玩家需在限定空间内将各种物品分类摆放整齐 2022年下半年随“收纳整理”题材走红抖音，相关话题浏览量激增 原创 女性玩家占比较高，喜欢治愈系和强迫症舒适感的用户群。玩法节奏舒缓，满足玩家收纳整理的成就感，在抖音生活类内容带动下传播三国哈哈哈 2022年 脑洞搞怪解谜游戏，将三国历史人物和情节融入各种搞笑关卡，需要玩家发挥联想解谜 2022年在抖音小游戏平台上获得大量关注，作为文字谜题类爆款之一 改编（历史题材搞笑演绎） 三国内涵梗吸引了熟悉历史的80、90后玩家，通过诙谐画风也吸引年轻用户。玩家多为喜欢历史段子和烧脑谜题的群体黑洞大作战 2018年 休闲对战手游移植，操控黑洞在城市中移动吞噬物体，不断变大，与其他玩家竞技比拼 2018年前后曾风靡各大短视频平台的H5小游戏，在抖音上也有众多用户尝试玩吞噬比赛 改编自同名手游（Hole.io玩法） 喜爱快节奏竞技的玩家，男性居多。玩法简单爽快，在短视频平台通过真人解说和挑战赛流行，玩家以学生和年轻白领为主简评：抖音于2019年起布局小游戏，凭借其强大的内容分发能力，催生了一批爆款轻游戏。“羊了个羊”就是借助抖音达人话题在全网爆红的案例，而抖音平台自身也涌现出如“抓大鹅”这类接棒之作 ￼。抖音小游戏偏重魔性洗脑和脑洞创意，“躺平发育”将恐怖元素与塔防融合、“救救狗狗”以魔性画线解谜取胜，契合短视频用户碎片化娱乐的需求。这些游戏用户以年轻群体为主，通过抖音短视频的病毒式传播在全网走红。但抖音小游戏生命周期普遍较短，话题热度下降后玩家很快转移，下一个爆款往往迅速崛起，平台流行趋势更替极快。支付宝小游戏平台游戏名称 上线时间 玩法简介 流行时期 原创/改编 玩家人群特点蚂蚁森林 2016年8月 ￼ 低碳生活公益养成游戏，记录用户步行、缴费等低碳行为获取能量，积攒能量培养虚拟树，能量达到一定值可在荒漠种下一棵真树 2016-2018年迅速普及，累积超过5亿用户参与种树，成为国民级公益游戏，后持续运营至今 ￼ 原创 支付宝用户中的各类群体都有参与，白领和高校学生尤甚。以公益为核心，用户在娱乐中践行环保，好友间互偷能量互动频繁，形成了早起收能量的独特社交景象蚂蚁庄园 2017年8月 ￼ ￼ 爱心公益小游戏，用户领养一只小鸡，通过每日支付宝消费、答题等获得饲料喂养，小鸡产蛋可用于公益捐赠 2017-2019年广受欢迎，成为继蚂蚁森林后支付宝另一现象级互动；此后以每天问答赠饲料形式长期陪伴用户 原创 支付宝广大用户群参与度高，尤其是年轻女性和家庭主妇等喜爱养成玩法的人群。用户每天坚持答题喂鸡，既满足了游戏乐趣又参与公益，形成良性循环简评：支付宝平台的小游戏带有浓厚的公益和生活服务色彩，与纯娱乐导向不同。“蚂蚁森林”开创了通过游戏化形式大规模动员用户实践公益的先河，上线首月即风靡社交网络 ￼；“蚂蚁庄园”则将偷能量的玩法延伸到“偷饲料养小鸡”，进一步强化用户的日常黏性 ￼ ￼。这两款原创小游戏主打善意与互动，用户覆盖各年龄层支付宝用户，既有高校学生也有上班族和长辈，在获得娱乐满足的同时产生社会正向价值。这种将小游戏融入金融App的模式，使支付宝小游戏具有独特的用户群体特点：重视公益、乐于分享，并将娱乐融入日常生活应用中。快手小游戏平台游戏名称 上线时间 玩法简介 流行时期 原创/改编 玩家人群特点连连看 2018年4月 ￼ ￼ 经典休闲配对消除游戏，连接两张相同图案的牌消除，一次性清空全部牌即过关 2018年快手小游戏App上线时作为首发游戏之一，因玩法基础广为人知，上线初期有不少用户尝试 改编自经典Flash小游戏 各年龄段基础玩家都有涉猎，尤其是熟悉早年QQ游戏的80后、90后用户，利用碎片时间在快手App中轻松消遣老铁斗兽棋 2018年 中国传统棋类小游戏，以“斗兽棋”规则（大小不同的动物棋子相互搏斗）为基础，可与好友实时对战 2018年上线后获得一些关注，在喜欢棋类对战的快手用户中保持一定人气 改编自传统桌游 棋类爱好者，小部分资深玩家。快手用户中偏男性、年纪稍长的一群人对此类怀旧棋戏感兴趣，通过小游戏与好友切磋快手消砖块 2018年 益智消除游戏，玩法类似经典打砖块或消消乐，通过发射小球消除屏幕上砖块方阵 2018年随快手小游戏平台推出而上线，作为休闲小游戏稳定地吸引了一批消除游戏爱好者 原创（致敬经典打砖块） 喜欢消除和物理弹射玩法的玩家，女性居多也有部分男性玩家，年龄以青少年为主。这类玩家利用快手刷视频间隙点开游戏放松快手摇 2018年 趣味对战游戏，玩家通过摇动手机与他人比拼摇动速度，在限定时间内摇动次数多者获胜 2018年快手小游戏初期用于直播互动和好友对战，引发过主播与粉丝连麦PK摇手机的风潮 原创 年轻用户为主，偏重参与快手直播的活跃群体。游戏带有明显的社交互动性质，玩家大多是快手重度用户，乐于尝试新奇玩法在圈子中寻求存在感战机代号666 2021年 垂直卷轴射击游戏，操控战机射击敌机和Boss，可收集随机技能（Roguelike要素）提升战力 2021年上线，依托微信等平台广告投放获取用户，小游戏版年流水突破8000万人民币 ￼ 原创 喜爱弹幕射击和升级养成的中青年男性玩家为主。由于游戏品质较高、玩法偏中度，在快手等平台聚拢了一批忠实度较高的玩家，也通过主播推荐吸引不少手游玩家注意简评：快手早在2018年就推出了独立的“快手小游戏”APP，内含多款休闲对战游戏 ￼。首发的游戏多为经典玩法的复刻，如连连看、斗兽棋等，旨在快速降低用户上手门槛。这些小游戏迎合了快手用户下沉市场、喜好轻松社交的特点，例如“快手摇”通过直播PK形式增强互动趣味。然而，相较于微信，快手小游戏在早期并未出现现象级全国爆款，用户群体主要局限于快手生态内部。2021年前后，快手开始通过投资研发更高品质的小游戏，如飞行射击类的“战机代号666”，并借助微信小游戏平台的流量取得了不俗成绩 ￼。总体而言，快手小游戏的受众以忠实快手用户为主，偏好轻度竞技和互动，对游戏品质要求相对不高，但在快手加码游戏业务后，平台内容逐渐丰富，开始吸引更多元的玩家群体。小红书小游戏平台小红书于近年开始试水小程序和小游戏领域，但尚未出现具有广泛影响力的小游戏作品。相比其他平台，小红书更侧重于内容社区和生活方式分享，小游戏主要用于增强站内互动，例如偶尔推出的H5互动打卡活动或简单测试类游戏，多作为运营活动的一部分，并未形成独立的小游戏生态。因此，在小红书平台暂时缺乏知名的原创或改编小游戏可以列举。(注：小红书月活用户中有相当比例的游戏兴趣用户，但他们更多通过笔记安利和交流主流手游/主机游戏 ￼；小红书自身的小游戏功能还在起步探索阶段，未能产生如微信或抖音那样的爆款小游戏。)QQ小游戏平台游戏名称 上线时间 玩法简介 流行时期 原创/改编 玩家人群特点腾讯欢乐斗地主 2018年 腾讯将经典斗地主卡牌游戏移植QQ小程序，支持好友房和排行榜竞技 2018年至今长期稳居QQ小游戏热玩榜首位 ￼，是假日和闲暇时段最受欢迎的小游戏之一 改编自传统扑克牌玩法 QQ用户群中各年龄段都有庞大玩家基础，尤其年轻人和中年用户喜欢在聊天之余切磋牌技，游戏社交性强，许多玩家通过QQ好友互相约局欢乐麻将全集 2018年 经典麻将游戏小程序版，包含国标等多种麻将玩法，可与QQ好友即时对战 2018年上线后稳居热门，多年来在QQ小游戏平台保持高人气 ￼ 改编自传统麻将游戏 主要面向成年用户，特别是熟悉麻将的玩家（白领和中老年居多）。不少家庭成员和同学朋友通过QQ一起打麻将，具有很强的社交属性小小三国志 2019年 放置挂机类策略RPG，以三国历史为背景，收集武将自动推图闯关，养成武将提升战力 2019年上线QQ小游戏中心即登上热门榜第一 ￼；通过QQ推荐位获得大量年轻用户 改编自历史题材（三国） QQ平台年轻用户喜爱的三国题材游戏。玩家多为90后、00后男性，熟悉三国文化，对挂机养成乐此不疲。在QQ聊天场景中，这类游戏成为好友间比较进度的话题斗罗大陆H5 2019年 根据热门同名玄幻小说改编的放置手游，玩家扮演原著角色体验小说剧情，收集魂环和武魂提升实力 2018年前作为QQ空间H5游戏已热门，2019年接入QQ小游戏后依然稳居前十 ￼ 改编自知名小说IP 原著小说及动画粉丝是主力玩家，QQ上大量95后、00后用户对网文IP改编游戏兴趣浓厚 ￼。玩家代入感强，倾向于长期投入养成，与社区讨论原著情节相结合超级精灵球 2019年 类宝可梦养成战斗小游戏，收集养成各种精灵并进行回合战斗，画风Q版可爱 2019年上线一个多月即攀升至QQ小游戏热门榜第三名 ￼ 改编自经典动画形象元素（精灵宝可梦风格） 喜爱宝可梦等二次元IP的年轻玩家为主，很多00后用户被Q萌画风吸引进入游戏。玩家具有收集爱好，偏好养成与战斗结合的轻度RPG玩法猛鬼宿舍 2022年 塔防生存类小游戏（与“躺平发育”类似），QQ小程序版本中玩家放置塔防抵御猛鬼 2022年至今在QQ小游戏热玩榜保持前列，成为平台长寿爆款之一 ￼ 原创 以年轻玩家为主，从抖音爆火后引入QQ平台沉淀下一批忠实用户。玩家多为学生群体，喜欢一边在QQ上聊天一边挂着游戏角色自动防守，体验碎片时间的互动乐趣钢琴块2 2018年 音乐节奏反应游戏，小程序版延续手游玩法：点击下落的钢琴键奏出音乐，不漏按即可持续连击 2018-2019年长期位居QQ小游戏热门榜前十 ￼ 改编自同名手游 音乐爱好者和休闲玩家皆有，大量年轻女生和学生群体喜欢此类手速挑战游戏。QQ平台上，玩家利用空闲时间练手速、比成绩，并分享给好友挑战，形成良性竞赛氛围简评：QQ小游戏依托QQ庞大的用户基数和娱乐化的社交氛围，形成了与微信小游戏差异化的发展轨迹 ￼ ￼。一方面，QQ上经典棋牌类小游戏如“欢乐斗地主”、“欢乐麻将”常年稳居榜首，说明传统社交游戏在QQ年轻用户和熟人关系链中依然活跃 ￼。另一方面，QQ小游戏平台在2018-2019年迎来MMO放置类爆发潮，涌现出“小小三国志”这类基于历史题材的挂机手游和改编自网文IP的“斗罗大陆”等重度小游戏，满足了年轻用户更深度的游戏需求 ￼ ￼。此外，像“钢琴块2”这样的热门手游移植版，以及从其他平台引入的“猛鬼宿舍”等现象级产品，也丰富了QQ小游戏的品类 ￼ ￼。总体而言，QQ小游戏玩家以年轻人为主（不少21岁以下用户 ￼），他们乐于一边聊天一边玩游戏，偏好带社交互动的休闲或放置游戏。QQ平台集中运营推荐优质小游戏的策略，也进一步放大了这些游戏的影响力和吸引力。Facebook Instant Games 平台游戏名称 上线时间 玩法简介 流行时期 原创/改编 玩家人群特点EverWing 2016年11月 ￼ 垂直卷轴射击游戏，在Messenger对话内即可游玩，控制精灵少女射击怪物和首领，收集龙宝宝助战，还有Boss团战模式 2016-2017年间作为Messenger首批Instant Games爆款，大获成功；月活一度达1500万以上，2018年中MAU峰值约1400万 ￼ 原创 全球Messenger用户广泛参与的轻度游戏，东南亚及南美地区尤为流行。玩家以年轻人为主，男女都有，利用聊天空档合作打Boss或刷分，比拼社交排行榜 ￼8 Ball Pool (即时版) 2017年 桌球对战游戏，移植自著名手游8 Ball Pool，可在Instant Games上实时与好友玩一局美式台球 2017-2018年在Facebook平台稳定热门，多次进入游戏榜前列 改编自热门桌球手游 台球爱好者和休闲玩家皆有涉及。欧美地区大量青年用户喜欢在聊天时顺手来一局，男性玩家略多，游戏社交属性强，常用于好友间互相挑战Words With Friends (即时版) 2016年 经典拼字对战游戏的即时平台版本，在Messenger上和好友轮流拼字得分（类似Scrabble字谜） 2016年随Instant Games测试上线，成为最受欢迎的社交小游戏之一 ￼ ￼；2017-2018年活跃用户保持高位 改编自Zynga同名手游 主要用户为英语国家的文字游戏爱好者，玩家年龄层较广，从学生到成年人都有。由于可异步对战，很多用户将其当作日常与家人朋友互动的休闲方式，社交黏性很高UNO (即时版) 2018年 著名卡牌游戏UNO的Messenger小游戏版，支持多人在线出牌，率先出完手牌者胜 2018年上线后迅速风靡，成为Instant Games上收入和人气均名列前茅的社交游戏 ￼ 改编自经典桌游IP 各年龄段Facebook用户都熟悉UNO规则，玩家以朋友间娱乐为目的，很多家庭成员也通过Messenger一起玩UNO。女性用户偏多，游戏氛围轻松欢快，在假期和聚会时段使用率飙升简评：Facebook于2016年末推出Instant Games（即时游戏）平台，在Messenger和News Feed中嵌入小游戏，短时间内积累了海量的全球用户和游戏场次 ￼。与国内平台相比，Instant Games的热门作品更强调社交互动和经典IP改编：例如Zynga的“Words With Friends”和欢乐棋牌类的“UNO”都充分利用了好友对战机制，在平台上获得持久生命力 ￼。早期原创游戏中，像EverWing这样的纯休闲射击也取得了全球性成功，曾吸引过8000万+用户，并通过广告月入百万美元 ￼。此外，益智问答类的“OMG”等分享式应用在2018年引发日活过五千万的轰动效应 ￼ ￼，显示出社交平台用户对轻互动内容的巨大需求。然而此类应用更偏向趣味测验，不完全属于传统游戏范畴。总体而言，Facebook Instant Games的玩家主要来自北美、欧洲及部分亚洲市场，用户年龄分布广，但以年轻成年群体为主。他们往往把小游戏当作社交对话的一部分，偏好与认识的人一起游戏。这使得平台上的多人社交游戏（如好友一起玩的拼字、棋牌）长期占据榜单前列 ￼。经过两三年的发展，Instant Games累积了5000+款游戏和超过20亿场游戏会话 ￼。尽管后来平台策略有所调整，但作为微信小游戏的海外对应者，Facebook Instant Games在2017-2018年间的火爆也证明了社交网络与轻游戏融合的巨大潜力。" }, { "title": "AI系列47:可灵", "url": "/posts/ai-47/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-03 05:10:00 +0800", "snippet": "可灵（Kling）是快手于2024年6月推出的自研AI视频生成大模型，定位为“国产对标Sora”的文生视频工具，旨在通过AI技术降低视频创作门槛。以下是其核心功能及同类产品对比分析：🎥 一、可灵的核心功能 文生视频（Text-to-Video） 长时长生成：单次生成最长支持2分钟视频（1080p/30fps），通过“视频续写”功能可延长至3分钟。 物理模拟：模拟真实世界物理规律（如重力、流体运动），生成符合动力学的复杂运动（如人物打斗、物体碰撞）。 多比例适配：支持自由调整视频宽高比（横屏、竖屏、方形），适配短视频平台需求。 图生视频（Image-to-Video） 将静态图像转化为5秒动态视频，用户可通过提示词控制物体运动（如“风吹动头发”“镜头拉远”）。 视频编辑增强 首尾帧控制：精准调整视频开头与结尾画面。 镜头控制：实现推拉、跟随等电影级运镜效果。 多模态协同 结合自研3D时空注意力机制，提升动态一致性（如人物表情、毛发细节）。 支持与设计工具链整合（如合作Lovart实现“设计-生成-优化”全流程自动化）。 ⚙️ 二、技术亮点与局限 优势： 采用DiT（Diffusion Transformer）架构，替代传统U-Net，提升复杂场景生成能力。 通过3D VAE编码器优化画面细节，实现电影级光影效果。 不足： 语义理解偏差：可能混淆“粽子与水饺”“人类与动物”等概念。 画风争议：生成内容被指带有“快手味”（城乡结合部审美），美观性弱于Sora。 动态缺陷：多物体交互时易出现形变（如长颈鹿骑车时人物扭曲）。 🌐 三、同类产品对比国内外主要文生视频模型及关键特性如下：| 产品 | 所属公司 | 最大时长 | 分辨率 | 核心优势 | 现状 ||—————-|————–|————–|————|—————————————|——————————|| Sora | OpenAI | 60秒 | 1080p | 物理模拟顶级，动态运镜流畅 | 未开放公测 || Veo 3 | Google | 60秒+ | 4K | 极复杂场景渲染，动态一致性最佳 | 开放API（付费） || Gen-3 Alpha| Runway | 10秒+ | 高清 | 电影级艺术风格，支持精细控制 | 开放公测（订阅制） || Vidu | 生数科技+清华| 16秒 | 1080p | 中国首个长时长模型，高动态一致性 | 展示阶段 || 混元视频 | 腾讯 | 16秒（文生） | 1080p | 多视角镜头切换，支持图生视频 | 内测中 || 即梦AI | 字节跳动 | 5秒 | 2K | 端侧可用，低延迟生成 | 企业合作（如影视剧制作） || Dream Machine | Luma AI | 120帧/2分钟 | 高清 | 免费开放，美学风格多样 | 公测免费 |💎 四、总结 可灵定位：快手抢占AI视频赛道的核心工具，技术对标Sora，主打长时长生成与本土化适配，但需突破语义理解与画风瓶颈。 竞品趋势：国际巨头（Google Veo、Runway）领跑画质与动态效果，国内厂商（腾讯、字节）聚焦垂直场景落地。 应用场景： C端：短视频创作、Vlog素材生成（快手快影App集成）。 B端：广告营销（如Lovart合作）、影视预演（如分镜生成）。 💡 若需高画质与艺术性，可优先尝试Runway或Veo；追求本土化与免费生成，可灵与Luma AI是当前优选。" }, { "title": "游戏系列3:双人成行需要几个手柄", "url": "/posts/game-3/", "categories": "游戏系列", "tags": "游戏系列", "date": "2025-06-03 04:35:00 +0800", "snippet": "在 Switch 上玩《双人成行》时，如果两人想在同一台主机上本地同屏游玩，需要额外准备手柄。🎮 1. 手柄要求说明 必须使用完整控制器：游戏不支持“每人半个 Joy-Con”（即单只 Joy-Con 横向握持的模式），每位玩家均需使用一个完整的控制器。这可以是： 一对完整的 Joy-Con（左右组合为一个手柄）； 一个 Pro 手柄（官方或第三方兼容手柄）； 或混合组合（如一对 Joy-Con + 一个 Pro 手柄）。 最少需两个独立手柄：若只有原装自带的一对 Joy-Con，则必须再添置至少一个额外手柄（如再买一对 Joy-Con、一个 Pro 手柄或第三方手柄）。💡 2. 配置方案建议| 现有设备 | 需添置设备 | 适用场景 | |————|————–|————| | 原装一对 Joy-Con | 再买一对 Joy-Con | 预算充足，偏好分体式操作 | | 原装一对 Joy-Con | 一个 Pro 手柄 | 追求手感，节省成本（Pro 手柄通常比一对新 Joy-Con 便宜） | | 已有额外手柄（如 Pro 手柄） | 无需新增 | 直接使用现有设备组合 |🌐 3. 联机与成本优化 好友通行证功能：只需一人购买游戏，另一人可通过下载免费“好友通行证”版本联机游玩（在线联机需双方均有 Nintendo Switch Online 会员）。 本地联机：若有两台 Switch，可通过本地无线联机游玩，每台主机需各自配备一个完整手柄。⚠️ 4. 注意事项 国行版限制：国行 Switch 仅支持本地双人，无法在线联机。 手柄兼容性：第三方手柄需确保支持 Switch 连接（如八位堂、莱仕达等品牌）。 性能与画质：NS 版画质较其他平台有缩水（掌机模式 720P，TV 模式 1080P），但帧数基本稳定，不影响合作体验。💎 总结若你只有 Switch 原装的一对 Joy-Con，两人同机本地游玩必须再买一副手柄（新增一对 Joy-Con 或一个 Pro 手柄等）。若选择联机模式，则无需额外手柄，但需会员及好友通行证。建议根据预算和操作偏好选择添置方案，优先考虑 Pro 手柄性价比更高。🎮 一、原装Pro手柄：版本与价格差异任天堂原装Pro手柄的核心功能（如HD震动、40小时续航、NFC）基本一致，主要差异在外观和价格上。以下是常见版本及参考价格（实际价格可能因促销波动）： 版本 特点 参考价格 推荐场景 国行基础版（黑色） 官方保修1年，基础配色 ¥355~459 注重售后保障，预算有限 限定版（如喷射战士3/王国之泪） 主题配色、特殊纹路 ¥380~500+ 收藏需求或偏好独特设计 海外版（日版/港版） 无官方保修，价格可能更低 ¥300~450 愿意承担风险换取更低价格 注意限定版溢价：部分热门主题手柄（如《塞尔达传说：王国之泪》限定版）价格可能比基础版高20%~30%，但功能无区别。⚙️ 二、第三方手柄：性价比替代方案若预算有限或需要备用手柄，第三方是不错的选择，但需注意功能缩水（如无HD震动、续航缩短）。以下是主流品牌对比： 良值 特点：颜值高（如透明壳、塞尔达主题）、支持基础功能（NFC、陀螺仪）。 价格：¥150~230 适合人群：注重外观、轻度玩家或儿童使用。 北通/雷神G50 特点：机械按键、宏编程（一键连招）、多平台兼容（PC/手机）。 价格：¥190~300 适合人群：需要自定义功能或跨平台玩家。 莱仕达 特点：色彩多样、品控稳定，但手感偏硬。 价格：¥200左右 适合人群：追求性价比的多人游戏场景。 ⚠️ 第三方常见短板： 震动生硬（如良值余震明显）； 陀螺仪精度不足（影响体感射击游戏）； 续航普遍≤10小时（原装可达40小时）。 🛒 三、选购建议：根据需求匹配 优先选原装的场景： 追求最佳手感与HD震动（如《塞尔达》《马力欧》玩家）； 需要超长续航（持续游戏＞20小时）； 注重官方保修（国行版售后无忧）。 考虑第三方的场景： 预算有限（＜200元）； 多人聚会备用（如朋友临时使用）； 特殊需求（如宏编程、手机支架）。 避坑提示： 警惕低价“原装”：售价＜300元的“全新原装”多为高仿，可通过重量（正品246~252克）、螺丝雾面质感鉴别； 限定版无性能提升：仅为外观差异，功能性完全一致。 💎 总结 要原汁原味的Switch体验？ → 选原装Pro手柄（国行基础版性价比最高）。 预算有限或需要备用？ → 选良值/北通（¥150~300，满足基础需求）。 多人游戏刚需？ → 组合方案：1个原装Pro + 1对第三方Joy-Con，平衡成本与体验。" }, { "title": "AI系列46:Perplexity", "url": "/posts/ai-46/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-02 05:10:00 +0800", "snippet": "Perplexity AI 是一款颠覆传统搜索模式的 AI 对话式答案引擎，它通过大语言模型（LLM）直接生成结构化答案并标注引用来源，开创了“答案优先”的搜索新范式。其核心价值在于将搜索引擎的实时性与聊天机器人的自然交互结合，成为英伟达 CEO 黄仁勋“几乎每天使用”的工具：🔍 一、Perplexity 是什么？Perplexity 定位为 “对话式答案引擎”（Conversational Answer Engine），与传统搜索引擎和聊天机器人均不同： 功能本质： 输入问题 → 实时检索网络 → 用 LLM 整合信息 → 生成带引用来源的答案（非链接列表）； 例如搜索“马斯克起诉 OpenAI”，直接输出事件始末 + 5 个来源链接。 技术架构： 依赖第三方 LLM（如 GPT-4、Claude 3）做内容生成； 调用 Bing/Google API 获取实时网页数据，通过 RAG（检索增强生成） 技术降低幻觉。 产品形态： 免费基础版 + Pro 订阅版（20 美元/月，支持多模型切换、Copilot 智能提问引导）； 移动端 App 下载量超 100 万，月活用户达 1000 万。 🔥 二、Perplexity 为何爆火？六大核心优势 纯净无广告的体验界面无 SEO 垃圾信息与赞助链接，答案直接呈现（如搜索“哥大附近实惠打印店”，输出 6 家门店详情），而谷歌前 4 条均为广告。 答案可溯源，降低幻觉风险每一句生成内容均标注来源链接，用户可点击验证，大幅提升可信度。学术评测显示其引用准确率显著优于 Google Bard 和 Bing Chat。 多轮对话与场景聚焦 Copilot 模式：通过追问引导用户完善模糊问题（如“预算多少？”“是否需要 24 小时营业？”）； 焦点模式：支持学术、YouTube、Reddit 等 6 类垂直场景，精准过滤信息源。 时效性强整合最新网络结果（如 OpenAI 回应马斯克的博客 1 小时内出现在“发现”板块），优于依赖静态数据的 ChatGPT。 生态化知识管理 Collections 功能：将问答存档为知识库，支持协作共享（类似 Notion + Wikipedia）； 用户可将搜索结果转为播客，拓展内容消费形式。 巨头背书与资本追捧 获英伟达、亚马逊贝佐斯投资，估值 2 个月从 5.2 亿飙升至 10 亿美元； 谷歌 AI 负责人 Jeff Dean 和 YouTube 前 CEO Susan Wojcicki 以个人身份注资。 🧩 三、知名开源替代品推荐针对隐私需求或定制化场景，以下开源方案可替代 Perplexity：✅ 1. Perplexica：最接近的平替，100% 本地部署 核心优势： 通过 SearXNG 元搜索引擎获取实时结果，避免数据过时； 支持 Ollama 本地 LLM（如 Llama3、Mixtral），无需云 API； 六种焦点模式与 Perplexity 对齐，含学术/Reddit/YouTube 等专用检索。 部署：Docker 一键安装，支持浏览器设为默认搜索引擎。 项目地址✅ 2. SurfSense：知识库增强型研究代理 核心优势： 支持上传 27 种文件格式（PDF/图片等）构建个人知识图谱，结合外部搜索生成答案； 集成 Slack/Notion/GitHub 等平台，实现工作流自动化； 采用 Neo4j 图数据库+高级 RAG，支持 150+ LLM 和 6000+ 嵌入模型优化相关性。 适用场景：学术研究、企业知识库、内容创作。 项目地址✅ 3. 其他轻量级选择： search4all：快速集成的 JS 库，支持多搜索引擎后端（Google/Bing）； llm-answer-engine：透明技术栈（Next.js + LangChain），适合开发者学习 RAG 流程。💎 四、总结：Perplexity 的革新与局限| 维度 | Perplexity 的价值 | 面临的挑战 ||—————-|————————————-|——————————-|| 产品定位 | 答案引擎（Answer Engine） | 高成本依赖 Bing/GPT-4 API || 用户体验 | 无广告、溯源可靠、多场景聚焦 | 中文处理弱于英文 || 开源替代 | Perplexica（隐私优先）、SurfSense（知识库） | 功能成熟度需迭代 | 💡 开发者建议： 追求企业级知识管理 → 选 SurfSense； 需要纯本地搜索 → 用 Perplexica + Ollama； 普通用户 → Perplexity Pro 版性价比最优（多模型切换+ Copilot）。 Perplexity 代表了搜索从“链接列表”到“可信答案”的范式跃迁。尽管面临成本与幻觉挑战，其引用透明、场景聚焦、生态整合的设计，已为下一代信息获取工具树立标杆。" }, { "title": "游戏系列2:switch上宝可梦版本", "url": "/posts/game-2/", "categories": "游戏系列", "tags": "游戏系列", "date": "2025-06-02 04:35:00 +0800", "snippet": "🌟 一、按玩家类型推荐：哪款最适合你？1. 首次接触宝可梦的新手玩家 《宝可梦 剑/盾》 亮点：画面高清、系统简化（如随身盒子随时存取宝可梦）、玩法传统但节奏明快，非常适合初次体验宝可梦核心玩法（道馆挑战、收集图鉴）的玩家。 特色系统：“旷野地带”自由探索、“极巨化”团体战，合作乐趣强。 不足：剧情较短，迷宫设计简化，老玩家可能觉得深度不足。 适合人群：想轻松入坑、体验现代宝可梦魅力的玩家。 《精灵宝可梦 Let’s Go！皮卡丘/伊布》 亮点：画面清新可爱，捕捉系统极简（丢球即可），还原初代关都地区情怀，支持双人合作。 特色：与宝可梦互动（抚摸、喂食），适合亲子或情侣共玩。 不足：深度玩法缺失（无特性、培育），战斗系统简单。 适合人群：休闲玩家、儿童、或想重温动画情怀的粉丝。 2. 追求创新玩法的开放世界爱好者 《宝可梦传说 阿尔宙斯》 亮点：颠覆性开放地图设计，强调动作捕捉（潜行、投掷道具），宝可梦生态真实（会主动攻击玩家）。 特色系统：“迅疾/猛攻”战斗节奏、主线聚焦图鉴制作，探索感强。 不足：画质粗糙、场景重复度高。 适合人群：厌倦传统回合制、渴望革新体验的玩家🔥。 《宝可梦 朱/紫》 亮点：全开放世界无缝探索，三线剧情并行（冠军之路、传说之路、星尘之路），坐骑神兽解锁地形能力。 特色：太晶化系统（属性变化策略）、多人联机探索。 不足：优化差（卡顿、穿模）、剧情平淡。 适合人群：能容忍技术缺陷、追求自由探索的玩家🌍。 3. 怀旧党 &amp;amp; 经典玩法爱好者 《宝可梦 晶灿钻石/明亮珍珠》 亮点：NDS神作《钻石/珍珠》高清复刻，保留原版剧情、迷宫设计和回合制深度。 特色：地下洞穴自定义秘密基地、宝可梦跟随系统。 不足：画面复古（“大头娃娃”建模）、创新内容少。 适合人群：想重温2006年经典或体验正统回合制策略的玩家🎮。 📊 二、综合对比：各维度评分（满分10分） 游戏名称 画面 玩法创新 剧情深度 耐玩度 适合人群 《剑/盾》 8.5 7.0 6.0 8.0 新手、联机玩家 《阿尔宙斯》 6.5 9.5 7.5 9.0 开放世界爱好者 《朱/紫》 7.0 9.0 6.5 8.5 自由探索党 《Let’s Go! 皮卡丘/伊布》 8.0 5.0 6.0 6.5 休闲玩家、亲子 《晶灿钻石/明亮珍珠》 6.0 4.0 8.0 7.5 怀旧党、策略对战玩家 💎 三、终极选购建议 新人入坑首选 → 《宝可梦 剑/盾》：画面精美、系统友好，完美传递宝可梦核心乐趣。 革新体验必玩 → 《宝可梦传说 阿尔宙斯》：打破传统框架，动作+探索的颠覆性设计。 怀旧情怀拉满 → 《晶灿钻石/明亮珍珠》：原汁原味复刻，适合老玩家重温神奥之旅。 亲子/休闲之选 → 《Let’s Go! 皮卡丘/伊布》：操作简单、互动治愈，完美适配轻度玩家。 💡 小贴士： 实体卡带回血：通关后转卖回血，《剑/盾》《朱/紫》保值率较高。 DLC重要性：《剑/盾》DLC“铠之孤岛/冠之雪原”大幅提升内容量，建议捆绑购买。 🔚 总结宝可梦系列在Switch上的每一代都各有侧重：经典传承选《剑/盾》，突破创新玩《阿尔宙斯》，情怀复刻入《钻石/珍珠》，轻松共乐挑《Let’s Go!》。结合你的游玩偏好，一定能找到最适合你的宝可梦之旅！🎮" }, { "title": "AI系列45:人工智能趋势报告", "url": "/posts/ai-45/", "categories": "AI系列", "tags": "AI系列", "date": "2025-06-01 05:10:00 +0800", "snippet": "Mary Meeker（玛丽·米克尔）是科技投资与分析领域的标志性人物，被称为“互联网女皇”（Queen of the Internet）。她目前领导的机构是 Bond Capital（邦德资本），这是一家由她在2019年创立的独立风险投资公司。以下是关于该机构及其最新AI报告的详细说明：🏢 一、Bond Capital 的背景与定位 成立与使命 Meeker 在离开老牌风投 KPCB（凯鹏华盈）后创立 Bond Capital，专注于 成长期科技企业投资，尤其擅长挖掘颠覆性技术趋势。 KPCB 时期她主导的 Digital Growth Fund 聚焦互联网成熟期项目，而 Bond Capital 延续了这一策略，重点关注数据驱动型技术（如 AI、云计算、生物科技）的商业化落地。 行业影响力 Meeker 因在摩根士丹利任职期间精准预测谷歌、亚马逊等巨头的崛起而闻名，其年度《互联网趋势报告》被全球科技界视为“行业圣经”。 Bond Capital 延续这一传统，2025年6月发布的 《人工智能趋势报告》（Trends in Artificial Intelligence） 再次引发广泛关注。 📊 二、2025年《人工智能趋势报告》的核心内容这份长达340页的报告（发布于2025年5月底）以“前所未有的变革速度”为基调，提出8大核心趋势： AI 用户与资本投入的爆发式增长 用户增速：ChatGPT 在17个月内达到8亿用户，非北美用户占比超50%（互联网时代需20年）。 资本开支：2025年美国六大科技公司（苹果、英伟达等）AI 相关支出超 2000亿美元，同比增长63%。 技术性能突破与成本悖论 性能提升：AI 在 MMLU 测试中准确率达89.8%，接近人类水平。 成本分化：大模型训练成本年均增长200%（如 GPT-4 训练费超1亿美元），但单次推理成本两年内下降99.7%。 中美主导的全球竞争格局 美国：主导大语言模型（如 GPT-4.5），但面临开源模型和低价竞争冲击。 中国：占全球工业机器人部署量50%以上，本土模型（如阿里通义千问 2.5）快速追赶。 商业模式的挑战 报告尖锐质疑 OpenAI 等公司的可持续性： 训练成本飙升📈（8年涨2400倍），但推理价格暴跌📉（99.7%），导致盈利困难。 开源模型（如阿里 Qwen 2.5）挤压闭源商业空间，预期利润率从45%降至28%。 行业融合与社会变革 应用渗透：金融（美国银行AI助手年交互20亿次）、医疗（FDA批准近700项AI设备）、教育（AI课程完成率提升35%）。 就业冲击：2025年全球50%重复性工作将被AI替代，催生“人机协作”新模式。 💎 三、报告的价值与 Bond Capital 的立场 洞察本质矛盾：指出AI行业的核心矛盾——训练成本高企与推理价格崩盘，警示资本泡沫风险。 投资导向：Bond Capital 借此报告引导资本关注 垂直场景AI（如医疗、工业）及 开源生态，而非盲目押注通用大模型。 历史参照：类比特斯拉、Uber 的“烧钱-盈利”路径，强调长期耐心资本的必要性。💎 总结Bond Capital 是 Mary Meeker 创建的、聚焦成长期科技投资的顶尖风投机构，其2025年AI报告以 “前所未有” 51次强调AI的颠覆性速度，既肯定技术潜力，也预警商业与伦理挑战。报告已成为企业战略制定和投资决策的关键参考，尤其对理解中美AI竞争、成本动态及行业落地具有高实战价值。" }, { "title": "知识百科系1:opencl与opengl", "url": "/posts/baike-1/", "categories": "知识百科系列", "tags": "知识百科系列", "date": "2025-06-01 05:00:00 +0800", "snippet": "OpenCL与OpenGL虽均由Khronos Group维护且名称相似，但设计目标、技术架构和应用场景存在本质差异。以下是系统性对比分析：🎯 一、核心定位与目标差异 OpenGL（开放图形库） 定位：专攻实时图形渲染，用于生成2D/3D图像（如游戏、CAD、可视化）。 工作流：基于固定渲染管线（顶点处理→光栅化→片段着色→输出到屏幕），操作对象为几何图元（三角形、纹理等）。 局限：需将计算问题“包装”为图形任务（例如通过纹理渲染模拟并行计算），难以直接实现随机写操作或复杂数据交互。 OpenCL（开放计算语言） 定位：面向异构平台通用并行计算，支持CPU、GPU、FPGA、DSP等多种处理器。 工作流：直接操作内存缓冲区，内核函数描述并行任务（如矩阵运算、物理模拟），无图形管线约束。 优势：支持分散写入（Scatter Write）、工作组同步、本地内存控制等底层硬件特性，灵活性更高。 ⚙️ 二、技术架构与能力差异| 特性 | OpenGL | OpenCL ||————————|————————————-|————————————-|| 编程语言 | GLSL（图形着色语言） | OpenCL C（扩展C99） || 数据类型 | 图形导向（vec4, mat4, 纹理等） | 通用计算（指针、标量、自定义结构） || 内存模型 | 抽象为纹理/缓冲区对象，访问受限 | 显式控制全局/本地/私有内存层级 || 精度控制 | 浮点精度宽松（依赖驱动实现） | 严格IEEE精度保证（科学计算关键） || 跨平台支持 | 广泛（PC/移动/嵌入式图形驱动） | 受限（移动端支持弱，iOS/Android无官方支持） || 与图形管线集成 | 无缝（直接操作VBO、纹理） | 需显式同步（如cl_khr_gl_sharing扩展） | 注：OpenGL 4.3+引入计算着色器后，可在GLSL内实现类似OpenCL的通用计算，但仍受限于图形API约束（如精度、硬件兼容性）。🚀 三、典型应用场景对比 OpenGL 适用领域： 实时渲染：游戏引擎（Unity/Unreal）、VR/AR场景。 图形处理：CAD建模、数据可视化、UI动画。 优势案例：图像滤镜（如高斯模糊）在OpenGL中常比OpenCL更快（因驱动对图形任务优化更成熟）。 OpenCL 适用领域： 非图形计算：科学模拟（流体力学）、密码学、金融建模。 异构计算：跨设备任务分发（如CPU预处理 + GPU加速）。 不可替代性：需严格精度（如医学成像）、分散写入（如粒子系统）或非GPU设备（如FPGA）的任务。 🔍 四、协作场景与选择建议 协作模式：OpenCL负责计算（如物理模拟）→ 结果通过共享缓冲区传递 → OpenGL负责渲染。例如：深度学习推理（OpenCL） + 结果可视化（OpenGL）。 技术选型指南：| 需求场景 | 推荐选择 ||—————————-|——————–|| 实时图形渲染（游戏/VR） | ✅ OpenGL || 通用计算（科学/AI） | ✅ OpenCL || 图形+计算混合（如特效处理）| ⚡ OpenGL计算着色器 || 移动端跨平台兼容性 | ⚠️ 优先OpenGL（因OpenCL支持差） | 💎 总结 本质区别：OpenGL是图形渲染框架，OpenCL是异构计算框架。 决策关键： 纯图形任务 → OpenGL； 非图形并行计算 → OpenCL； 图形与计算紧密耦合 → OpenGL计算着色器（需权衡精度和灵活性）。 趋势提示：Vulkan（OpenGL继任者）正融合计算能力，长期看可能模糊两者边界。" }, { "title": "游戏系列1:超级玛丽版本", "url": "/posts/game-1/", "categories": "游戏系列", "tags": "游戏系列", "date": "2025-06-01 04:35:00 +0800", "snippet": "最近想看下Switch上有没有类似传统超级玛丽风格的游戏，就是那种可以身体变大、钻水管的经典玩法。绿色水管、踩乌龟、钻地道……这些元素几乎刻进了我们的童年记忆。在Switch平台上，这类“经典玩法”的延续主要体现在2D横版作品中，但部分3D作品也保留了这些元素。：🍄 一、2D横版经典系列：最接近你描述的“变大+钻水管”体验这类游戏视角固定、关卡线性，是原汁原味的“超级玛丽”式玩法。 《新超级马力欧兄弟U 豪华版》（New Super Mario Bros. U Deluxe） 核心玩法：完美复刻FC时代的经典机制——吃蘑菇变大、吃火焰花发射火球、钻水管切换场景、踩敌人跳跃等。 关卡设计：包含164个精心设计的横版关卡，支持本地最多4人同屏合作（但多人玩时容易互相干扰）。 角色差异：可选角色包括马力欧、路易吉、奇诺比奥和偷天兔（后两位角色自带“无敌”特性，适合新手）。 适合人群：想重温经典操作感、喜欢传统关卡挑战的玩家。 《超级马力欧兄弟 惊奇》（Super Mario Bros. Wonder） 创新点：虽然仍是2D横版，但加入了“惊奇花”变身机制——碰到后可能变身为大象马力欧（用鼻子攻击/蓄水）、泡泡形态（漂浮）等，颠覆传统变大逻辑。 动态关卡：水管会“活过来”变成滑梯或通道，关卡本身具备更强的互动性和意外性。 多人乐趣：支持在线4人联机，可互助复活，节奏更轻松欢乐。 适合人群：喜欢经典框架但期待新鲜感的玩家，尤其适合多人同乐。 🔍 二、3D视角作品：保留变大与水管元素，但玩法更自由这类游戏虽然视角变为3D，但“变大蘑菇”“水管通道”等元素依然存在，只是操作和关卡目标更开放。 《超级马力欧 奥德赛》（Super Mario Odyssey） 核心机制：通过帽子“凯皮”附身敌人或物体获得能力（如变成恐龙、坦克等），传统“变大”被替代为形态变换。 水管用途：主要用于快速传送或进入隐藏房间，非核心路径。 玩法自由：半开放世界探索，收集“月亮”推动剧情，操作上限高、创意十足。 适合人群：喜欢探索与解谜、不局限于线性关卡的玩家。 《超级马力欧 3D世界 + 酷霸王之怒》（Super Mario 3D World + Bowser’s Fury） 融合设计：关卡为箱庭式3D场景，但仍保留吃蘑菇变大、钻水管、踩敌人等经典操作。 多人合作：支持4人同屏，角色能力各异（如桃花公主可浮空）。 扩展内容：新增“酷霸王之怒”模式为半开放世界，支持变身“巨型马力欧”对抗Boss。 适合人群：想从2D过渡到3D但仍希望保留经典元素的玩家。 🧩 三、解谜衍生作：含水管与变大机制，但核心是策略解谜如果你对经典元素感兴趣但偏好动脑胜过操作，这类游戏可能更合胃口。 《马力欧 VS 大金刚》（Mario vs. Donkey Kong） 玩法本质：操控迷你马里奥玩偶抵达终点，需利用开关、弹簧、移动平台等解谜，变大机制较少出现。 水管作用：作为传送通道或关卡连接点。 难度节奏：后期关卡对时机和路线规划要求较高。 适合人群：偏爱策略解谜、对平台跳跃操作要求低的玩家。 📊 各游戏关键特性对比表以下是这几款游戏在核心维度上的差异总结，帮助你快速锁定适合自己的那一款： 游戏名称 玩法维度 支持人数 经典元素保留度 特色机制 难度/风格 新超级马力欧兄弟U豪华版 2D横版 1-4人 ★★★★★ 传统关卡，多角色选择 中高难度，经典挑战 超级马力欧兄弟惊奇 2D横版 1-4人 ★★★★☆ 惊奇花变身，动态关卡 中等难度，欢乐创意 超级马力欧奥德赛 3D开放 1-2人 ★★☆☆☆ 帽子附身，探索收集 自由探索，操作有深度 超级马力欧3D世界 3D箱庭 1-4人 ★★★★☆ 角色能力差异，合作通关 中等难度，适合多人 马力欧VS大金刚 2D解谜 1-2人 ★★★☆☆ 策略路线规划，机关解谜 解谜向，后期较烧脑 💎 小结： 就想找“小时候的味道” 👉 直接选 《新超级马力欧兄弟U 豪华版》，它就是FC时代的全面进化版； 愿意尝点新意但别太脱离经典 👉 《超级马力欧兄弟 惊奇》 或 《超级马力欧 3D世界》，在保留变大、水管等元素的基础上，分别往趣味变身或3D合作方向拓展； 想彻底换个视角玩马里奥 👉 《超级马力欧 奥德赛》 不会让你失望，它重新定义了“能力获取”的方式。Switch上的马里奥游戏每一款都打磨得足够用心，不论你选择哪一款，变大、钻水管、踩敌人这些经典快乐，都会在里边等着你。" }, { "title": "AI系列44:rpa工具uipath与browser-use有什么区别", "url": "/posts/ai-44/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-30 05:10:00 +0800", "snippet": "UiPath 和 Browser-use 是两种定位不同、适用场景差异显著的自动化工具，理解它们的核心区别对于技术选型至关重要：🧠 一、本质定位差异| 维度 | UiPath | Browser-use ||—————-|—————————————–|——————————————|| 类型 | 企业级 RPA 平台 | 轻量级 Web 自动化 JavaScript 库 || 架构 | 桌面客户端 + 云端控制台 | 纯前端库，依赖浏览器环境 || 开发语言 | C#/VB.NET（活动开发）、可视化设计器 | JavaScript/TypeScript || 部署方式 | Windows 服务、机器人集群 | 浏览器扩展或网页脚本注入 |⚙️ 二、核心能力对比UiPath：企业级浏览器自动化 多浏览器支持通过 Open Browser 或 Use Application/Browser 活动原生控制 Chrome、Edge、Firefox 等，支持自定义 Chromium 内核浏览器（需配置 --remote-debugging-port）。 工业级稳定性提供异常处理（如 Try-Catch 和 Throw 活动）、重试机制、超时控制，确保流程抗干扰能力。 复杂操作封装 元素定位：支持 XPath/CSS 选择器、图像识别、OCR 文本匹配 数据抓取：内置 Data Scraping 向导，自动提取表格/列表数据 跨应用集成：可联动 Excel、数据库、API 调用等后端系统 企业级特性审计日志、权限管理、机器人调度（需 Automation Cloud 或 Orchestrator）。Browser-use：轻量级网页交互增强 DOM 智能标注通过递归遍历生成可操作元素树，将自然语言指令（如“点击登录按钮”）映射为 Playwright 操作。 无头浏览器协同依赖 Playwright/Puppeteer 执行实际操作，自身专注意图解析与元素映射。 前端友好集成可直接嵌入 React/Vue 项目，示例代码： import { highlightElement } from &#39;browser-use&#39;;// 标注页面中所有可点击元素highlightElement({ action: &#39;click&#39; }); 🌐 三、典型使用场景UiPath：适合重型自动化流程 跨系统数据同步例如从电商网站抓取价格 → 写入 Excel → 邮件发送报表。 企业后台处理银行账单审核（OCR 识别表格 → 逻辑校验 → ERP 录入）。 合规性检查自动扫描企业官网所有链接有效性（结合 HTTP 状态码检测）。 生成式 AI 集成调用 GPT 处理客服邮件，自动生成回复草案。Browser-use：适合轻量级用户辅助 浏览器扩展开发为个人开发者提供快速实现“智能填表”、“一键比价”等功能的 SDK。 交互式演示工具教学场景中高亮并自动操作页面元素。 低代码自动化原型快速验证网页自动化可行性，无需部署 RPA 环境。🛠️ 四、开发与部署成本| 环节 | UiPath | Browser-use ||—————-|—————————————–|——————————————|| 学习曲线 | 需掌握活动库、选取器语法、.NET 基础 | 前端开发者可直接上手，文档简洁 || 部署复杂度 | 需安装 Studio、机器人运行时 | npm install browser-use 即用 || 定制开发 | 需用 C# 编写自定义活动（生成 DLL） | 直接修改 JS/TS 源码 || 硬件要求 | Windows 服务器 + 虚拟机资源 | 仅需现代浏览器 |💡 五、混合使用建议在实际项目中，两者可互补： 前端交互层：用 Browser-use 实现网页元素智能标注与用户意图解析 后端流程层：通过 UiPath 调用处理结果，执行跨系统持久化操作示例架构：graph LRA[用户指令] --&amp;gt; B(Browser-use 解析为 DOM 操作)B --&amp;gt; C{操作类型}C --&amp;gt;|简单操作| D[Playwright 执行]C --&amp;gt;|复杂流程| E[触发 UiPath 机器人]E --&amp;gt; F[数据库/ERP 集成]💎 总结：按场景选择工具 选 UiPath 若：✅ 需自动化跨桌面应用+浏览器的复杂流程✅ 企业环境要求审计日志与故障恢复✅ 已有 .NET 技术栈（例：用 C# 扩展自定义活动） 选 Browser-use 若：✅ 快速为现有网页添加智能辅助功能✅ 个人开发者追求零部署成本✅ 技术栈基于 JavaScript/Electron（如 AI 浏览器开发） 两者本质解决不同层级问题：UiPath 是自动化流水线工厂，Browser-use 是网页操作智能手套。轻量前端交互优先用 Browser-use 快速原型；若需深度整合本地文件/跨应用操作，再引入 UiPath 作为后端引擎。" }, { "title": "AI系列43:如何开发AI浏览器", "url": "/posts/ai-43/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-29 05:10:00 +0800", "snippet": "作为个人开发者打造一款AI浏览器，需要整合浏览器基础功能、AI模型集成与交互设计三大模块。以下是从技术选型到落地的系统化实现路径，结合最新开源方案和实用工具，助你高效开发：🧠 一、明确核心功能与技术选型1. 基础浏览器框架（壳体层） 推荐方案：基于 Chromium Embedded Framework (CEF) 或 Electron 构建 优势：直接复用成熟渲染引擎（Blink/V8），支持跨平台（Win/macOS/Linux） 替代方案：若需轻量化，可选用 WebView2（Windows）或 WKWebView（macOS/iOS）2. AI能力集成（核心层）| 能力模块 | 推荐技术栈 | 典型案例参考 | |———————–|————————————————————————–|—————————–| | 本地模型推理 | Ollama（本地LLM管理） + ONNX Runtime（跨框架模型部署） | Page Assist侧边栏对话 | | 浏览器自动化 | Browser-use（开源AI操作DOM库） + Playwright（浏览器控制） | 自动填表、爬取数据 | | 云端模型接入 | OpenAI API / Claude / DeepSeek-V3（通过OpenRouter免费调用） | 联网增强问答 | | 视觉识别 | 百度AI视觉SDK（人脸/OCR） 或 Transformer.js（Web端轻量化CV） | 网页图像分析 |⚙️ 二、关键模块实现详解1. AI与网页上下文交互 侧边栏智能助手（如Page Assist）通过浏览器扩展注入侧边栏，实现： 实时网页内容解析（使用 MutationObserver 监听DOM变化） 文档对话：集成 pdf.js 解析PDF，SheetJS 解析CSV/Excel 调用本地模型：通过Ollama运行Llama3、Gemma等轻量模型 // 示例：监听网页文本变化并发送到AI const observer = new MutationObserver(() =&amp;gt; {const pageText = document.body.innerText.slice(0, 5000); // 截取部分内容chrome.runtime.sendMessage({type: &quot;analyze&quot;, text: pageText}); }); observer.observe(document.body, {childList: true, subtree: true}); 2. 自主浏览器自动化（如Browser-use） 技术要点： 元素标注：通过 buildDomTree.js 递归遍历DOM，生成可操作元素索引 动作映射：将自然语言指令（如“点击登录按钮”）转为 playwright.click(&#39;#login-btn&#39;) 操作流程： graph LRA[用户语音/文本指令] --&amp;gt; B(AI解析为DOM操作序列)B --&amp;gt; C[调用Browser-use高亮目标元素]C --&amp;gt; D[执行Playwright自动化操作] 3. 隐私保护设计 敏感操作（密码填充、支付）强制使用本地模型推理（如Gemini Nano） 数据沙盒：用户数据经加密后存于IndexedDB，支持一键清除 联网开关：显式控件允许用户切断云模型访问🚀 三、开发路线与效率工具阶段1：原型验证（1-2周） 快速搭建外壳 用Electron + React创建最小可行浏览器窗口 集成Browser-use基础库：git clone https://github.com/browser-use/web-ui.git 接入首个AI能力 通过Ollama部署Phi-3模型，实现侧边栏问答 添加PDF解析：使用 pdfjs-dist 库提取文本 阶段2：核心能力扩展（3-4周） 增强自动化 训练微调模型识别电商页面元素（商品图/价格/按钮） 结合Playwright实现“比价下单”自动化流水线 优化性能 采用TACO-LLM推理加速技术，提升本地模型吞吐量200% 使用Web Worker分离渲染与AI计算线程 阶段3：生态集成（持续迭代） 插件系统：开放API供开发者扩展AI工具（如SEO分析/代码生成） 云同步：用户配置加密同步至私有NAS或WebDAV服务🧰 四、资源推荐与避坑指南🔧 必备开源项目| 项目名称 | 用途 | 链接 ||—————-|——————————-|————————————–|| Page Assist | 浏览器侧边栏AI助手模板 | GitHub || Browser-use | 网页自动化标注与控制 | GitHub || TACO-LLM | 本地模型推理加速框架 | 腾讯云开源（文档见） || Transformers.js | 浏览器内运行BERT等模型 | https://github.com/xenova/transformers.js |⚠️ 关键注意事项 权限控制：在manifest.json中最小化声明权限（如避免不必要的&amp;lt;all_urls&amp;gt;） 模型许可：商用需遵守Llama/Mistral等模型的商业许可协议 性能边界：本地模型限于7B参数以下（如Phi-3、Gemma 2B），否则需云协同💎 总结从零构建AI浏览器的核心是 “壳体+智能体”分层设计： 基础层：CEF/Electron提供渲染与扩展能力 能力层：Browser-use实现自动化，Ollama/ONNX支持本地推理 交互层：类Page Assist的侧边栏为交互入口个人开发者建议优先扩展路线： 改造Chromium → 集成Page Assist式侧边栏 → 接入Browser-use自动化 → 逐步替换为自研AI模块当前正是轻量化AI浏览器的爆发期——2025年全球AI浏览器用户预计超6亿。" }, { "title": "AI系列42:Fellou", "url": "/posts/ai-42/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-29 04:50:00 +0800", "snippet": "以往，浏览器分为三种：• 传统普通浏览器：侧重信息浏览，目前浏览器的最常见形态；• 对话式浏览器（Conversational Browsers）：侧重信息交互与内容生成，侧重于通过AI辅助实现信息交互与内容生成。例如Microsoft Edge（Copilot）、Opera One+Aria、360 AI浏览器、豆包和部分Arc版本，均以自然语言交互、问答和内容摘要为主，但整体操作仍由用户主导；• 搜索优化型AI浏览器（Search-Optimized AI Browsers）：侧重深度信息检索和摘要，通过AI技术对网页内容进行整合和生成精准答案。例如Perplexity Comet和新夸克均以深度检索和内容整合为主要卖点，提供精准信息查询服务；而Fellou尝试开创第四种浏览器：Agentic Browser行动型浏览器比如「整理我过去一周的日历和邮件，整理成Todo」这种既依赖本地上下文，又是长程的任务，适合放到本地的虚拟化环境中执行，这种环境即被称作「影子空间」，它可以做到在Agent执行任务时不干扰用户使用电脑Fellou 是由 AI 初创公司 Fellou AI 推出的全球首款 “行动型浏览器”（Agentic Browser），它突破了传统浏览器的被动角色，通过融合 AI 智能体（Agent）、浏览器功能与工作流自动化技术，实现了从“信息浏览”到“主动执行”的跨越：🧠 一、Fellou 的核心功能与定位 智能任务自动化（Deep Action） 用户只需输入自然语言指令（如“对比亚马逊上 MacBook 的价格”），Fellou 即可自动拆解任务、跨网页操作（如登录平台、填写表单、生成报告），平均任务耗时仅 3.7 分钟，效率较同类产品提升 3-5 倍。 主动预测与推荐（Proactive Intelligence） 基于用户行为数据与语义分析，预判需求并主动提供服务（例如旅行攻略搜索后自动推荐安全目的地并生成双语报告）。 后台异步执行（Shadow Workspace） 在独立虚拟沙箱中运行任务，不影响用户当前操作，支持实时监控和干预。 开放生态（Agent Store） 用户可共享或调用垂直领域的智能体应用（如市场调研、数据整理工作流），开发者可通过 Eko 框架用自然语言开发复杂流程。 跨平台深度搜索 支持登录 LinkedIn、Reddit 等平台后批量检索信息，一键生成可视化报告。 适用场景：职场自动化报告生成、竞品调研、多平台内容发布、个人效率管理。🌐 二、类似产品分析：AI 浏览器与自动化工具以下是目前与 Fellou 功能或定位相似的代表性产品：1. AI 增强型浏览器 Arc 浏览器： 核心：空间（Space）管理、竖向标签栏、分屏协作，集成 AI 助手 Arc Max 实现页面摘要、链接预览等。 差异：侧重交互革新，自动化能力弱于 Fellou。 Dia 浏览器（Arc 团队开发）： 处于早期邀请制测试，定位“下一代 AI 浏览器”，细节未公开，但强调跨应用协作。 2. 自动化驱动工具 Browser Use： 开源框架，让 AI Agent 模拟人工操作浏览器（如填写表单、提取内容），需代码配置，适合开发者。 Eko Framework（Fellou 配套开发工具）： 支持以自然语言编写工作流，与 Fellou 深度集成，实现复杂任务编排。 📊 三、产品对比与选择建议| 产品 | 核心定位 | 关键技术特点 | 适用场景 ||—————-|———————-|————————————–|————————–|| Fellou | 任务代理型浏览器 | 自然语言指令、跨网页自动化、影子空间 | 多步骤任务自动化、调研 || Arc/Dia | 交互革新型浏览器 | 空间管理、分屏协作、AI 辅助 | 高效标签管理与信息整理 || Browser Use| 浏览器自动化框架 | 开源、可编程操作模拟 | 开发者定制自动化流程 | 选择建议： 追求 “零代码自动化”：选 Fellou（职场用户）或等待 Dia 公开； 需要 开发自定义流程：Browser Use（开源）或 Eko 框架； 💎 四、总结Fellou 代表了浏览器从“信息工具”向“AI 代理”的范式转变，其核心价值在于 用自然语言驱动复杂操作，解放用户重复劳动。类似产品中： Arc/Dia 侧重交互体验革新； Browser Use 提供底层自动化能力；" }, { "title": "AI系列41:youware", "url": "/posts/ai-41/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-29 04:40:00 +0800", "snippet": "YourWare 与 YouWare 实为同一产品在不同场景下的拼写差异，均指向由明超平（Leon Ming）创立的 AI 编程社区平台Yourware 功能主要有一键部署网页、展示 AI 编程用例，以及一个包含各种用户展示形成的社区。是一款面向 AI 时代创作者的可视化应用搭建平台，其核心定位是“AI-native App Builder”，旨在通过无代码方式连接创意与技术：一、产品定位与核心理念 核心价值YourWare 致力于让非技术用户（如创作者、产品经理）通过拖拽模块和自然语言交互，快速构建 AI 应用或自动化流程，实现“创意即产品”的愿景。其定位类似于 AI 时代的 Webflow + Zapier，融合了低代码开发与多模型协作能力。 解决的问题传统 AI 生成内容（如网页、工具）存在部署门槛高、交互性差、难以复用等问题。YourWare 通过 MCP（Model Context Protocol）协议集成外部服务，实现素材自动获取与代码优化，例如直接调用 Figma 设计稿生成网页，并通过 Unsplash 填充图片素材。二、核心功能亮点功能模块 技术实现与价值拖拽式构建器 支持文字输入、按钮、条件判断等元素拼接，逻辑可视化程度堪比编程语言多模型协作 集成 GPT、Claude、Mistral 等主流模型，支持模型能力组合调用（如用 Claude 生成代码 + GPT 优化文案）一键发布与部署 5 秒内将作品发布为网页/API/Widget，解决 GitHub Pages 等传统部署方式的复杂性MCP 协议支持 深度适配 Figma、Google Maps 等服务，实现设计稿解析、图标库调用等跨平台数据拉取社区共创机制 允许作品二次创作（Remix），通过访问量、Emoji 互动等计算积分（Knot），可兑换现金三、技术架构创新 自研 Sandbox 引擎将编辑器启动时间从 60 秒压缩至 5 秒，支持 HTML/TSX 文件实时预览，加载成功率超 90%。 动态优化能力提供 “一键美化”功能，通过 AI Agent 分析网页设计缺陷（如布局错位、配色不协调），自动生成优化方案并保留原内容逻辑。 安全与权限控制作品可设置为公开/私密，私密项目支持密码保护，满足企业级数据安全需求。四、典型应用场景 内容生成：自动撰写博客、会议纪要，结合多模型优化输出质量 客户支持：搭建 FAQ 聊天机器人并嵌入官网，根据用户问题精准响应 数据工具：上传 Excel 后智能提取关键信息，生成可视化报表 创意展示：将 AI 生成的网页代码快速部署为可交互作品集，支持密码分享五、市场表现与融资 2025 年 3 月上线初期，用户量两天内从 1,000 暴涨至 100 万，截至 5 月已积累数十万创作项目 完成两轮数千万美元融资，估值达 8,000 万美元（约 5.6 亿人民币），投资方包括头部科技基金创始人背景CEO 明超平（Leon Ming）曾任字节跳动剪映产品负责人、月之暗面核心产品高管，其经历融合硬件、互联网与 AI 领域洞察。他提出：“AI 不应削减人的创意，而应成为创意的放大器”。可访问官网 yourware.so(https://www.yourware.so/) 创建首个 AI 应用，或通过“作品广场”浏览社区优秀案例获取灵感。" }, { "title": "AI系列40:qnn", "url": "/posts/ai-40/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-29 04:30:00 +0800", "snippet": "QNN是指Qualcomm Neural Network，即高通神经网络，是高通推出的用于AI推理的软件开发套件（SDK），也称为Qualcomm AI Engine Direct.它允许开发者将各种AI框架模型转换并优化为在Qualcomm芯片上运行专为Snapdragon平台优化QNN的主要功能和特点：模型转换和优化：:QNN提供工具来将PyTorch, TensorFlow, Keras, ONNX等流行框架模型转换到Qualcomm平台的模型格式.﻿推理引擎：:QNN提供推理引擎，可以在Qualcomm芯片上运行转换后的模型，并进行推理.﻿工具和API：:QNN提供各种工具和API来帮助开发者进行模型转换，优化，测试和调试.﻿ONNXONNX（Open Neural Network Exchange，开放神经网络交换）是一种用于表示机器学习模型的开放标准格式，旨在解决不同AI框架间的模型兼容性问题，实现跨平台、跨框架的模型共享与部署。ONNX 提供统一的模型存储格式，允许开发者在不同框架（如 PyTorch、TensorFlow、MXNet）间无缝转换模型例如，PyTorch 训练的模型可转为 ONNX 格式，在 TensorFlow 上部署TensorFlow 与 ONNX 是 互补协作关系：TensorFlow 作为训练框架生成模型，ONNX 作为中间格式实现跨平台部署。graph LRA[TensorFlow 训练模型] –&amp;gt; B[tf2onnx 转换工具]B –&amp;gt; C[ONNX 格式模型]C –&amp;gt; D[ONNX Runtime/TensorRT/OpenVINO 等推理引擎]D –&amp;gt; E[CPU/GPU/NPU 硬件部署]AI框架模型AI框架模型（Framework-Specific Model）指依赖特定深度学习框架（如PyTorch、TensorFlow）构建、训练和保存的机器学习模型。它包含完整的模型结构定义、权重参数及训练配置，但通常与原生框架深度绑定，难以直接跨平台部署。框架模型是训练阶段的产物，与框架生态强耦合（如PyTorch模型需torch库加载以PyTorch模型部署到高通芯片为例：graph TBA[PyTorch定义模型] –&amp;gt; B[GPU训练]B –&amp;gt; C[保存为model.pt]C –&amp;gt; D[导出ONNX格式]D –&amp;gt; E[用QNN工具链量化编译]E –&amp;gt; F[部署到Snapdragon NPU]关键转换步骤：框架模型（.pt）→ 中间格式（.onnx）→ 硬件优化格式（QNN二进制）" }, { "title": "AI系列39:Puppeteer", "url": "/posts/ai-39/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-28 04:30:00 +0800", "snippet": "🛠️ 一、Puppeteer 是什么？能做什么？定义与核心能力 定位：Puppeteer 是由 Google Chrome 团队开发的 Node.js 库，通过 DevTools 协议直接控制 Chromium/Chrome 浏览器（也实验性支持 Firefox）。 运行模式：默认以无头（Headless）模式运行，节省资源；也可切换为有界面模式（Non-headless）方便调试。 核心功能： ✅ 网页截图与 PDF 生成（支持全页滚动截图）； ✅ 爬取动态网页（如 SPA/SSR 站点，精准解析 CSS 和 JS 渲染内容）； ✅ UI 自动化测试（表单填写、点击、键盘输入、鼠标操作）； ✅ 性能监控（捕获时间线跟踪数据，分析页面加载性能）； ✅ 测试 Chrome 扩展（需非无头模式）。 技术特点 智能等待机制：内置自动等待元素可交互（如 waitForSelector），减少 sleep 调用，提升脚本稳定性； Shadow DOM 支持：通过 &amp;gt;&amp;gt;&amp;gt; 选择器操作 Shadow DOM 元素； 多语言执行：可在页面上下文中注入并执行 JavaScript（page.evaluate()）； 轻量安装选项：提供 puppeteer-core 包，跳过 Chromium 下载，连接本地或远程浏览器。典型场景 生成网站快照或报表 PDF； 爬取需 JS 渲染的电商价格、新闻内容； 自动化重复性 Web 操作（如数据录入）； 前端 E2E 测试（替代 Cypress 或 Selenium 的 Chromium 场景）。🤖 二、Browser-Use 是什么？能做什么？定义与核心能力 定位：Browser-Use 是一个基于 Python 的开源框架，将大型语言模型（LLM）与浏览器自动化工具（如 Playwright）结合，实现 自然语言驱动的浏览器操作。 核心功能： ✅ AI 代理控制浏览器：用户通过自然语言描述任务（如“点击登录按钮”），AI 解析并执行操作； ✅ 智能 DOM 分析：自动识别元素可交互性（光标样式、ARIA 角色等）； ✅ 多模型支持：集成 GPT-4o、Qwen 等 LLM，适应不同成本与性能需求； ✅ 定制化动作扩展：支持注册自定义操作（如 @register_action(&quot;悬停&quot;)）。 技术特点 三层架构： Agent 层：LLM 解析任务； Browser 层：Playwright 驱动浏览器； DOM Service 层：实时分析页面结构。 依赖 LLM 性能：执行速度受模型影响（如 GPT-4o 需 45 秒，Qwen 需 2-3 分钟）。典型场景 非技术人员编写自动化测试用例（用自然语言描述流程）； 快速构建 AI 客服机器人（自动操作网页解答用户问题）； 复杂工作流测试（如电商下单、ERP 系统审批）。⚖️ 三、Puppeteer 与 Browser-Use 的核心区别| 维度 | Puppeteer | Browser-Use ||—————-|—————————————-|————————————-|| 定位 | 底层浏览器控制库（Node.js） | AI Agent 框架（Python + LLM） || 核心技术 | DevTools 协议 + Chromium 控制 | Playwright + 大语言模型（如 GPT-4） || 脚本编写 | 需手写 JavaScript/TypeScript 代码 | 通过自然语言提示词生成操作流程 || 执行效率 | 毫秒级响应，适合高频任务 | 依赖 LLM 推理速度（45秒~3分钟） || 适用人群 | 开发者、测试工程师 | 测试工程师、非技术用户 || 扩展性 | 支持自定义插件和网络拦截 | 支持注册自定义动作和 DOM 分析规则 || 浏览器支持 | Chromium/Chrome 为主（实验性 Firefox）| 依赖底层引擎（如 Playwright 的多浏览器支持） |典型场景对比 登录功能测试： Puppeteer：需编写代码定位输入框、输入账号密码、点击按钮； Browser-Use：只需提示词：“输入账号 {user} 和密码 {pwd}，点击登录”。 跨页面操作： Puppeteer：需手动管理多标签页（browser.newPage()）； Browser-Use：自动处理标签页切换（如 “切换到最新标签页”）。 💎 四、如何选择？ 选 Puppeteer 若： 需要精细控制浏览器行为（如网络拦截、性能分析）； 项目对执行速度要求高（如爬虫或 CI/CD 流水线）； 团队具备 JavaScript/Node.js 开发能力。 选 Browser-Use 若： 希望用自然语言快速生成测试用例； 需结合 AI 理解复杂页面逻辑（如动态验证码处理）； 测试流程频繁变动，需低代码维护。 💡 工具链搭配建议：对于大型项目，可组合使用二者： Puppeteer 处理底层浏览器操作（如截图、爬取）； Browser-Use 负责 AI 驱动的端到端流程测试。 两者定位不同却可协同增效——Puppeteer 是精准的手术刀🔪，Browser-Use 则是智能的指挥家🎻。" }, { "title": "AI系列38:Playwright", "url": "/posts/ai-38/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-27 04:30:00 +0800", "snippet": "⚙️ 一、Selenium vs Playwright：核心区别 架构与通信机制 Selenium：基于W3C WebDriver协议，需通过浏览器驱动（如ChromeDriver）中转控制浏览器，通信开销较大。 Playwright：直连浏览器内核（Chromium/Firefox/WebKit）的DevTools协议，减少中间层，速度提升30%-50%。 等待机制与稳定性 Selenium：需手动配置显式/隐式等待（如WebDriverWait），否则易因元素未加载失败。 Playwright：内置智能等待，交互前自动检测元素可操作性（可见/可点击），减少30%因等待导致的用例失败。 多环境支持 跨浏览器：两者均支持主流浏览器，但Playwright通过统一API简化多浏览器测试代码。 移动端：Selenium需结合Appium；Playwright内置设备模拟（视口/地理位置/触摸事件）。 性能与并发 Selenium：依赖Selenium Grid实现分布式测试，配置复杂。 Playwright：原生支持并行测试，资源消耗降低40%，适合高频CI/CD流水线。 典型场景选型建议 选Selenium：需兼容IE或老旧浏览器、已有成熟Selenium生态的项目。 选Playwright：现代SPA应用测试、高频自动化流水线、跨浏览器一致性要求高的场景。 🤖 二、Browser-use vs Playwright：定位差异 Playwright：底层浏览器控制库，提供通用API驱动浏览器操作（点击/导航/截图等），适合开发自定义自动化脚本。 Browser-use：基于Playwright的AI Agent框架，专为LLM集成设计，核心功能包括： DOM智能理解：多维度分析元素可交互性（光标样式/ARIA角色/事件监听器）。 动作注册系统：开发者可扩展自定义操作（如@register_action(&quot;custom_action&quot;)）。 轻量生产集成：简洁三层架构（Agent→Browser→DOM Service），资源占用更低。总结：Browser-use是Playwright的上层封装，专注为AI Agent提供浏览器操作能力，适合快速构建自动化Agent；Playwright更通用，适合直接控制浏览器。 🧩 三、其他开源免费替代方案Puppeteer 定位：Node.js库，专注Chrome/Chromium无头控制。 优势：轻量级，适合爬虫、PDF生成、性能监控。 局限：仅支持Chromium系浏览器。🔍 四、工具对比速查表| 工具 | 核心优势 | 适用场景 | 开源协议 ||—————-|————————————-|——————————–|————|| Selenium | 多语言兼容、老旧浏览器支持、生态成熟 | 传统企业项目、IE兼容性测试 | Apache 2.0 || Playwright | 智能等待、跨浏览器一致性、高性能并发 | 现代SPA应用、CI/CD流水线 | MIT || Browser-use| AI Agent集成、DOM智能分析、生产就绪 | 自动化Agent开发、LLM控制浏览器 | MIT || Puppeteer | 轻量Chrome控制、爬虫/PDF生成 | 单浏览器自动化、数据提取 | Apache 2.0 |💎 五、选型建议 新手入门：优先尝试Playwright（代码简洁）。 企业级测试平台：Selenium（兼容旧系统）+ Playwright（核心链路优化）并行。 AI自动化开发：Browser-use（快速构建Agent）或Playwright（深度定制）。 爬虫/轻量任务：Puppeteer（Chrome场景）或Playwright（多浏览器需求）。" }, { "title": "AI系列37:Browser Use浏览器自动化", "url": "/posts/ai-37/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-26 04:30:00 +0800", "snippet": "Browser Use 是一个开源的 Python 框架，专为将大型语言模型（LLM）与浏览器自动化结合而设计，让 AI 代理（Agents）能像人类一样操作网页、执行交互任务。它基于 Playwright 浏览器自动化引擎，结合 LangChain 等 AI 框架，实现智能化、动态化的网页操作能力。以下是其核心功能及典型应用场景的梳理：一、Browser Use 的核心功能| 功能类别 | 具体能力 | 技术基础 ||——————–|—————————————————————————–|———————————-|| 浏览器自动化 | 模拟人类操作：点击、输入、滚动、导航、多标签页管理 | Playwright 引擎 + 异步 I/O 架构 || 多模态感知 | 视觉识别（截图分析）+ HTML 结构提取，全面理解动态网页内容 | 集成多模态 LLM（如 GPT-4o） || 任务规划与控制 | 支持复杂多步骤任务（如订票全流程），支持错误自动重试与策略调整 | LangChain 任务规划 + 自我修正机制 || 扩展性与集成 | 支持自定义动作（如保存文件、推送数据库）；兼容主流 LLM（GPT-4、Claude、DeepSeek 等） | Pydantic 模型注册 + LangChain 适配器 || 操作追溯与复用 | 记录用户操作路径（如 XPath），支持动作序列回放与调试 | 操作日志 + 元素定位追踪 |二、典型应用场景 自动化业务流程 在线订票/购物：自动搜索航班、比价、填写信息并完成支付（如 Google Flights 订票）。 求职申请：在招聘网站自动投递简历，筛选匹配职位并提交申请。 数据采集与分析：抓取商品价格、评论、房产信息等，输出结构化数据（JSON/CSV）。 开发与测试 网页自动化测试：模拟用户行为测试页面功能与性能，覆盖登录、表单提交等场景。 动态内容监控：定时检测新闻、博客或电商页面更新，触发通知。 智能助手与效率工具 个性化代理：结合 LLM 实现智能购物助手（比价、下单）、文档自动生成（如 Google Docs 转 PDF）。 企业自动化：CRM 数据录入、竞品监控、线索生成等。 三、技术架构与优势 底层技术栈：Python 3.11+、Playwright（浏览器控制）、LangChain（AI 代理框架）、异步 I/O（高并发）。 核心创新： 视觉+HTML 双模态解析：突破传统爬虫对动态渲染内容的限制。 多代理并行：独立上下文管理，支持同步处理多任务。 部署灵活：支持本地运行或云端托管，提供 Gradio 测试界面快速验证任务。 💡 局限与注意：对验证码等强交互场景仍需人工干预；依赖浏览器版本兼容性，需定期更新适配。" }, { "title": "AI系列36:垂直类agent开发指南", "url": "/posts/ai-36/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-25 04:30:00 +0800", "snippet": "结合QQ浏览器“AI高考通”和Lovart设计Agent的实践案例：一、需求定义与业务建模 场景拆解与痛点分析◦ 采用 5W1H分析法 明确服务场景：如高考场景需明确用户（考生/家长）、核心任务（志愿填报/备考）、触发条件（分数输入/选科限制）◦ 价值量化模型：测算ROI，例如“AI高考通”通过替代人工咨询节省45万元/年人力成本，同时提升服务效率 能力边界定义◦ 任务粒度划分：区分Agent自主决策与需人工介入的边界。例如Lovart将设计拆解为创意生成（AI自主）与细节调整（人工干预）◦ 工具调用规划：建立工具清单（如志愿填报需调用院校数据库、性格测评API），类似Lovart集成Flux Pro、Kling AI等模型二、技术架构设计 分层架构搭建graph TDA[感知层] –&amp;gt; B[推理层]B –&amp;gt; C[执行层]C –&amp;gt; D[反馈学习层]◦ 感知层：多模态输入处理，如高考场景需兼容文本（分数）、表格（选科）、文件（政策文档）◦ 推理层：领域大模型+知识图谱融合，例如医疗Agent需集成ICD-10疾病编码体系◦ 执行层：API编排引擎，参考“AI高考通”动态调度院校对比、志愿梯度生成工具 开发框架选型场景类型 推荐框架 典型案例轻量级工具调用 LangChain + Function Calling 天气查询助手复杂任务流 Autogen/CrewAI Lovart设计工作流企业级系统 LangGraph + LlamaIndex 金融风控Agent三、数据工程实施 知识库构建◦ 多源数据整合：如“AI高考通”融合9年高考真题、2800+院校数据，结构化处理为DAG（有向无环图）◦ RAG增强检索：采用向量数据库（如Milvus）存储知识条目，结合衰减权重模型实现长上下文理解 标注与校验◦ 领域标注规范：医疗场景需遵循ICD-10，法律场景需关联法条与判例◦ 合成数据增强：小样本场景使用GAN生成故障检测热像图，数据多样性提升40%四、核心功能开发 动态任务编排◦ DAG引擎：Lovart通过Claude 3.7微调模型自动生成设计流程，支持多工具协同（如先调用GPT-Image生图，再触发Kling AI生成视频）◦ 容错机制：三级Fallback策略（重试→切换工具→结构化报错），参考金融风控Agent的异常处理逻辑 多模态交互设计◦ 混合推理机制：结合规则引擎（如志愿填报的选科限制）与深度学习模型（性格倾向预测）◦ 可视化交互：类似Lovart的画板系统，支持图层编辑、文字分离等PS级操作五、测试与部署 鲁棒性验证◦ 压力测试：使用Locust模拟千级并发，确保响应时间&amp;lt;150ms（参考金融系统标准）◦ 对抗训练：基于FGSM算法生成恶意输入，降低攻击成功率65% 部署策略◦ 渐进式发布：先内测种子用户（如“AI高考通”依托QQ浏览器4亿用户池）◦ 联邦学习优化：医疗场景通过边缘节点持续训练，模型AUC每周提升0.5-0.8%六、迭代与商业化 持续学习机制◦ 在线学习：收集用户反馈数据（如志愿填报的最终录取结果），通过KL散度监控数据分布变化◦ 生态共建：开放API接入第三方工具（如Lovart支持Figma插件），构建开发者生态开发者工具包推荐 低代码平台：Coze（字节跳动）、Dify（国内开源）快速验证MVP 多Agent框架：CrewAI（任务流水线）、Autogen（角色化协作） 性能优化工具：ONNX模型量化、Rust实现核心逻辑（工业场景延迟&amp;lt;50ms） 通过以上路径，开发者可在3-6个月内完成从0到1的垂类Agent构建。建议优先选择医疗、教育、设计等ROI明确的场景。" }, { "title": "AI系列35:Claude 4发布", "url": "/posts/ai-35/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-23 04:30:00 +0800", "snippet": "Anthropic正式发布Claude 4系列模型：Claude Opus 4和Claude Sonnet 4。最强编程AI又要易主了！" }, { "title": "AI系列34:能写PPT的Agent来了，昆仑万维发布天工超级智能体", "url": "/posts/ai-34/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-21 06:30:00 +0800", "snippet": "昆仑万维发布天工超级智能体：基于deep research的“AI版office”天工超级智能体由5个专家智能体和1个通用智能体组成，支持一站式生成文档、PPT、表格、网页、播客及音视频等多模态内容。其deep research能力在GAIA榜单上排名全球第一，超过OpenAI Deep Research和Manus。昆仑万维已将Deep Research Agent框架开源github.com/SkyworkAI/DeepResearchAgent文档、PPT、表格生成能力封装为MCPhttps://mcp.so/server/skywork-super-agents/Skywork-ai国内体验网址 https://www.tiangong.cn/" }, { "title": "AI系列33:Flow AI剪辑工具", "url": "/posts/ai-33/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-21 05:30:00 +0800", "snippet": "在2025年5月20日的Google I/O开发者大会上，谷歌正式推出了全新AI驱动的视频剪辑工具Flow，专为影视创作者打造。Flow整合了谷歌最先进的生成式AI模型——Veo3、Imagen4和Gemini，旨在通过自然语言提示和模块化工作流，简化视频创作过程，助力专业人士和初学者实现电影级视觉叙事。low的核心在于其结合了Veo3的视频生成、Imagen4的图像生成以及Gemini的自然语言处理能力。用户可以通过简单的文本提示或上传自定义素材，生成时长8秒的高质量AI视频片段。Veo3首次引入原生音频生成功能，支持生成环境音效和角色对话，显著提升视频的沉浸感与真实感。https://labs.google/flow/about" }, { "title": "AI系列32:谷歌编程助手Jules", "url": "/posts/ai-32/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-20 06:30:00 +0800", "snippet": "谷歌 AI 编程助手 Jules 全球公测，挑战 GitHub Copilot 和 OpenAI 的 CodexGoogle Labs 推出实验性 AI 编程助手 Jules，能根据任务描述自动生成代码，将复杂任务分解为多个步骤，逐步推进解决方案。可以理解并导航代码库，自动运行单元测试以确保代码更新的正确性，根据开发者反馈自适应调整方案。" }, { "title": "AI系列31:Rork手机应用开发", "url": "/posts/ai-31/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-20 06:00:00 +0800", "snippet": "Rork 是一款基于 AI 的移动应用开发工具，旨在帮助用户快速生成跨平台（iOS/Android）的完整移动应用： AI 驱动开发：用户通过自然语言描述需求（如“创建一个类似 Airbnb 的应用”），Rork 会自动生成基于 React Native 的代码和界面。 模板化场景：提供常见应用类型的模板（如社交、电商、健康类应用），大幅降低开发门槛。 零代码/低代码：适合非专业开发者或小型团队快速实现 MVP（最小可行产品），无需深入 React Native 技术细节。 跨平台支持：生成的代码兼容 iOS 和 Android，可直接部署。典型应用场景：快速开发原型、初创项目试水、标准化功能（如社交 Feed、预订系统、计时器）的搭建。Rork 与 Cursor 的区别 维度 Rork Cursor 定位 垂直领域工具：专注于移动应用生成 通用开发工具：AI 增强的代码编辑器（类似 VS Code） 核心技术 基于 AI 的 React Native 代码生成 基于 AI 的代码补全、调试、重构（支持多语言/框架） 目标用户 非开发者、产品经理、初创团队 程序员、开发者（需编码能力） 输出结果 直接生成完整应用（前端+基础逻辑） 生成代码片段或辅助编写代码（需自行整合架构） 使用场景 快速构建标准化移动应用 开发任意类型软件（网页、桌面、移动、后端等） 技术栈限制 仅限 React Native 生态 无限制（支持 Python/JS/Java/Go 等） 如何选择？• 选 Rork：需快速实现一个移动应用 MVP，且功能属于常见类型（如社交、工具、电商），无需复杂后端逻辑。• 选 Cursor：需深度定制开发（如复杂算法、独特交互），或项目涉及多技术栈（如网页+移动端+数据库）。二者甚至可以结合使用：用 Rork 生成基础框架，再用 Cursor 补充复杂功能代码。https://blog.csdn.net/winniezhang/article/details/146882734https://www.99aicreator.com/blog/aire-hua-4/aixie-appshen-qi-2025-rork-ai-shi-ce-143" }, { "title": "商品选购系列20:引体向上室内单杠", "url": "/posts/shopping-20/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2025-05-20 04:35:00 +0800", "snippet": "🚪 一、免打孔安装类（适合不想破坏墙面、追求快速安装的用户）这类单杠主要利用门框或墙面压力固定，安装简便，特别适合租房或不想打孔的家庭。 迈康（MIKING） 代表产品：4001F单双杠 特点：外八支撑结构设计，防侧翻效果好；承重能力强（实测达200kg以上），适合全家使用；配件丰富，如辅助吊环、悬臂带，尤其适合儿童增高训练或成人进阶力量训练。 价格：200–300元（性价比高） 京东京造 代表产品：免打孔室内单杠 特点：6重锁紧结构，底座加宽至29cm，稳固性强；宽度可调（78–140cm），适配不同门框；承重高达400kg，适合体重较大用户。 价格：150–250元 hometfit 代表产品：免打孔单杠+水平仪套装 特点：附带水平仪确保安装精准；握把防滑设计，支持300kg承重；适合注重安装精度和安全性的用户。 价格：约550元（含跨境运费） 🔧 二、墙体打孔固定类（追求极致稳固，适合长期使用）这类产品需要打孔安装，但稳固性和承重能力更强，适合高强度训练或专业健身者。 卓牌（ZHUOPAI） 代表产品：6代墙装单双杠 特点：加厚钢材质，承重100kg；设计简洁，专为强化上肢肌肉；适合对稳定性要求高的用户。 价格：200–350元 施耐德（SCHNEIDER） 代表产品：可调高单杠（166–216cm） 特点：高度灵活调节，适合不同身高家庭成员；结构加厚加固，兼顾儿童训练与成人力量提升。 价格：300元左右 🏋️ 三、多功能综合训练类（适合空间充足、希望一机多用的用户）这类单杠通常为落地式，除引体向上外还支持双杠臂屈伸、俯卧撑等多种训练。 骏动力（JUN POWER） 代表产品：CJ-5005单双杠 特点：可折叠设计（展开195cm→折叠128cm），节省空间；支持200kg承重；含单杠、双杠、举重床多功能，适合小型家庭健身房。 价格：面议（需厂家咨询，约800–1500元） 麦瑞克（MERACH） 代表产品：加高落地单双杠架 特点：八字底座防侧翻；可调节高度，适配成人/儿童；结合智能APP训练课程，适合科技健身爱好者。 价格：400–600元 flamingice 代表产品：落地综合训练器 特点：免打孔+模块化设计，支持引体向上、仰卧起坐等多动作；带水平仪确保安装平衡，适合多功能家庭健身角。 价格：500–700元 📊 选购要点快速参考表| 需求场景 | 推荐品牌 | 核心优势 | 安装方式 | 参考价 ||——————–|———————–|——————————————|—————|—————|| 免打孔/租房党 | 迈康、京东京造 | 快速安装、防侧翻设计、高承重 | 压门框/墙面 | 150–300元 || 高强度/长期使用 | 卓牌、施耐德 | 打孔固定、超强稳定性 | 墙体打孔 | 200–350元 || 多功能/全家训练 | 骏动力、麦瑞克 | 可折叠、多动作支持、智能互联 | 落地式 | 400–1500元 || 精准安装/防滑需求 | hometfit | 水平校准、防滑握把 | 压门框 | 约550元 |💎 总结建议 小空间/便捷优先 → 选迈康、京东京造，安装快、承重强； 专业训练/长期使用 → 选卓牌或施耐德，打孔固定更稳固； 多功能家庭健身房 → 骏动力或麦瑞克，一机满足多样训练。实际选购时，建议结合安装条件（如墙面类型、门框宽度）、预算以及训练目标（如儿童增高、成人增肌）综合考量。若需具体型号参数或用户实测反馈，可进一步查看各品牌官网或电商详情页。" }, { "title": "AI系列30:Vibe Coding", "url": "/posts/ai-30/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-19 06:00:00 +0800", "snippet": "Vibe Coding（氛围编程）是2025年由OpenAI联合创始人Andrej Karpathy提出的一种新型编程范式，其核心在于通过自然语言指令驱动AI生成代码，开发者无需深入理解底层逻辑即可快速实现功能：一、特点 自然语言驱动开发者用口语化描述需求（如“创建带购物车功能的电商网站”），AI根据提示生成对应代码。这种模式下，编程语言语法和算法细节由AI处理，开发者更关注功能目标和用户体验。 黑箱式开发与传统编程不同，开发者不要求完全理解AI生成的代码，而是通过测试结果和反馈迭代优化。正如Karpathy所调侃：“这不是真正的编程——我只是看看、说说、运行、复制粘贴，但结果能用就行”。 快速原型与迭代从需求到代码生成的周期大幅缩短，初创公司案例显示，部分团队95%的代码由AI生成，开发效率提升10倍以上。 二、工作流程 需求描述用自然语言或结合图像/语音等多模态输入定义功能（如“开发一个天气查询应用”）。 AI生成代码LLM（如GPT-4、Gemini）自动生成HTML/CSS/JavaScript或Python代码，甚至跨语言和框架适配。 测试与反馈运行代码后，通过错误日志或视觉反馈调整提示词（如“界面太单调，增加动态效果”），AI重新生成优化版本。 部署维护最终代码仍需人工审查安全性和性能，但长期维护可通过AI自动化更新。三、与传统编程的对比| 维度 | Vibe Coding | 传统编程 ||—————-|—————————–|—————————|| 开发速度 | 分钟级生成，适合快速原型 | 依赖手动编码，周期长 || 技术门槛 | 非程序员可参与 | 需掌握编程语言和算法 || 代码理解 | 接受“黑箱”结果 | 深度控制逻辑和结构 || 调试难度 | 依赖AI修复，挑战性高 | 开发者直接定位问题 |四、优缺点分析优势• 降低创新成本：领域专家可直接将想法转化为软件，无需技术中间层；• 加速产品验证：初创公司用Vibe Coding开发MVP，市场响应速度提升200%；• 解放创造力：开发者专注架构设计，而非语法细节。争议与风险• 代码质量不稳定：AI可能生成冗余或漏洞代码，需严格测试；• 可维护性差：缺乏文档和结构规范，长期项目易失控；• 技能空心化：过度依赖AI可能导致程序员基础能力退化。五、主流工具与应用场景 工具推荐• Cursor：集成GPT-4，支持多轮对话生成代码（ARR已达3亿美元）； • Trae：内置110+ MCP插件，可结合Figma设计稿生成交互式页面； • Apifox MCP：自动同步API文档，提升团队协作效率。 适用场景• 快速开发MVP或原型； • 非技术背景者创建工具（如数据分析、自动化脚本）； • 跨技术栈项目（如全栈开发中同步生成前后端代码）。 六、未来展望Vibe Coding正推动编程从“技术密集型”向“意图导向型”转变。随着MCP协议和Agent技术的发展，未来可能出现全自动代码工厂，开发者仅需定义业务目标，AI自主完成需求分析、编码和部署。不过，如何平衡效率与代码质量，仍是这一范式普及的关键挑战。如需体验Vibe Coding，可从Cursor或Trae入手，结合详细提示词逐步迭代。" }, { "title": "商品选购系列19:switch游戏怎么买", "url": "/posts/shopping-19/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2025-05-19 04:35:00 +0800", "snippet": "关于新买Switch是否有内置游戏、是否需要额外购买卡带，以及如何辨别卡带真伪的问题，我整理了以下关键信息：🎮 一、新Switch是否有内置游戏？ 初代Switch（OLED/续航版/Lite） 无免费内置游戏：新机开机后仅有系统菜单和基础应用（如eShop、相册），需自行购买游戏。 例外：部分限定版主机（如《动森》同捆机）会附带数字版游戏，但包装会明确标注。 Switch 2（2025年6月发售） 附带付费游戏《欢迎之旅》（10美元）：用于展示新机功能（如摄像头、GL/GR按键），但需额外购买配件才能100%通关（如摄像头、Pro手柄、4K电视）。 无免费游戏：其他游戏仍需单独购买。 💡 总结：无论新老机型，99%的Switch开机后都需自行购买游戏，切勿轻信商家“内置游戏”宣传。💽 二、游戏获取方式：卡带 vs 数字版| 方式 | 特点 | 适合人群 ||—————-|————————————————————————–|————————–|| 实体卡带 | 即插即玩、可转卖回血、收藏价值高；但需携带，切换游戏麻烦 | 预算有限、喜欢收藏的玩家 || 数字版 | 无需换卡、常打折（墨西哥/巴西服低至3折）；但占用存储空间，无法转卖 | 追求便捷、爱囤游戏的玩家 || 卡带+数字 | 常用游戏买数字版，大作买实体卡（玩完可回血） | 多数玩家的性价比选择 |存储建议： 初代Switch：至少配128GB MicroSD卡（OLED版内置64GB仍不足）。 Switch 2：内置256GB，但《赛博朋克2077》需64GB，建议搭配microSD Express卡扩展（支持2TB）。🔍 三、辨别正版卡带的关键方法（附对比表）假卡带不仅影响体验，还可能损坏主机。以下是正版 vs 盗版的细节对比： 鉴别点 正版特征 盗版特征 包装盒     - 切口 港日版：上下双切口（上小下大） 可能无切口或切口位置错误 - 圆点 背面圆点平整 圆点凸起 - 连接处 四角有小转折 无转折或粗糙 - 水口痕迹 底部边缘有注塑口痕迹 无痕迹或痕迹错位 - 印刷字体 清晰，“i”点为方形 模糊，“i”点为圆形 - 编码与Logo 印有“HAC-009”和任天堂Logo 无编码/Logo或印刷粗糙 卡带本体     - 金手指 全新卡带无划痕 可能有磨损（二手翻新） - 味道 表面有苦涩味（任天堂防舔涂层） 无味或化学味 - 序列号 卡带标签序列号与盒内标签一致 不一致或缺失 其他验证手段： 运行测试： 插入主机后能正常启动、领取金币（新游戏首次运行可领）。 假卡可能无法启动或频繁报错。 渠道避坑： 优先选官方授权店（如任天堂官网、亚马逊自营）。 淘宝店慎买：部分店铺用国产盗版盒包装二手裸卡，冒充全新正版。 警惕低价陷阱：如《塞尔达》卡带市场价¥300，低于¥250大概率有问题。 ⚠️ 四、新手避坑指南 拒绝国行卡带：仅限国行主机使用，无法联机国际服/买DLC。 Switch 2卡带注意： 部分新游戏卡仅含下载码（无实体游戏），购买前看清说明。 兼容老Switch卡带，但画质无增强。 验机同步做： 主机序列号三码合一（包装盒+机身+系统设置）。 首次开机必有红色Logo（“开机红”）。 💎 终极建议 游戏购买：首选实体卡带（回血灵活），搭配墨西哥服数字版蹲折扣。 卡带验真：牢记“切口-圆点-编码-苦味”四步法，拒收可疑包装。" }, { "title": "商品选购系列18:switch有哪些推荐游戏，怎么买", "url": "/posts/shopping-18/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2025-05-18 04:35:00 +0800", "snippet": "🎮 一、Switch经典游戏推荐1. 开放世界冒险类（适合喜欢探索、解谜、沉浸剧情的玩家） 《塞尔达传说：旷野之息》：重新定义了开放世界的标杆，自由度高、细节丰富，从攀山涉水到战斗解谜，每一处都充满惊喜。后续的《王国之泪》继承了这一精神，在建造和物理互动上更进一步。 《超级马里奥：奥德赛》：把箱庭探索和平台跳跃完美结合，帽子附身系统让玩法充满创意，关卡设计堪称教科书级别。2. 多人派对类（聚会、家庭娱乐首选） 《马里奥赛车8：豪华版》：上手简单但精通难，道具互坑、赛道设计精妙，支持本地/在线最多12人联机，是Switch上长盛不衰的派对神器。 《任天堂明星大乱斗：特别版》：角色阵容庞大（涵盖任天堂经典+第三方联动），易上手难精通，本地乱斗欢乐十足，线上竞技也很有深度。3. 休闲治愈类（慢节奏、经营、情感向） 《集合啦！动物森友会》：主打无人岛建设与社交，按现实时间推进的节奏很适合每天玩一会儿，DIY、串门、季节活动都充满人情味。 《星露谷物语》：如果你喜欢农场经营+RPG元素，这款独立神作在Switch上表现优异，钓鱼、挖矿、恋爱结婚系统一应俱全。4. 硬核动作类（挑战操作与反应） 《空洞骑士》：类“银河恶魔城”代表作，画风暗黑精致，战斗流畅、地图庞大，难度较高但成就感十足。 《哈迪斯》：Roguelike动作游戏标杆，希腊神话背景+快节奏战斗，剧情和美术风格都极为出色。5. 独立游戏精品（小而美的高分作品） 《Hades II》：续作延续前作口碑，2025年Switch独占首发，销量已破300万，战斗爽快叙事深刻。 《丝之歌》：粉丝期待多年的《空洞骑士》精神续作，Metroidvania玩法+精美手绘风，解谜与战斗兼具。💳 二、如何购买Switch游戏购买渠道主要分为实体版和数字版，各有优缺点：1. 实体版（卡带） 优点：可转卖回血、收藏价值高、不占主机存储空间。 购买渠道： 电商平台（淘宝、京东）：注意比价，新作首发可能溢价（如《塞尔达》曾炒至460元）。 海淘（亚马逊、eBay）：价格稳定但物流慢，适合不急于游玩的玩家。 小福利：实体卡带插入后可领取“任天堂点数”，用于eShop抵扣或兑换礼品。2. 数字版（eShop下载） 优点：切换游戏方便、常有限时折扣、无需换卡。 购买步骤： 注册任天堂账号（官网操作），选择eShop区域（如日服、美服等）。 进入主机eShop，用信用卡（VISA/MasterCard）、PayPal或点卡充值余额后购买。 省钱技巧： 跨区购买：切换账号区域至低价区（如墨西哥、南非），同一游戏价格可能便宜30%~50%。 关注折扣：eShop常有限时促销，独立游戏折扣力度尤大（如《空洞骑士》墨西哥区约53元）。 任天堂会员优惠：Nintendo Switch Online会员享专属折扣及免费FC/N64经典游戏。 3. 二手交易与合购 二手实体卡带：闲鱼、转转等平台可淘到低价卡带，注意检查卡带完好性。 数字版合购：与信任的朋友共享账号购买游戏（需谨慎，有封号风险）。💎 三、购买建议与小贴士 新手入门组合：建议优先入手《旷野之息》+《马车8》+《动森》，覆盖单机、多人、休闲三大需求。 低价区操作注意：频繁切换账号区域可能导致余额清零或被锁，建议专号专用于低价区（如墨西哥账号）。 网络优化：访问海外eShop时，使用UU加速器等工具可提升稳定性，避免下载失败。 语言确认：跨区购买前需确认游戏是否支持中文（尤其日区游戏）。💬 总结Switch的魅力，在于它既有《塞尔达》《马里奥》这样撑起口碑的顶级大作，又有数不清的独立精品填充日常乐趣。如果你是刚入坑，建议从那些经历过时间考验的经典开始玩起；至于购买，善用低价区+折扣活动，能帮你省下不少预算。" }, { "title": "AI系列29:最强AI编程助手：OpenAI 发布 Codex 智能体", "url": "/posts/ai-29/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-17 06:00:00 +0800", "snippet": "OpenAI 今天（5 月 17 日）宣布推出基于云端的 AI 智能体 Codex，专注于自动化软件开发，涵盖修复错误和实现功能等任务，官方希望该智能体可以开创代码编写的新范式。Codex 基于 codex-1 模型运行，而后者基于 o3 模型，是专门针对代码编程优化的衍生模型。" }, { "title": "网络协议系列4:ed2k链接", "url": "/posts/protocol-4/", "categories": "网络协议系列", "tags": "网络协议系列", "date": "2025-05-17 05:00:00 +0800", "snippet": "ed2k://|file|【人人電影网：www.rrdyw.net】]夜行者.Nightcrawler.2014.BD080P.中英双字.mp4|5360338094|944FF739AD086BB53E7E98F28F4AEA6B|h=M3ZLBKWPVLIV5UY437KW737PNG7ORMC4|/eD2k链接是eDonkey网络协议中用于标识和传输文件的标准化URI格式，其结构设计兼顾了文件唯一性验证和多源下载支持：所有eD2k链接均以 ed2k:// 开头，表示使用eDonkey协议处理链接。链接主体通过竖线符号 | 分隔不同参数，通用格式为：ed2k://|&amp;lt;类型&amp;gt;|&amp;lt;参数1&amp;gt;|&amp;lt;参数2&amp;gt;|...|/二、核心参数类型及功能 文件链接（File Link）最常见的类型，用于标识单个文件： ed2k://|file|&amp;lt;文件名&amp;gt;|&amp;lt;文件大小&amp;gt;|&amp;lt;文件哈希&amp;gt;|/ • 文件名：原始文件名（可能包含URL编码的特殊字符）。 • 文件大小：以字节为单位的精确数值（如3420557312表示约3.42GB）。• 文件哈希：基于MD4算法生成的128位哈希值，用于唯一性校验。例如： ed2k://|file|cn_windows_7_ultimate_x64.iso|3420557312|B58548681854236C7939003B583A8078|/扩展功能参数：• 来源地址：添加服务器或主机来源提升下载效率： /|sources,&amp;lt;IP:端口&amp;gt;|/ 或 /|sources,&amp;lt;主机名:端口&amp;gt;|/例如：ed2k://|file|...|/|sources,202.89.123.6:4662|/。• 根哈希（Root Hash）：用于AICH错误校验： |h=&amp;lt;根哈希&amp;gt;|/如：h=SQ7LUTYUSMDBP2TVE2M7T6VUBLU324KF。• HTTP来源：直接通过HTTP协议补充下载源： |s=&amp;lt;HTTP地址&amp;gt;|/例如：s=http://example.com/file.zip。 服务器链接（Server Link）用于连接特定eDonkey服务器： ed2k://|server|&amp;lt;IP&amp;gt;|&amp;lt;端口&amp;gt;|/ 示例：ed2k://|server|207.44.222.51|4242|/。 服务器列表链接（Server List Link）批量导入服务器列表文件（server.met）： ed2k://|serverlist|&amp;lt;HTTP地址&amp;gt;|/ 如：ed2k://|serverlist|http://example.com/server.met|/。 其他类型• 节点列表链接（Nodes List）：导入Kad网络节点文件nodes.dat： ed2k://|nodeslist|&amp;lt;HTTP地址&amp;gt;|/• 好友链接（Friend Link）：通过用户哈希添加好友（仅部分客户端支持）： ed2k://|friend|&amp;lt;用户名&amp;gt;|&amp;lt;用户哈希&amp;gt;|/三、哈希算法机制eD2k哈希采用 MD4算法变体： 文件被分割为多个9500KB的块（最后一个块可能更小）。 对每个块计算MD4校验值，生成哈希列表。 将哈希列表再次进行MD4运算，生成最终根哈希。注：小于9500KB的文件哈希直接等于其MD4值。四、应用场景与兼容性eD2k链接广泛用于eMule、aMule、迅雷等客户端，支持：• 多源并行下载：通过多个用户或服务器分块传输。• 断点续传：依赖哈希值验证文件完整性。" }, { "title": "商品选购系列17:switch与switch2怎么选", "url": "/posts/shopping-17/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2025-05-17 04:35:00 +0800", "snippet": "🎮 一、核心差异全面对比 对比维度 Switch（OLED版） Switch 2 性能 基础性能（0.4 TFLOPS） 10倍提升（3 TFLOPS），支持光追/DLSS 屏幕 7英寸 OLED 720P/60Hz 7.9英寸 LCD 1080P/120Hz，支持HDR/VRR 便携性 轻巧（约420g），易携带 稍重（尺寸更大），便携性略降 游戏兼容性 仅支持Switch游戏 向下兼容Switch，部分游戏可付费升级画质 手柄 滑轨设计，易漂移 磁吸+霍尔摇杆，防漂移，新增C键语音 续航 4.5-9小时（OLED版） 2-6.5小时（性能更强耗电高） 价格 约¥1700（日版OLED） 约¥2428（日版基础款）/¥3399（多语言版） 游戏生态 成熟，5000+款游戏可选 初期阵容较弱，依赖第三方移植（如《艾尔登法环》） 🛒 二、新手选购建议：根据需求对号入座1. 推荐选择 Switch（老款）的情况： 预算有限：不想一次性投入太多，¥1700 左右就能买到成色不错的 OLED 版，性价比很高； 游戏尝鲜为主：想先体验《塞尔达传说》《宝可梦》等经典，老机型完全够用，且二手卡带价格很友好； 注重便携：经常通勤或旅行，Switch Lite（¥1100左右）或 OLED 版更轻便、续航也更久； 怕折腾：老机型系统成熟、问题少，适合不想为兼容性或初期优化分心的玩家。2. 推荐选择 Switch 2 的情况： 追求画质/帧率：想以更高清、更流畅的画面玩《荒野大镖客2》《赛博朋克2077》等大作； 打算长期持有：计划未来5-6年都用它玩游戏，新机生命周期更长； 喜欢尝鲜新功能：对手柄语音聊天、磁吸设计、4K输出等新特性感兴趣； 能接受溢价和等待：首发期价格可能被炒高，且需等3-6个月价格回落、游戏阵容充实。⚠️ 三、避坑提醒：新手必看 版本选择： 无论新老机，日版最省心（插头通用，无锁区）； 避开国行版（游戏少，无法联机国际服）。 购买渠道： Switch 2 首发期警惕黄牛加价，建议通过任天堂官网或授权店预订； 老款 Switch 选二手时注意“三码合一”、无维修记录。 配件建议： 必入：屏幕膜、Pro手柄（提升TV模式体验）； 按需选：MicroSD卡（老机至少128GB，新机建议选高速Express卡）。 💎 最终建议 性价比优先+便携需求 → 选 Switch OLED 或 Lite：用更低的成本体验任天堂精髓，游戏多且便宜，特别适合学生党或休闲玩家； 画质/未来性优先+预算充足 → 选 Switch 2：为光追、4K输出和未来独占大作（如《马力欧赛车世界》）买单，但建议等2025年底价格稳定再入手。 作为第一台主机，更推荐从Switch OLED开始：它的游戏库已经足够丰富，价格合理，能让你用最小成本确认自己是否喜欢任天堂的游戏风格。如果玩上一阵子你发现自己沉迷其中，再升级到Switch 2也完全来得及，还能避开首发期的溢价和试错风险。最后选港版即可，免去需要修改路由器5g信道的问题，只是充电头需要转接一下而已。一样可以设置简中，也可以登录墨西哥，巴西区买游戏。" }, { "title": "商品选购系列16:游戏机", "url": "/posts/shopping-16/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2025-05-16 05:35:00 +0800", "snippet": "游戏市场三足鼎立，索尼排第一第四代的PlayStation自问世起，在北美、日本销量一直高企，售出超过1亿台，市场占有率达五成索尼PlayStation发展至今已经到了第五代，PS5给人的第一印象是机身巨大，高度和重量都达到了系列之最。庞大的机身内是不俗的硬件配置，PS5搭载一颗3.5GHz的8核Zen2 CPU，以及一个10.28 TFLOPS算力的显卡，存储从PS4 的机械硬盘升级为固态硬盘，开机和进入游戏的时间都缩减到了大约10秒左右，相比PS4 Pro算是质的飞跃目前PlayStation国行机锁服不锁区，也就是说一般情况下玩家只能登陆中国大陆的服务器购买游戏，需要玩海外版游戏的话，只能使用游戏光盘。2，任天堂Switch在2017年3月首发Switch lite则完全改变了整个机体的外形，从多模式简化为了单一的掌机模式，机身尺寸仅比手机大上些许，采用了更高效的新版芯片，续航时间也适当延长了。游戏阵容上，Switch lite同样可以玩Switch平台上的大作，仅仅削减了很小一部分游戏，价格在Switch系列中最为低廉任天堂还推出Switch OLED版，对比续航版，最大的区别就是换用了7英寸OLED屏幕Switch拥有国行版、日版、美版、港版可选，国行版由腾讯代理，网络稳定，使用微信登录，锁服但不锁区，可运行国行及海外卡带，但使用海外卡带时，无法下载付费扩展包，也无法联网游戏，且国行商店内可购买的数字版游戏稀少。日版、美版、港版Switch可以运行海外任意地区卡带，可购买的数字版游戏丰富齐全，但由于服务器在海外，下载更新速度较慢。海外版玩家注册账号后，一个账号对应一个地区的Eshop，不同的是账号地区可以更改，因此无需注册多个账号，但是更改地区会清空账号里面的余额。3，微软在电子游戏机第七世代才加入战场它的游戏主机一直以性能占优，无论是最初的Xbox 360还是后来的Xbox One，性能都超越索尼、任天堂同时代机型目前在售的Xbox有两款机型，Xbox Series X和Xbox Series S。Xbox Series X主打4K 120FPS和1TB的定制高速SSD，搭载一颗8核心AMD Zen2 CPU，GPU每秒有12万亿次浮点运算能力，对比前一代产品Xbox One X，Xbox Series X的CPU和GPU性能分别提升了4倍和2倍，并且首次支持杜比全景声。预算不足的话，售价仅2000元出头的Xbox Series S不失为体验次世代游戏的入门首选，它采用了Xbox Series X同款CPU，同样支持光追，3.6GHz的主频甚至比PS5更强，略低于Xbox Series X的3.8GHz，但Xbox Series S的GPU缩水严重，计算单元从Xbox Series X的52组降到20组，运行内存也减少到10GB。购买Xbox Series S前需要注意的是，它的固态硬盘容量仅有512G，也没有搭载光驱的版本，能同时安装的游戏非常有限。4，Valve这个名字绝对不陌生，半条命、CS、DOTA2等在游戏史上意义重大的作品皆出于它手，Steam平台更是广大PC游戏玩家的聚集地，拥有大量的游戏资源和完善的成就、创意工坊系统。凭借这些优势，Valve的游戏掌机Steam Deck一经推出就吸引了大量用户购买Steam Deck的可玩游戏均基于Steam游戏库，时至今日数量已经破万，国行系统是无法登录海外服务器的，海外服务器如日本服务器、香港服务器等，也就是是不锁区、锁服；锁区是指一个地区的游戏卡带或游戏光盘，只能用对应地区的游戏机读取，锁服则是只针对中国大陆地区的销售策略，就是国行机只能登上中国的服务器，无法登陆其他地区的服务器。🔢 一、任天堂主流游戏机型号一览1. Nintendo Switch 系列（当前主力机型） Switch 标准版（初代） 特点：2017年首发，支持TV/桌面/掌机三模式，720P LCD屏，续航约3-6小时。 现状：已停产，二手市场流通较多，不推荐新购。 Switch 续航增强版（2019年升级） 升级点：芯片制程优化，续航提升至4.5-9小时（如《塞尔达传说》从2.5h→5.5h）。 价格：约1700元，性价比高，适合预算有限且需完整功能的玩家。 Switch Lite（纯掌机） 特点：一体化设计，不可拆卸Joy-Con，不支持TV模式，重量仅275克，续航约7小时。 适用场景：便携优先，单人游戏为主（如《宝可梦》《动物森友会》）。 注意：部分依赖体感/多人游戏无法体验（如《健身环大冒险》）。 Switch OLED 版（2021年旗舰） 升级点：7英寸OLED屏（色彩/对比度提升）、64GB存储、可调支架、底座新增LAN网口。 价格：约2000元，适合追求画质及多人游戏的玩家。 2. 经典复刻机型 任天堂经典迷你系列（如红白机、超级任天堂） 特点：预装多款怀旧游戏，适合收藏或复古爱好者。 3. 即将上市新机 Switch 2（预计2025年发售） 爆料配置：7.9英寸高刷LCD屏、磁吸Joy-Con、支持DLSS和光追，兼容前代卡带。 建议：若不急购，可观望后续官方消息。 🛒 二、选购核心考虑因素1. 根据使用场景选择机型| 需求场景 | 推荐机型 | 理由 ||——————–|—————————-|————————————————————————–|| 频繁外出/通勤 | Switch Lite | 轻便（275g）、长续航，单手握持舒适 || 家庭多人游戏/TV模式 | Switch OLED 或 续航增强版 | 支持TV输出，Joy-Con可分拆多人游玩 || 画质党/桌面模式党 | Switch OLED | OLED屏色彩更鲜艳，支架调节灵活 || 预算有限 | Switch 续航增强版 | 功能完整，价格比OLED低约300元 |2. 国行版 vs 海外版（日版/港版等）| 对比项 | 国行版 | 海外版 ||——————|———————————————–|———————————————–|| 游戏阵容 | 仅支持过审游戏，数量稀少（如无《塞尔达》） | 全球游戏库，更新同步 || 联机体验 | 无需加速器，但仅限国服玩家 | 需加速器，可全球联机 || 价格/售后 | 略低（约2000元），官方保修1年 | 稍高，无国内保修（Joy-Con漂移需自修） || 卡带兼容性 | 可玩海外版卡带，但无法更新DLC | 不可用国行卡带 || 推荐人群 | 轻度玩家、家庭用户（如《舞力全开》国行特供） | 核心玩家、需完整游戏体验者 | ✅ 结论： 优先海外版：尤其你提到想玩《宝可梦》联网对战，海外版才能体验完整功能。 日版最优选：插头兼容国内，5G WiFi需调信道（36-48）。 3. 游戏购买与配件 实体卡 vs 数字版 实体卡：可转卖回血，收藏价值高，适合预算有限玩家。 数字版：打折时价格更低（如史低《塞尔达》），切换游戏方便。 必备配件 屏幕膜：防刮必备。 Pro手柄：适合TV模式，手感更佳（国行版有保修）。 存储卡：建议128GB以上，OLED版64GB仍不足。 ⚠️ 三、避坑注意事项 验机指南 三码合一：包装盒、主机底部、系统设置内的序列号需一致。 开机红：首次开机必有红色LOGO界面，无则非全新机。 错误记录：新机系统“错误记录”应为空。 慎防风险 拒买二手主机：易遇BAN机（账号违规牵连）。 拒购黑点卡/兑换码：淘宝低价数字版可能盗刷，导致封号。 家庭会员组队：避免淘宝拼车，选熟人分担（4500日元/年支持8人）。 日常维护 Joy-Con漂移：避免过度按压，可更换金属卡扣。 长期存放：充满电后关机，防电池过放。 💎 总结建议 入门首选：Switch 续航增强版（功能全+性价比高）。 极致体验：Switch OLED 日版（画质/存储/多人游戏优化）。 学生党/便携党：Switch Lite（预算≈1100元，专注掌机体验）。 若计划玩《宝可梦》联网对战，务必选海外版，搭配加速器确保稳定联机。" }, { "title": "商品选购系列15:抽油烟机", "url": "/posts/shopping-15/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2025-05-15 05:35:00 +0800", "snippet": "抽油烟机一般有侧吸式和顶吸式两种侧吸式比较靠近烟源，拢烟效果不错，不遮挡视线。最新的7字型是侧吸式的改良版，离烟源更近，排烟更高效。· 侧吸式：由于安装高度更低（通常离灶台约350mm），能更早捕捉油烟上升轨迹，尤其在油烟扩散前快速吸附，排烟效率更高。部分机型采用油烟分离技术（如分离滤板），可减少油烟与风机接触，降低油污积累。· 顶吸式：安装高度较高（约700mm），需等待油烟自然上升后才能吸附，油烟扩散可能性更大，尤其在爆炒时可能产生油烟逃逸。侧吸式更适合：· 开放式厨房（油烟不易扩散至其他区域），· 侧吸式：集烟腔靠近灶台，面板易溅油污需频繁擦拭一般关注抽油烟机的风量市面上的抽油烟机排风量多为15-22m/min，少数高端机型能达到24m/min。一般家庭使用可以选择风量在17-19m3/min这个范围内的烟机，但是如果喜欢爆炒的话，风量最好在20m3/min以上。不想闻到隔壁的油烟味，就要选高风压。买油烟机除了关注风量，风压也很重要，它决定了家里的油烟能不能顺利地排出去如果家位于高楼的低层，最好购买300Pa以上的抽油烟机油脂分离度能够衡量一个抽油烟机分离油脂的程度。根据国标规定，合格的抽油烟机油脂分离度需达到80％以上。油脂分离度主要影响机器清洁以及净化效果。油脂分离程度高就意味着更多的油脂能被分离出来，积聚在油杯中，因此附着在机器内部的油脂以及排放到大气中的油烟会更少。 风量（吸力）与风压 风量决定吸烟速度，低楼层建议选择≥20m³/min，爆炒家庭需22m³/min以上。 风压决定排烟动力，低楼层需≥500Pa（开放式厨房或烹饪高峰期可能需更高）。低楼层虽无高层风压干扰，但需对抗公共烟道压力，防止高峰期倒灌。 结构设计与安装类型 侧吸式更适合低楼层：近距离吸烟效率高（距离灶台30-40cm），可快速拦截油烟。 顶侧双吸是升级选择：结合顶吸和侧吸优势，扩大吸烟范围。 油脂分离度与清洁便捷性 油脂分离度需≥90%，减少内部油污堆积。 优先选择带自清洁功能（如蒸汽洗、热熔洗）或易拆洗油网的机型，降低维护成本。 噪音控制 国家标准≤73dB，低楼层建议选择≤65dB机型，避免噪音干扰。 其他关键参数 电机类型：优选双滚珠轴承电机，寿命长且噪音低。 能效等级：一级能效更省电。 二、低楼层高排烟性能机型推荐 老板小黑翼 D1P（CXW-260-28D3S） 核心参数：23m³/min风量 + 1000Pa最大静压，专为抗倒灌设计。 技术亮点：AI智慧云枢实时调节风压，顶侧双吸结构提前拦截油烟，挥手智控操作便捷。 适用场景：开放式厨房、爆炒家庭，低楼层高峰期排烟稳定。 华帝小飞碟 S36（CXW-270-J25S） 核心参数：26m³/min爆炒风量 + 1000Pa静压，三腔拢烟技术减少逃逸。 技术亮点：自清洁系统 + 超薄机身（节省空间），噪音仅52dB，适合小户型。 用户反馈：实测辣椒炝锅油烟逃逸率＜3%。 美的蒸汽洗 AK7PRO 核心参数：28m³/min风量 + 1100Pa静压，当前市场顶配。 技术亮点：高温蒸汽洗技术（清洁率99.1%），超薄平嵌设计适配橱柜，烟灶联动自动启停。 适用场景：重油烟家庭，长期使用吸力不衰减。 米家智能净烟机 P1 核心参数：24m³/min风量 + 900Pa静压，智能变频调节。 技术亮点：PM2.5实时监测 + 无油网设计，APP远程控制，适合科技爱好者。 性价比：补贴后2399元，智能与实用兼备。 方太纤薄 F3-G 核心参数：25m³/min巡航风量 + 1000Pa静压，超薄机身（12cm）。 技术亮点：动态微粒捕集技术（PM2.5净化率99%），蜂频传感器预判油烟。 设计优势：星空灰玻璃面板，0缝真平嵌，高端厨房首选。 三、选购注意事项 实地测试：在实体店开启最大档位，感受吸力与噪音。 补贴政策：2025年多地提供20%节能补贴（如老板D1P补贴后2303元）。 安装匹配：侧吸式需预留灶台高度，顶吸式注意吊柜深度。" }, { "title": "AI系列28:专业设计Agent——Lovart", "url": "/posts/ai-28/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-13 06:30:00 +0800", "snippet": "全球⾸个专业设计Agent——Lovart正式发布。具备全链路设计和执⾏，仅需⼀句话即可完成从创意拆解到专业交付的整个视觉流程，单次可执⾏ 上百步，最多产出40张设计成品图；图像、视频、⾳乐⾃由调度，集成多种前沿AI模型。Lovart的出现标志着AI在设计领域从“图像⽣成器”向“设计 执⾏官”的转变。" }, { "title": "AI系列27:Poify", "url": "/posts/ai-27/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-12 06:30:00 +0800", "snippet": "快⼿推出电商领域的AI作图⼯具Poify，帮助商家和创意⼯作者快速⽣成⾼质量图⽚内容。Poify具备AI模特试⾐、换背景影棚⻛格、局部重绘等功 能，⽀持⽂⽣图和图⽣图，能⽣成奇幻场景。商家可上传⾐服原图并设置尺⼨，快速⽣成模特试⾐图。" }, { "title": "AI系列26:NotebookLM", "url": "/posts/ai-26/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-09 06:30:00 +0800", "snippet": "谷歌的 NotebookLM 能直接生成中文播客上传一本书的pdf，直接生成一男一女谈论你上传的资料https://www.ruanyifeng.com/blog/2025/05/notebooklm.html另外好像Monica这个谷歌插件也可以实现 非常轻便 多种语言可以选择。" }, { "title": "AI系列25:Gemini 2.5 Pro （1/O edition）成编程模型新王", "url": "/posts/ai-25/", "categories": "AI系列", "tags": "AI系列", "date": "2025-05-07 06:00:00 +0800", "snippet": "Gemini 2.5 Pro升级版本：Gemini 2.5 Pro （1/O edition），成编程模型新王Google DeepMind##5 7 Gemini 2.5 Pro (1/O edition).该版本编程能力大幅提升，在LMArena编程排行榜和WebDev Arena排行榜中均名列前茅，超越了Claude 3.7 Sonnet。用户仅需提供手绘草图和功能描述，可生成功能完备的Web应用、游戏等。" }, { "title": "MCP系列6:mcp开发调试与vscode接入", "url": "/posts/mcp-6/", "categories": "MCP系列", "tags": "MCP系列", "date": "2025-05-06 05:30:00 +0800", "snippet": "mcp会提供 tools, prompts, and resources 这3种东西客户端的Sampling 功能，用来模拟策略执行过程、估计动作或状态价值的核心方法。调试Inspector 工具：这个图形界面允许你连接到服务器并测试工具、提示和资源。pip install “mcp[cli]”创建一个文件 server.py@mcp.resource(“greeting://{name}”) 建了一个名为 greeting 的资源，它接收参数 name。mcp dev server.py，会自己在浏览器打开一个MCP Inspector或 npx @modelcontextprotocol/inspector mcp run server.pySTDIO服务器，注意不要使用print输出到stdio客户端编写自己的客户端可以实现编程和自动化交互，能够将 MCP 功能集成到自己的工作流程中，自动化任务比如使用 call_tool调用工具带有 LLM 的客户端上面的客户端不实用，用户期望通过自然语言进行交互大致流程列出功能、提示、资源和工具，并保存它们的模式。添加一个 LLM，并以 LLM 能够理解的格式传递保存的功能及其模式（转换函数将其转换为 LLM 能够理解的格式）通过将用户提示与客户端列出的工具一起传递给 LLM 来处理用户请求。从 GitHub Copilot Agent 模式使用服务器 &quot;calculator&quot;: { &quot;command&quot;: &quot;python&quot;, &quot;args&quot;: [&quot;d:\\\\devel\\\\\\\\add.py&quot;], &quot;env&quot;: {} }SSE 服务器在后台，路由 /sse 和 /messages 分别被设置用来处理连接和消息。需要添加路由先运行sse服务器，uvicorn server:app #run a file server.py and for it to have a Starlette instance called app命令行测试npx @modelcontextprotocol/inspector –cli http://localhost:8000/sse –method tools/list使用工具测试填上 http://127.0.0.1:8000/sse配置“ssub”: { “type”: “http”, “url”: “http://127.0.0.1:8000/sse” }" }, { "title": "网络系列6:查自己IP", "url": "/posts/net-6/", "categories": "网络系列", "tags": "网络系列", "date": "2025-05-06 05:05:00 +0800", "snippet": "ip111.cn" }, { "title": "MCP系列5:开发语言选择与部署方式", "url": "/posts/mcp-5/", "categories": "MCP系列", "tags": "MCP系列", "date": "2025-05-05 05:30:00 +0800", "snippet": "🌐 一、MCP Server 的部署位置1. 云端托管（主流场景） 推荐平台：腾讯云 Lighthouse、AWS EC2、阿里云 ECS 腾讯云提供 MCP Server 专属镜像，支持一键部署社区热门服务（如高德地图、Notion 集成），无需手动配置环境。 优势：弹性扩缩容、自动运维，适合企业级高频调用。 典型用例： 公共服务（如天气查询、地图导航）需 24/7 可用性。 多用户共享工具（如数据库查询、API 代理）。 2. 本地/私有化部署 适用场景： 数据敏感型任务（如医疗记录查询、金融分析）。 低延迟需求（如实时控制 Kubernetes 集群）。 工具支持： 通过 uv 或 npx 命令行安装（例：uv tool install arxiv-mcp-server）。 Docker 容器化部署（如 GitHub MCP Server）。 3. 混合架构 核心服务云端托管 + 敏感操作本地执行（例：云端调用公开API，本地处理数据库）。💻 二、开发语言推荐（接入 MCP Server）按优先级排序，综合生态、效率、性能考量： 语言 适用场景 优势 工具链 Python 快速原型、数据处理类服务 库丰富（mcp-client），AI 生态成熟，调试便捷 FastAPI + uv 工具链 TypeScript 前端/全栈开发、浏览器工具集成 异步支持完善，兼容 Node.js 和浏览器环境 Next.js + @smithery/cli Java 企业级系统、高并发后端服务 稳定性强，Spring 生态提供 MCP 适配模块（如 spring-ai-mcp-server-webflux） Spring Boot 3.4+ Kotlin Android 集成、JVM 生态项目 语法简洁，与 Java 互操作性强 Ktor 框架 ▶️ 语言选择建议： 优先选 Python：若需快速接入云端 MCP 服务（如 MySQL 查询、文件解析），5 行代码调用： from mcp_client import MCPClientclient = MCPClient(endpoint=&quot;https://api.mcp-service.com/sse&quot;)result = client.call_tool(&quot;get_weather&quot;, {&quot;city&quot;: &quot;Beijing&quot;}) 选 TypeScript：开发浏览器插件或桌面应用（如 Electron + MCP）。 选 Java/Kotlin：银行、ERP 等复杂系统需线程安全和审计功能。⚙️ 三、接入 MCP Server 的关键步骤1. 配置通信协议 SSE（HTTP）：Server-Sent Events长连接，云端服务主流方式，需处理身份验证（如 API Key）。 STDIO（本地进程）：本地部署时延迟更低，通过命令行管道通信。2. 安全实践 敏感操作（如数据库访问）使用最小权限账户，禁止 root 权限。 环境变量加密存储（Vault / KMS），避免硬编码。3. 调试工具 MCP Inspector：可视化测试请求/响应。 日志分级：记录详细错误信息（如 SQL 执行失败原因）。💎 总结：部署与开发选择矩阵| 场景 | 部署位置 | 开发语言 | 工具链 ||————————-|——————|————–|————————-|| 公共服务（天气/地图） | 云端托管 | Python | FastAPI + mcp-client || 企业内部知识库 | 私有服务器 | Java | Spring AI || 浏览器插件工具 | 本地 + 云端混合 | TypeScript | Smithery CLI || 移动端集成 | 本地设备 | Kotlin | Ktor + Android SDK | 💡 提示： 轻量级需求可直接用腾讯云 Lighthouse 免部署调用社区 MCP 服务。 开源 MCP Server 清单参考 Smithery.ai（收录 2600+ 服务）。 " }, { "title": "MCP系列4:MCP与MCP Server啥区别，自己项目如何接入", "url": "/posts/mcp-4/", "categories": "MCP系列", "tags": "MCP系列", "date": "2025-05-04 05:30:00 +0800", "snippet": "MCP是协议，mcp Server则是实现这个协议的具体的服务程序🔧 一、安装必备库pip install mcp-client httpx # 官方MCP客户端库 + HTTP库（用于SSE）⚙️ 二、接入流程（根据对方服务协议类型选择）场景1：对方MCP Server使用 SSE（HTTP）协议from mcp_client import MCPClient# 步骤1：初始化客户端（替换为实际URL）client = MCPClient( transport=&quot;sse&quot;, # 使用SSE协议 endpoint=&quot;https://api.other-mcp-server.com/mcp&quot; # 对方服务地址)# 步骤2：调用工具（以&quot;get_weather&quot;为例）try: # 同步调用 result = client.call_tool( tool_name=&quot;get_weather&quot;, # 工具名称（需对方提供） params={&quot;city&quot;: &quot;Beijing&quot;}, # 参数（格式需匹配对方定义） timeout=10 # 超时时间（秒） ) print(f&quot;天气查询结果: {result[&#39;temperature&#39;]}℃&quot;) except Exception as e: print(f&quot;调用失败: {str(e)}&quot;)场景2：对方MCP Server使用 STDIO（本地进程）协议from mcp_client import MCPClient# 步骤1：初始化客户端（需知道对方可执行文件路径）client = MCPClient( transport=&quot;stdio&quot;, command=&quot;/path/to/other_mcp_server&quot;, # 对方服务的可执行文件 args=[&quot;--config&quot;, &quot;config.json&quot;] # 启动参数（如有）)# 步骤2：调用工具（与SSE方式相同）result = client.call_tool(&quot;read_file&quot;, {&quot;path&quot;: &quot;/data/report.pdf&quot;})🔍 三、关键配置说明| 参数 | SSE 模式 | STDIO 模式 ||—————–|————————————–|———————————–|| transport | &quot;sse&quot; | &quot;stdio&quot; || endpoint | 服务URL (e.g. https://xxx/mcp) | ❌ 不需要 || command | ❌ 不需要 | 可执行文件路径 (e.g. ./mcp-tools) || args | ❌ 不需要 | 启动参数列表 (e.g. [&quot;--port=8080&quot;]) || api_key | 如需认证，通过headers传递 | ❌ 通常不需要 |▶️ 认证处理示例（SSE模式）client = MCPClient( transport=&quot;sse&quot;, endpoint=&quot;https://api.secure-mcp.com/mcp&quot;, headers={&quot;Authorization&quot;: &quot;Bearer YOUR_API_KEY&quot;} # 添加认证头)🚀 四、高级用法：流式响应处理若对方工具返回流式数据（如LLM逐字生成）：# 异步流式调用（需Python 3.7+）async with MCPClient(&quot;sse&quot;, endpoint=url) as client: async for chunk in client.stream_tool(&quot;generate_text&quot;, {&quot;prompt&quot;: &quot;Hello&quot;}): print(chunk[&quot;text&quot;], end=&quot;&quot;, flush=True) # 逐块打印文本⚠️ 五、调试与错误排查1. 获取可用工具列表tools = client.list_tools() # 获取对方服务暴露的所有工具print(&quot;可用工具:&quot;, [t[&quot;name&quot;] for t in tools])2. 常见错误码| 错误码 | 含义 | 解决方案 ||————————|————————–|———————————-|| TOOL_NOT_FOUND | 工具名不存在 | 检查list_tools()返回的正确名称 || INVALID_PARAMS | 参数格式错误 | 对照对方API文档检查参数结构 || TRANSPORT_ERROR | 网络/进程通信失败 | 检查服务地址或进程是否运行 || PERMISSION_DENIED | 缺少认证或权限不足 | 提供有效API Key |3. 日志记录import logginglogging.basicConfig(level=logging.DEBUG) # 查看详细通信日志💡 六、完整调用示例（SSE模式 + 错误处理）from mcp_client import MCPClient, MCPErrordef fetch_user_data(user_id: str): client = MCPClient( transport=&quot;sse&quot;, endpoint=&quot;https://user-service.com/mcp&quot;, headers={&quot;X-API-Key&quot;: &quot;your_key_here&quot;} ) try: return client.call_tool( tool_name=&quot;get_user_profile&quot;, params={&quot;user_id&quot;: user_id, &quot;fields&quot;: [&quot;name&quot;, &quot;email&quot;]} ) except MCPError as e: if e.code == &quot;TOOL_NOT_FOUND&quot;: print(&quot;工具不存在！请检查服务版本&quot;) elif e.code == &quot;INVALID_PARAMS&quot;: print(&quot;参数错误:&quot;, e.message) else: print(&quot;未知错误:&quot;, str(e)) finally: client.close()# 使用示例user_data = fetch_user_data(&quot;U123456&quot;)print(user_data)📌 关键总结 确认对方协议：SSE（远程HTTP）还是STDIO（本地进程） 初始化客户端：根据协议选择正确配置参数 调用工具：使用call_tool(tool_name, params) 处理异常：捕获MCPError并针对性处理 ⚠️ 重要提醒： 向对方索要 工具清单 和 参数规范文档（缺少时用client.list_tools()探测） 生产环境务必配置 超时（timeout参数）和 重试机制 敏感操作要求对方启用 HTTPS+Token认证 按照此方案，你可像调用普通API一样集成第三方MCP Server到Python项目中，无需依赖任何特定IDE或桌面应用。" }, { "title": "网络系列5:Fiddler Classic 抓包", "url": "/posts/net-5/", "categories": "网络系列", "tags": "网络系列", "date": "2025-05-04 05:05:00 +0800", "snippet": "以下是 Progress Telerik Fiddler Classic 的抓包操作指南，涵盖基础抓包、数据查看与过滤功能，结合最新实践整理：一、抓包基础设置 启用代理与HTTPS解密• 开启代理：打开Fiddler → Tools → Options → Connections → 勾选 Allow remote computers to connect，端口默认8888。 • HTTPS抓包：进入Tools → Options → HTTPS → 勾选 Capture HTTPS CONNECTs 和 Decrypt HTTPS traffic → 安装并信任证书（需重启Fiddler）。 • 移动端配置：手机与电脑需同局域网 → 设备WiFi设置代理（IP为电脑内网IP，端口8888）→ 访问http://[电脑IP]:8888下载证书并信任。 验证代理生效• 浏览器访问http://ipv4:8888，若显示 Fiddler Echo Service 即代理成功。 二、查看请求头与响应数据 会话列表与基础信息• 会话列表（左侧）：显示所有捕获的请求，按顺序（#列）、协议（HTTP/HTTPS）、主机（Host）、URL等分类。 • 关键列说明： ◦ Result：HTTP状态码（如200成功、404未找到）。 ◦ Body：请求/响应数据大小，快速定位大文件请求。 详细数据查看（Inspectors标签）• 请求头分析：选中会话 → 右侧Inspectors → 上方选择 Headers 或 Raw 查看完整请求头信息。 • 响应内容解析： ◦ TextView/SyntaxView：文本格式查看JSON、XML等结构化数据。 ◦ ImageView：直接预览图片响应。 ◦ Raw：显示原始响应报文（含协议版本、状态码、响应头与正文）。 • 性能分析：点击 Statistics 标签 → 查看请求耗时、下载速度等性能指标。 高级功能• AutoResponder：拦截请求并模拟响应（如将在线资源替换为本地文件）。 • 断点调试：输入命令 bpu [URL关键词] 拦截请求修改参数，或 bps [状态码] 拦截特定响应。 三、过滤请求的实战方法 按网络类型过滤• Filters → Hosts → 选择 Show only Intranet Hosts（仅内网）或 Show only Internet Hosts（仅外网）。 按域名/IP过滤• 显示指定站点：Hosts → 选择 Show only the following Hosts → 输入域名（如www.baidu.com，多个用;分隔）。 • 隐藏干扰请求：Request Headers → 选择 Hide if URL contains → 输入正则表达式（如REGEX:(?insx)/.*\\.(css|js|jpg) 过滤静态资源）。 按响应类型/大小过滤• Response Type and Size → 设置隐藏小于/大于指定大小的请求（如Hide smaller than 1KB）。 • Response Status Code → 隐藏成功（200）、重定向（302）等非关键状态码。 立即生效操作• 设置完成后点击 Actions → Run Filterset now 应用过滤规则。 四、注意事项与技巧 证书信任问题：iOS需在设置 → 通用 → 关于本机 → 证书信任设置中手动启用Fiddler证书。 防火墙冲突：若抓包失败，检查防火墙是否放行Fiddler的8888端口。 快捷键加速：• F12：快速开关抓包 • Ctrl + X：清空会话列表。 " }, { "title": "RPA系列3:类似影刀，八爪鱼的开源推荐", "url": "/posts/rpa-3/", "categories": "RPA系列", "tags": "RPA系列", "date": "2025-05-03 23:30:00 +0800", "snippet": "🔧 一、开源RPA核心推荐1. Taskt（原sharpRPA） 核心优势： 无代码可视化设计：拖拽式界面+屏幕录制功能，支持图像识别和OCR，适合非技术用户快速构建自动化流程。 轻量易用：内置DEMO示例和分步指南，10分钟即可完成基础流程搭建。 适用场景：桌面软件自动化（如Excel操作）、重复性任务录制（影刀RPA的低代码替代）。 局限：复杂逻辑处理能力较弱，依赖Windows环境。2. UI.Vision（Kantu） 核心优势： 零脚本+跨平台：点击式操作界面，支持浏览器插件（Chrome/Firefox）和独立客户端（Win/Mac/Linux）。 数据安全优先：本地运行不存储数据，符合企业级隐私标准，适合金融、医疗场景。 适用场景：Web数据抓取、表单填写（八爪鱼RPA的轻量化替代）。 局限：复杂流程需依赖基础命令扩展，高级功能需付费版。3. Robot Framework 核心优势： 企业级扩展性：支持Selenium库集成，可处理ERP/CRM等复杂系统对接，插件生态丰富（如数据库、API调用）。 自然语言脚本：用关键字语法降低编码门槛，适合团队协作开发。 适用场景：财务对账、供应链管理等需高稳定性的企业流程（影刀RPA的高阶替代）。 局限：学习曲线陡峭，需Python基础。4. TagUI 核心优势： 自然语言驱动：用类英语语法编写脚本（如 type ‘username’ as admin），降低学习成本。 云协同能力：支持多终端远程管理（手机/PC），适用分布式团队。 适用场景：跨平台任务（Web+桌面）、远程流程监控（八爪鱼的协作增强版）。5. OpenRPA 核心优势： 开源版UiPath：拖拽式设计器+调度仪表盘，支持与云服务（AWS/Azure）深度集成。 活跃社区：每周高频更新，提供企业级功能如机器人集群管理。 适用场景：中大型企业自动化中台建设（影刀/八爪鱼的企业级升级方案）。⚖️ 二、与影刀/八爪鱼的对比替代方案| 需求场景 | 影刀RPA特性 | 八爪鱼RPA特性 | 开源替代推荐 | 优势对比 ||——————–|———————|———————|———————-|——————————–|| 无代码快速部署 | 可视化流程设计 | Web抓取模板化 | Taskt | 免费+本地化部署，规避云服务成本 || 复杂逻辑处理 | Python脚本扩展 | 数据清洗引擎 | Robot Framework | 更强大的插件生态（如AI库集成） || 跨平台支持 | 仅Windows | 浏览器为主 | UI.Vision | 全平台兼容+浏览器插件轻量化 || 企业级协作 | 付费版支持 | 团队协作功能 | OpenRPA | 免费开源版提供调度与审计功能 |🚀 三、按场景推荐选型 个人/轻量级自动化（如数据抓取、填表）→ UI.Vision（零代码）或 Taskt（录制回放）。 💡 替代八爪鱼的Web采集场景，节省年费成本。 企业复杂流程（如财务对账、ERP集成）→ Robot Framework（扩展性强）或 OpenRPA（分布式调度）。 💡 对标影刀的高阶功能，避免商业许可限制。 远程/移动端协作→ TagUI（多终端管理+自然语言脚本）。💎 总结：开源工具对比与推荐优先级| 工具 | 核心优势 | 适用场景 | 推荐指数 ||——————–|———————-|———————|————|| Taskt | 无代码录制回放 | 桌面自动化 | ⭐⭐⭐⭐ || UI.Vision | 浏览器插件+跨平台 | Web抓取/表单填写 | ⭐⭐⭐⭐⭐ || Robot Framework| 企业级扩展性 | 复杂系统集成 | ⭐⭐⭐⭐⭐ || TagUI | 自然语言脚本+云协同 | 远程任务管理 | ⭐⭐⭐⭐ || OpenRPA | 可视化调度面板 | 中大型企业部署 | ⭐⭐⭐⭐ | 实施建议： 优先试用 UI.Vision（Web场景）和 Taskt（桌面场景），快速验证流程可行性； 长期项目选 Robot Framework，通过Python库扩展AI能力（如OCR/NLP）； 需兼容商业生态可关注 TagUI（微软Office深度集成）。 " }, { "title": "MCP系列3:agent与mcp啥区别", "url": "/posts/mcp-3/", "categories": "MCP系列", "tags": "MCP系列", "date": "2025-05-03 05:30:00 +0800", "snippet": " 本质定位与功能范畴• Agent是具有自主决策能力的任务执行实体，通过「规划-行动-观察」循环完成目标，核心能力包括任务分解（如将”订机票+订酒店”拆解为多步骤）、工具调用（如调用天气API和支付接口）和上下文记忆（如保持对话连贯性）。例如QQ浏览器的”AI高考通”能自主完成志愿填报全流程决策。• MCP是标准化工具接入的通信协议，属于基础设施层。它定义工具与AI模型间的数据交换格式，实现类似USB接口的即插即用能力，使AI可动态发现和使用新工具。例如企业将CRM系统封装为MCP服务，供多个Agent调用。 技术实现层级• Agent位于应用层，依赖大语言模型（LLM）进行推理决策。典型架构包含推理引擎、记忆模块和工具调用模块，需处理多工具协同、异常重试等复杂工程问题。例如Lovart设计Agent需要整合生图模型、视频生成工具和用户反馈系统。• MCP处于协议层，与具体AI模型解耦。通过统一接口描述语言实现跨平台兼容，例如同时支持GPT-5和Claude的API接入，扩展性体现为工具接入数量的线性增长。 交互模式差异• Agent采用主动式双向交互，具备任务状态管理能力。比如开发类Agent在编码时会主动触发单元测试工具，并根据测试结果迭代修改代码。• MCP提供被动式服务对接，仅负责数据传输。当Agent需使用数据库时，MCP确保SQL查询请求能准确映射到具体数据库驱动，但不参与查询逻辑决策。 典型应用场景对比场景类型 MCP适用场景 Agent适用场景企业服务 标准化连接ERP系统与LLM 客户投诉自动处理（工单生成→跟踪）开发工具 IDE快速接入GitHub API 自动编写文档+测试+部署的编码助手例如百度地图的MCP Server将实时路况数据标准化，而物流调度Agent则通过MCP调用这些数据完成路径规划。 安全与扩展机制• MCP侧重协议级安全，包括TLS加密传输、防止Schema注入攻击、限制单工具最大响应延时等。• Agent需内置操作审计（记录工具调用日志）、风险评估（检测危险API调用）和权限管控（如OAuth2鉴权）。例如医疗Agent调用患者数据前需完成RBAC权限校验。协作关系与最佳实践两者并非替代关系，而是形成互补的技术栈： 开发策略：先通过MCP构建可复用的工具库（如天气查询、文件解析），再由Agent动态组合工具完成端到端任务。 性能优化：在Agent中集成MCP的缓存机制（如Redis加速高频查询），可降低40%的响应延迟。 典型协作模式：多Agent通过MCP共享任务上下文，例如智能交通系统中，路况监控Agent与调度Agent通过MCP协议同步数据。 类比总结• MCP 如同标准化零件库（螺丝、轴承），提供基础能力但需人工组装。• Agent 是自动化流水线，能根据需求自动选取零件并生产成品。两者的协同构建了既能灵活扩展（MCP）、又能自主运作（Agent）的智能系统。" }, { "title": "RPA系列2:开源推荐", "url": "/posts/rpa-2/", "categories": "RPA系列", "tags": "RPA系列", "date": "2025-05-02 23:30:00 +0800", "snippet": "想找几款开源RPA工具替代像“影刀”“八爪鱼RPA”这样的商业产品：🧠 一、专业级自动化框架（适合开发者/技术团队） Robot Framework 核心优势：支持测试自动化和RPA，关键词驱动，语法接近自然语言，扩展性极强（支持Python/Java库）。 适用场景：企业级复杂流程（如跨系统数据同步、ERP自动化）。 资源：GitHub 官方文档 TagUI 亮点：命令行+自然语言脚本（如 click &quot;登录按钮&quot;），天然支持Python/R集成，特别适合远程自动化任务。 典型用例：定时爬取网页数据、Excel报表生成。 资源：GitHub 示例教程 🖱️ 二、无代码/低代码工具（适合业务人员快速上手） UI.Vision (Kantu) 功能特色：跨平台（Win/Mac/Linux），提供浏览器插件+桌面客户端，支持录制操作生成脚本，无需编程基础。 场景举例：自动填表单、批量截图、网页内容抓取。 资源：官网 GitHub Taskt (原SharpRPA) 核心价值：拖拽式设计器 + 屏幕录制功能，内置OCR和图像识别命令，适合桌面/Web自动化。 典型任务：GUI应用操作、重复性数据录入。 资源：GitHub 使用手册 🏢 三、企业级扩展方案（适合中大型项目） OpenRPA 优势：基于C#/.NET，提供可视化流程设计器，集成Node-RED支持复杂工作流编排，适合需要调度与监控的场景。 企业功能：远程部署、任务队列管理、审计日志。 资源：GitHub 社区论坛 Robocorp 定位：云原生RPA平台，底层依赖Robot Framework，提供免费云控制台（Robocloud）管理机器人。 适用性：分布式执行、CI/CD集成开发。 资源：官网 GitHub 🔍 四、工具选型建议（按需求匹配）| 需求 | 推荐工具 | 原因 ||————————-|——————–|————————————————————————–|| 完全零代码 | UI.Vision, Taskt | 操作录制+拖拽界面，5分钟上手 || 开发者定制化 | Robot Framework, TagUI | 代码扩展灵活，社区资源丰富 || 企业级调度与审计 | OpenRPA, Robocorp | 支持任务队列、权限管理、日志追踪 || 跨平台兼容（Mac/Linux） | UI.Vision, TagUI | 原生支持多OS，无需虚拟机 |⚠️ 五、开源RPA的局限与注意事项 技术门槛：部分工具（如Robot Framework）需Python基础，非开发者建议从UI.Vision入手。 维护成本：开源版本无官方技术支持，依赖社区论坛（如UI.Vision英文论坛）。 合规风险：商业用途需检查协议（如UI.Vision采用AGPLv3，二次开发需开源）。💎 总结 快速验证场景 → 选 UI.Vision/Taskt（点击即用） 深度集成开发 → 选 Robot Framework/TagUI（代码级控制） 团队协作部署 → 选 OpenRPA/Robocorp（企业级特性）建议从小型任务（如自动填表）开始试用，再逐步迁移核心流程。" }, { "title": "Tampermonkey系列2:网页自动化", "url": "/posts/monkey-2/", "categories": "Tampermonkey系列", "tags": "Tampermonkey系列", "date": "2025-05-02 04:30:00 +0800", "snippet": "希望自动化以下操作： 打开网页后点击”一键展开”按钮 滚动页面到底部 点击下一页按钮 重复上述步骤 网页自动化 简单易用 : Tampermonkey 脚本最简单，无需安装额外软件 功能强大 : Selenium 或 Puppeteer 提供更多控制和自动化选项 下面使用Tampermonkey1,添加新脚本点击浏览器工具栏中的Tampermonkey图标从下拉菜单中选择”添加新脚本”或”创建新脚本”编写脚本点击编辑器右上角的”文件”菜单选择”保存”选项（或按Ctrl+S）如何测试css选择器是否正确。 切换到”控制台”(Console)选项卡 输入以下代码测试您的选择器： // 测试展开按钮选择器var expandButton = document.querySelector(&#39;您的expandButtonSelector&#39;);console.log(&#39;展开按钮:&#39;, expandButton);如果不正确，将显示 null 。如果选择器正确，控制台会显示对应的DOM元素需要 输入edge://extensions/ 在左侧找到”开发人员模式”开关并打开// ==UserScript==// @name 问题列表自动展开与翻页// @namespace http://tampermonkey.net/// @version 0.1// @description 自动点击一键展开按钮并翻页// @author You// @match https://voc.xxx.cn/uvm/insight/voice-summary-list// @grant none// ==/UserScript==// 添加一个立即执行的测试代码alert(&#39;Tampermonkey脚本已加载&#39;);(function() { &#39;use strict&#39;; // 配置参数 const config = { // 一键展开按钮的选择器，根据实际情况修改 expandButtonSelector: &#39;#app &amp;gt; div.uvm-layout &amp;gt; div.uvm-right-container &amp;gt; div &amp;gt; div.el-scrollbar__wrap.el-scrollbar__wrap--hidden-default &amp;gt; div &amp;gt; div &amp;gt; div:nth-child(3) &amp;gt; div.voice-summary &amp;gt; div.summary-title-wrapper &amp;gt; div.operation-box &amp;gt; div &amp;gt; div:nth-child(3) &amp;gt; button &amp;gt; span&#39;, // 下一页按钮的选择器，根据实际情况修改 nextPageSelector: &#39;#app &amp;gt; div.uvm-layout &amp;gt; div.uvm-right-container &amp;gt; div &amp;gt; div.el-scrollbar__wrap.el-scrollbar__wrap--hidden-default &amp;gt; div &amp;gt; div &amp;gt; div:nth-child(3) &amp;gt; div.voice-summary &amp;gt; div.voice-summary-footer &amp;gt; div:nth-child(1) &amp;gt; button.btn-next.is-last&#39;, // 列表项的选择器，用于检测列表是否已加载 listItemSelector: &#39;#app &amp;gt; div.uvm-layout &amp;gt; div.uvm-right-container &amp;gt; div &amp;gt; div.el-scrollbar__wrap.el-scrollbar__wrap--hidden-default &amp;gt; div &amp;gt; div &amp;gt; div:nth-child(3) &amp;gt; div.voice-summary &amp;gt; div.voice-summary-body &amp;gt; div &amp;gt; div.el-table__inner-wrapper &amp;gt; div.el-table__body-wrapper &amp;gt; div &amp;gt; div.el-scrollbar__wrap.el-scrollbar__wrap--hidden-default &amp;gt; div &amp;gt; table &amp;gt; tbody &amp;gt; tr:nth-child(1) &amp;gt; td &amp;gt; div &amp;gt; div&#39;, // 等待展开内容的时间(毫秒) waitTimeAfterExpand: 3000, // 是否在页面底部添加控制按钮 addControlButtons: true, // 控制按钮显示延迟时间(毫秒) controlButtonDelay: 1000, // 最大翻页次数 maxPageCount: 3 }; // 添加一个变量来跟踪当前页数 let currentPageCount = 0; // 滚动到页面底部 function scrollToBottom() { // 找到实际的滚动容器 const scrollContainer = document.querySelector(&#39;#app &amp;gt; div.uvm-layout &amp;gt; div.uvm-right-container &amp;gt; div &amp;gt; div.el-scrollbar__wrap.el-scrollbar__wrap--hidden-default&#39;); if (scrollContainer) { scrollContainer.scrollTo({ top: scrollContainer.scrollHeight, behavior: &#39;smooth&#39; }); } else { // 如果找不到特定容器，则滚动整个页面 window.scrollTo({ top: document.body.scrollHeight, behavior: &#39;smooth&#39; }); } } // 查找下一页按钮 function findNextPageButton() { // 尝试多种可能的下一页按钮选择器 const nextPageButton = document.querySelector(config.nextPageSelector); // 如果找不到，尝试查找包含&quot;&amp;gt;&quot;文本的链接 if (!nextPageButton) { const allLinks = document.querySelectorAll(&#39;a&#39;); for (const link of allLinks) { if (link.textContent.includes(&#39;&amp;gt;&#39;) || link.textContent.includes(&#39;下一页&#39;)) { return link; } } } return nextPageButton; } // 添加控制按钮 function addControls() { const controlPanel = document.createElement(&#39;div&#39;); controlPanel.style.position = &#39;fixed&#39;; controlPanel.style.bottom = &#39;20px&#39;; controlPanel.style.right = &#39;20px&#39;; controlPanel.style.zIndex = &#39;9999&#39;; controlPanel.style.background = &#39;#fff&#39;; controlPanel.style.padding = &#39;10px&#39;; controlPanel.style.border = &#39;1px solid #ccc&#39;; controlPanel.style.borderRadius = &#39;5px&#39;; const startButton = document.createElement(&#39;button&#39;); startButton.textContent = &#39;开始自动操作&#39;; startButton.style.marginRight = &#39;10px&#39;; startButton.onclick = processPage; controlPanel.appendChild(startButton); document.body.appendChild(controlPanel); console.log(&#39;elesos 控制按钮已添加到页面&#39;); } // 等待列表项加载 function waitForListItems(isNextPage = false) { console.log(&#39;elesos 开始等待列表项加载...&#39;); // 创建一个Promise来处理异步等待 return new Promise((resolve) =&amp;gt; { function checkAndWait() { // 使用MutationObserver监听整个文档的变化 const observer = new MutationObserver((mutations, obs) =&amp;gt; { const listItems = document.querySelectorAll(config.listItemSelector); if (listItems &amp;amp;&amp;amp; listItems.length &amp;gt; 0) { console.log(&#39;elesos MutationObserver 检测到列表数据已加载&#39;); obs.disconnect(); // 停止观察 resolve(); if (isNextPage) { processPage(); } else { startAddControl(); } } }); // 配置观察选项，改为观察整个文档 observer.observe(document.body, { childList: true, // 观察子节点变化 subtree: true // 观察所有后代节点 }); } // 开始检查 checkAndWait(); }); } // 主要处理流程 async function processPage() { console.log(&#39;elesos 开始处理当前页面...&#39;); // 检查是否达到最大页数限制 if (config.maxPageCount &amp;gt; 0 &amp;amp;&amp;amp; currentPageCount &amp;gt;= config.maxPageCount) { console.log(&#39;elesos 已达到最大页数限制，停止处理&#39;); return; } // 1. 点击一键展开按钮 let retryCount = 0; const maxRetries = 5; while (retryCount &amp;lt; maxRetries) { const expandButton = document.querySelector(config.expandButtonSelector); if (expandButton) { console.log(&#39;elesos 找到一键展开按钮，等待3秒后开始点击&#39;); await new Promise(resolve =&amp;gt; setTimeout(resolve, 3000)); // 添加3秒延迟 console.log(&#39;elesos 开始点击一键展开按钮&#39;); expandButton.click(); break; } else { console.log(`elesos 未找到一键展开按钮，等待后重试 (${retryCount + 1}/${maxRetries})`); await new Promise(resolve =&amp;gt; setTimeout(resolve, 2000)); retryCount++; } } // 等待内容展开 await new Promise(resolve =&amp;gt; setTimeout(resolve, config.waitTimeAfterExpand)); // 2. 滚动到页面底部 console.log(&#39;elesos 滚动到页面底部&#39;); scrollToBottom(); // 等待滚动完成 await new Promise(resolve =&amp;gt; setTimeout(resolve, 5000)); // 3. 点击下一页 const nextPageButton = findNextPageButton(); if (nextPageButton) { currentPageCount++; // 增加页数计数 console.log(`elesos 点击下一页按钮 当前页数: ${currentPageCount}/${config.maxPageCount}`); nextPageButton.click(); // 点击下一页后等待新页面加载 await waitForListItems(true); } else { console.log(&#39;elesos 未找到下一页按钮或已到最后一页&#39;); } } function startAddControl() { if (config.addControlButtons) { setTimeout(addControls, config.controlButtonDelay); } } // 初始化 function init() { try { waitForListItems(); } catch (error) { console.error(&#39;elesos 初始化出错:&#39;, error); } } // 页面完全加载后初始化（包括所有资源） window.onload = function() { init();};})();开发中遇到2个问题1是一键展开按钮需要等待列表数据加载完才出现，需要延时3秒再点2是滚动条div，直接通过浏览器复制的不行。网页的滚动条div是不是复制的这个需要改。" }, { "title": "n8n系列1:介绍", "url": "/posts/n8n-1/", "categories": "n8n系列", "tags": "n8n系列", "date": "2025-05-01 05:30:00 +0800", "snippet": "n8n 是一个开源的低代码自动化工作流平台，通过可视化界面连接不同的应用程序和服务，star已经91.8k了支持本地部署，创建 AI 工作流，在工作流中支持 MCP 服务全场景自动化王者，复杂流程首选代码 + 可视化双引擎，适配所有用户非技术用户其它竞品:Dify 中国团队,Coze字节的“全能选手”（n8n）、“专项冠军”（Dify）， “快速快餐”（Coze）参考https://weii.dev/n8n/https://weii.dev/n8n-chatgpt-tgbot/https://blog.csdn.net/qyj19920704/article/details/147310329https://www.woshipm.com/ai/6205201.html 对比" }, { "title": "Tampermonkey系列1:介绍", "url": "/posts/monkey-1/", "categories": "Tampermonkey系列", "tags": "Tampermonkey系列", "date": "2025-05-01 04:30:00 +0800", "snippet": "Tampermonkey 是一款浏览器扩展程序，也被称为“油猴”或“篡改猴”，主要用于管理和运行用户脚本（UserScript）。它允许用户通过自定义的 JavaScript 代码修改网页功能、界面或行为，从而提升浏览体验。支持 Chrome、Firefox、Edge、Safari 等主流浏览器。用途 网页功能增强 通过脚本添加新功能，例如视频下载、文库资料解析、网盘直链提取等。 广告拦截与页面优化 屏蔽网页广告、弹窗，调整页面布局或颜色，提升阅读体验。 自动化操作 自动填写表单、批量下载资源、跳过验证步骤等，节省时间。 隐私保护与安全 阻止跟踪器、隐藏敏感信息，或通过脚本限制网站权限。 数据抓取与处理 从网页中提取结构化数据（如价格、评论），或整合到本地工具中。 新手入门指南 安装 Tampermonkey• 在线安装（推荐）：在 Chrome 或 Edge 浏览器中访问应用商店，搜索 “Tampermonkey” 并点击安装。• 离线安装（适用于无法访问商店的情况）：下载 .crx 或 .zip 文件后，在浏览器扩展页面启用“开发者模式”，拖放文件完成安装。 获取用户脚本• 脚本平台推荐：• Greasy Fork：中文友好，提供大量免费脚本（如视频解析、文库下载）。• OpenUserJS：国际社区，适合寻找小众功能脚本。• 安装方法：在脚本页面点击“安装”按钮，Tampermonkey 会自动弹出确认窗口，点击“安装”即可。 管理脚本• 启用/禁用脚本：点击浏览器右上角 Tampermonkey 图标，进入“管理面板”，可批量控制脚本状态。• 调试与编辑：支持内置代码编辑器，用户可自定义脚本逻辑（需 JavaScript 基础）。 新手推荐脚本• 网页去广告：如 “AdGuard” 或 “uBlock Origin 辅助脚本”。• 视频增强：Bilibili 自动宽屏、YouTube 广告跳过。• 效率工具：文库免费复制、网盘直链解析。注意 脚本安全性：仅从可信平台安装脚本，避免隐私泄露。 兼容性问题：部分脚本需特定浏览器版本，建议定期更新 Tampermonkey。 性能影响：过多脚本可能拖慢浏览器速度，建议按需启用。 总结Tampermonkey 通过用户脚本赋予浏览器无限可能性，从基础功能优化到复杂自动化操作均可实现。对于新手，建议从 Greasy Fork 的热门脚本入手，逐步探索个性化需求。如需深度开发，可学习 JavaScript 和 DOM 操作，创建专属脚本。" }, { "title": "架构系列1:Qt桌面应用架构能力提升实践指南", "url": "/posts/architecture-1/", "categories": "架构系列", "tags": "架构系列", "date": "2025-05-01 04:30:00 +0800", "snippet": "前言： 对于拥有大型多人项目经验的C++桌面开发者，提升架构设计能力能让项目在可维护性、扩展性和团队协作上更上一个台阶。本指南将围绕Qt桌面应用的架构设计，系统性地介绍核心能力模型、常见架构模式、实战设计流程，以及学习资源和实践训练方法，帮助你在收到新功能需求后能够快速制定可行的架构方案。 核心架构设计能力模型构建良好架构需要多方面的能力积累。以下是架构设计的核心能力要素： • 模块划分与高内聚低耦合： 学会根据功能将系统划分为清晰的模块，各模块内部保持高内聚、功能单一，对外尽量少暴露内部细节 ￼。模块之间联系应尽可能少，必要的交互要通过明确的接口进行。遵循高内聚、低耦合原则，确保模块独立性，有助于多人协作开发和后期维护 ￼ ￼。模块的大小也要适当，过大则需要进一步拆分，过小则增加管理复杂度 ￼。衡量模块独立性的标准包括耦合度（模块间互相依赖程度）和内聚性（模块内部元素联系紧密程度，理想情况下模块只做好“一件事”） ￼。 • 职责分离与设计原则： 注重单一职责原则，每个模块或类只负责特定功能，避免“大而全”导致的混乱。其它如开闭原则、里氏替换、接口隔离、依赖倒置等SOLID原则都旨在实现更灵活的架构。比如依赖倒置强调高层模块不依赖底层实现细节，双方都依赖抽象接口，从而降低耦合 ￼。遵循这些设计原则可以指导我们在架构层面实现清晰的职责划分和稳定的依赖关系 ￼。 • 依赖管理与分层： 控制模块之间的依赖方向和关系，避免环状依赖和隐式依赖。通常采用分层架构来管理依赖：高层模块依赖底层模块提供的服务，而不应反过来 ￼。典型做法是将系统分为UI层、业务逻辑层、数据访问层等，每层只与相邻层交互。这种分层架构确保了上层变化不会直接影响下层，实现稳定的演进 ￼。例如，对于Qt桌面应用，常见划分是界面层、业务层、数据层，各层职责清晰，有助于大型系统的扩展和并行开发 ￼。在C++中也可借助接口和抽象类来隔离依赖，通过依赖抽象而非实现来降低耦合度。 • 解耦手段与技术： 掌握各种解耦合的实现手段，在模块间交互时尽量避免直接耦合。Qt提供的信号与槽机制就是强大的解耦手段：对象间通过信号/槽通信，而无需直接调用彼此的方法 ￼ ￼。这种发布-订阅风格的通讯让UI和后台逻辑彼此独立，只通过信号槽联系 ￼。除了信号槽，还可以使用观察者模式、事件总线等：例如建立一个全局消息中心（事件总线），让所有模块注册其中发布/订阅消息，实现“一次广播，多处接收”，发布者和订阅者互不依赖 ￼。在复杂场景下，还可自定义QEvent配合事件循环，或采用中介者模式（如由MainWindow充当调度中心）来协调组件通信 ￼。善用这些解耦手段可以降低模块间耦合，使代码更易维护和扩展。 • 设计模式运用： 了解和掌握常用的设计模式，并知道何时应用它们，可以显著提升架构设计的质量 ￼。例如，当需要解耦多个视图与数据时，可运用MVC/MVVM模式（详见下一节）；当需要全局唯一访问点时，可谨慎使用单例模式（如Qt中的QApplication或全局配置管理）；当需要替换算法策略时，可用策略模式；需要延迟对象创建或隔离创建过程时，可用工厂模式等。设计模式提供了经过验证的通用解决方案，但关键在于恰当选型：避免生搬硬套，理解模式背后的原则（如SOLID原则）才是关键 ￼ ￼。通过模式的学习与实践，可以建立“架构思维工具箱”，在设计时快速识别可复用的设计范式，提高代码的可扩展性和可维护性 ￼。 • 架构思维与权衡取舍： 除了具体技术，还需要培养架构层面的思维习惯，例如全局观（从全局视角思考系统组件和交互）、抽象思维（抓住问题的核心抽象，忽略暂时的细节 ￼）、演进意识（考虑未来需求变化和扩展的方向）、风险评估（识别架构薄弱环节和潜在瓶颈）。架构设计充满权衡（trade-off） ￼：要在性能与可维护性、开发速度与灵活性之间取得平衡。例如，过度设计会拖慢开发、增加复杂度，而欠缺设计又会埋下维护隐患。优秀架构师会审时度势地取舍，既不过度设计也不过于短视，KISS原则（保持简单）和YAGNI原则（不要构建用不上的功能）在架构上同样适用。总结来说，核心架构能力模型包括扎实的设计原则指导、模式和手段支撑，以及面向需求变化的系统性思维。 Qt桌面应用的推荐架构模式及项目结构Qt作为跨平台C++框架，在架构层面支持多种模式。根据项目规模和需求，可以选择合适的架构模式以提升代码组织和可维护性。以下是Qt桌面应用中常见的架构模式和典型项目结构：2.1 MVC 与 MVVM 架构模式MVC（Model-View-Controller）模式： MVC是一种经典的架构模式，在Qt中也被广泛采用，用于分离数据、界面和业务逻辑 ￼。 • Model（模型）： 管理应用的数据和业务逻辑，例如使用QAbstractItemModel派生类存储数据。 • View（视图）： 提供数据的可视化呈现，例如QTableView、QTreeView等Qt控件负责显示Model的数据。 • Controller（控制器）： 处理用户输入，并据此更新Model或View。在Qt中通常通过信号与槽机制扮演Controller的角色，响应用户操作信号去调用Model更新，或根据Model变化去通知View刷新 ￼。Qt的Model/View编程体系就是MVC的体现。例如自定义数据模型继承自QAbstractListModel（Model），界面上使用QListView显示数据（View），当用户操作界面触发槽函数更新模型数据，Qt的信号/槽就起到了Controller作用 ￼ ￼。MVC优点在于清晰的职责分离，View和Model解耦合，修改界面不会影响数据处理，新增数据逻辑也不需改动UI，大大提高了可维护性和扩展性。MVVM（Model-View-ViewModel）模式： MVVM是对MVC的改进，尤其适用于Qt Quick（QML）界面开发。在MVVM中，引入ViewModel作为中间层，专注于将Model和View绑定起来 ￼。 • Model： 数据层，提供数据内容和操作接口（例如应用的业务对象或数据源）。 • View： 表现层，通常是QML界面，负责展示数据。 • ViewModel： 桥接层，承载界面状态和逻辑，将Model的数据转换为View可用的形式，并接收View的用户操作再反馈给Model。在Qt Quick中，QML定义界面(View)，C++对象（继承QObject并使用Q_PROPERTY等）可作为ViewModel提供属性给QML绑定，或通过信号槽响应用户交互 ￼。例如QML中的ListView绑定一个ListModel作为Model，借助一个C++ ViewModel（QObject）来处理业务逻辑和提供数据给QML属性。MVVM通过双向绑定和命令模式，减少了界面与业务代码的直接交互，使界面逻辑更简洁。Qt官方的Qt Quick模块天然支持MVVM——QML做View，QQmlContext传入的对象或QObject类型作为ViewModel，数据Model则可以是C++容器封装或QAbstractListModel子类等。MVVM的优点是进一步降低了Controller的存在感，View和Model通过ViewModel关联，便于团队并行开发：UI工程师专注于QML布局，C++工程师开发ViewModel和Model，各自职责清晰。对比选择： 对于偏传统的Qt Widgets界面，MVC依然是实用选择；而对于Qt Quick/QML项目，MVVM更契合。两种模式目的都是关注点分离，开发者应结合项目需求选择。如果界面简单、逻辑有限，可以直接MVC或甚至简单的事件响应；但随着应用复杂度上升，提早引入MVVM能更好地管理状态和交互复杂性。此外，还可根据需要引入Presenter（MVP模式）等变体，但Qt生态中MVC/MVVM已足够覆盖多数场景。2.2 插件化架构与模块化设计对于大型Qt桌面应用，强烈推荐采用模块化、插件化的架构来管理复杂性。当应用规模扩张、团队多人协作时，将不同功能拆分为独立模块或插件能显著降低耦合、提高可扩展性 ￼。 • 模块化 (Modular) 架构： 利用Qt工程的.pro和.pri结构，将代码按功能分类存放在不同子目录/子项目中 ￼。每个模块可编译为静态库或动态库，在主程序中链接或加载。.pri文件可以包含模块的源代码列表和依赖设置，主工程通过include相应.pri来组装模块 ￼。这种方式实现按职责封装代码，模块内部实现细节对外部隐藏，只通过暴露的接口头文件与其他模块通信 ￼。例如，可将UI相关类集中在gui.pri，网络通信相关代码在network.pri，数据库操作在database.pri等 ￼。这样不仅代码组织清晰，也方便多人分别负责不同模块开发。此外，抽取出通用模块制成库或.pri供多个项目重用（“造轮子”），可以极大提升开发效率 ￼。 • 插件化 (Plug-in) 架构： 当项目庞大到一定程度，或需要支持可插拔的可选功能时，插件架构是理想选择 ￼。Qt本身提供了良好的插件支持（QPluginLoader等）。通常有两类插件实现方式：其一是通过动态链接库（DLL/.so）形式，主程序运行时根据需要动态加载这些库实现的功能模块；其二是使用Qt插件机制，将插件放置在约定目录，Qt在运行时扫描加载 ￼。插件需要定义统一的接口，例如定义一个抽象基类接口，主程序通过该接口与插件交互。Qt的元对象系统支持通过Q_DECLARE_INTERFACE和Q_PLUGIN_METADATA宏来标识和加载插件库。这种架构的优点是：功能模块可以独立开发、部署，必要时甚至按需加载以减少主程序体积；不同团队可以并行开发插件，主程序保持内核稳定。Qt Creator IDE本身就是插件架构的经典实例，各种工具（Qt Designer、文本编辑、调试器等）都是插件。 • 层次化与全局管理： 在模块化/插件化的同时，仍需整体架构的层次概念。常见做法是主程序作为核心层或中介层：底层是数据和基础服务模块，上层是UI和业务模块，而主程序协调各模块合作。可以设计一个中间件/管理层，处理不同模块间的调用和消息分发。例如，划分如下典型结构：UI层（界面模块）只负责显示和用户交互；通信层（网络/串口模块）封装外部通信，用单例管理网络连接 ￼；数据层（数据库模块）负责数据存储；业务逻辑层处理核心业务规则，把通信结果转发给UI；还可以有一个中间层模块专门负责连接通信模块和业务模块（作为控制/适配层） ￼。此外，一些独立公共模块如配置管理、日志、更新模块等也可以独立成插件或模块 ￼。通过这种分层+插件架构，应用各部分边界清晰：稳定的核心模块与变动的插件模块分离，降低相互影响 ￼。 • 项目结构组织： 在实际项目中，建议按照上述模块划分建立清晰的目录结构。举例来说：顶层MyApp.pro作为主工程，包含多个子项目/子目录： • core/ 核心模块（主应用，含应用初始化、主窗口，加载各插件）。 • ui/ 界面模块（UI表单、控件，遵循MVC/MVVM结构，与逻辑通过接口通信）。 • network/ 通信模块（网络或设备接口相关，封装通信细节，通过信号/槽或接口提供数据）。 • data/ 数据模块（数据库或文件读写，提供数据存取接口）。 • plugins/ 插件目录（每个子文件夹一个插件项目，可由独立pro构建为dll）。 • common/ 公共库（工具类、模型类等多个模块共享的代码，以静态库或pri形式提供）。利用Qt的子项目（Subdirs）功能，可以把这些模块工程组合在一起，方便统一构建和管理。全局配置（如配置文件读取AppConfig）、全局事件中心（如前述的消息总线AppEvent）等可以在core模块中实现 ￼ ￼。例如，通过一个全局单例的事件中转类，让各模块不直接互调，而是通过发布事件由中转类路由，这比层层调用更清晰 ￼。总之，合理的项目结构既要方便开发，又要服务于架构的解耦目标——模块边界清晰，接口契约明确，依赖关系单向且受控 ￼。2.3 其他架构模式提示 • 三层架构 vs. C/S架构： 桌面应用通常是本地三层（UI-逻辑-数据），但如果需要客户端/服务器（C/S）架构（例如客户端通过网络与服务器交互），也可以在架构上将前端（Qt客户端）与后端（服务器服务）当作两个独立系统设计。这种前后端分离可以通过定义清晰的通信协议（如HTTP/REST, gRPC等）实现，使桌面应用更多地关注前端展示和本地体验，而复杂业务放在服务端。这在某些企业应用中常见，但属于更大范围的架构范畴，在此不深入展开。 • 状态管理和响应式架构： 如果使用Qt Quick/QML，大型应用还需考虑状态管理架构模式，例如单向数据流（类似Flux架构）在Qt中的实践。有社区方案将Redux模式引入Qt/QML，使用一个全局Store管理状态、配合信号通知视图更新。这属于更高级的架构策略，可根据应用复杂度选用。 • 微服务架构： 微服务一般针对后端服务系统，但对于桌面应用而言，可以借鉴其思想将应用拆解为多个进程/服务，通过IPC通信，提高可靠性和解耦。Qt提供Qt Remote Objects、QLocalSocket/QTcpSocket等机制支持进程间通信。如果应用非常庞大甚至可拆成多个子应用进程运行（例如Adobe软件套件这种），可以考虑这种分布式应用架构 ￼。但一般桌面程序更多还是在单进程内通过插件模块划分来实现类似的解耦效果。总之，Qt桌面应用的架构选择应基于需求规模和变化性。小型应用可从简单MVC开始，逐步演进；中大型应用务必模块化分层，必要时引入插件机制 ￼。良好的架构模式结合清晰的项目结构，能够支撑团队高效协作并从容应对新需求挑战。 实战流程：新功能需求的架构设计步骤当你收到一个新的功能需求时，如何快速地将其转化为合理的架构设计方案？以下是一套实战流程，可帮助你高效完成从需求到方案文档的过程： 需求拆解与澄清： 首先仔细阅读并理解新功能需求的描述，必要时与需求提出方（产品经理、用户）沟通澄清细节。将大需求拆解成若干子需求或用例场景，明确功能的边界和范围。分析哪些现有功能会受到影响，有无潜在冲突或兼容性要求。梳理关键业务流程和数据流：例如输入是什么，输出或结果要达到什么，以及过程中涉及哪些业务规则。只有把需求理解透彻，才能避免架构设计偏离目标。 识别边界与模块划分： 基于需求分析，确定该功能涉及哪些领域或模块。如果是全新功能，考虑它是否归属现有某个模块，还是需要新建模块来实现。如果现有代码中已有相关部分，评估是扩展还是重构。例如：“这个新功能主要是报表导出”，那么可能涉及UI（新增导出按钮/对话框）、业务逻辑（组织数据格式）、数据层（访问数据库或文件）。由此决定是否新建报表模块或在现有模块中扩展。划定功能边界也包括确定与其他系统或模块的接口边界。例如功能需要调用外部服务，那接口协议就是边界；或者新模块与主程序交互，通过某个抽象接口调用就是边界。边界明确后，就可以初步规划模块职责。 抽象接口与交互设计： 在确定模块的基础上，设计模块之间的接口契约。这是架构的关键步骤：通过定义良好的接口来隔离各部分，实现解耦合。思考每个模块向其他模块提供哪些服务、需要哪些输入输出。用UML接口图或简单列表列出接口函数/信号。例如，若新模块负责报表导出，可以定义接口IReportService，提供方法如exportReport(data, format)；UI层调用这个接口，不需要关心内部如何实现导出。接口最好基于抽象类或纯虚类定义，在C++中可用抽象基类或者通过signals/slots作为接口（比如UI发出requestExport信号，由后台槽接收处理）。同时，约定好数据交互格式，例如使用Qt的QVariant或自定义的数据结构。事件驱动的接口（如信号/槽）往往更松耦合，UI只需发信号，不需要知道谁处理 ￼。确保接口设计遵循高内聚、低耦合：每个接口尽量聚焦单一功能，不要混杂太多职责；接口参数和返回简单清晰，必要时引入数据结构来封装复杂数据，避免大量参数。这个阶段产出可以是接口定义文档或类声明草稿，便于团队讨论确认。 设计模块内部职责与交互： 在接口确定后，为每个模块设计其内部结构。列出模块内主要的类和职责分工。例如报表模块内部可能有ReportManager（协调导出流程）、ReportFormatter（处理格式转换）、FileWriter（输出到文件）等类。运用设计模式来安排内部结构：比如策略模式选择不同格式导出实现，模板方法模式封装导出流程等。考虑模块内部如何管理状态和与其他模块通信：是同步调用接口，还是通过异步消息。对于Qt应用，模块内部也可采用信号槽机制解耦，例如后台逻辑处理完数据后emit一个信号通知UI层刷新。 ￼建议由主窗口或核心模块充当消息调度者，各子模块彼此不直接依赖，而是通过中央调度模块连接，这样模块可以独立更换或修改而不影响其他部分。确保单一职责贯穿设计：每个类、每个函数都有明确目的。依赖方向也要规划好：遵循依赖倒置，高层（例如UI）通过接口依赖底层服务，底层模块避免反向依赖UI细节。 考虑扩展性和边缘情况： 对方案进行健壮性和扩展性检查。思考未来如果需求变化，这个架构能否较容易地适应？例如参数要增加、新格式支持、性能要提升等，是否有留有余量。检查解耦程度：如果某模块将来替换实现，只要符合接口即可，不应牵连大范围修改。检查依赖关系：尽量呈现树状或分层结构，而非网状交叉依赖 ￼。此外，考虑异常和边缘情况处理，比如网络失败、数据异常等模块如何配合处理。如果新功能对非功能需求（性能、内存、平台适配等）有要求，也需要在设计中有所安排（如大数据量导出要考虑分段处理、防止阻塞UI线程等等）。这一阶段常需要在几种可选方案间取舍：可以列出方案A/B比较，从复杂度、开发成本、未来维护等方面评估，选择更优的方案。同时牢记不过度设计：满足当前需求下的适度灵活即可，避免为不确定的将来增加不必要的抽象。 形成方案文档： 将以上设计成果整理成架构设计文档。文档应条理清晰，包括：需求简述、设计概述、模块划分图、关键接口列表、模块间交互流程（可用时序图或流程图描述关键交互）、重要类的职责说明、所用设计模式简述，以及满足需求的论证。对于Qt应用，还可附上模块依赖关系图（例如哪个模块作为插件，如何加载）、信号槽连接关系示意等。文档不需冗长，但要使读者（团队成员）清楚整个方案如何实现需求。附加说明如：为何采用某架构模式，有无替代方案及其权衡，也可以写入以供日后参考。完成初稿后，可以召集相关开发者进行评审，听取反馈并完善设计。架构设计文档既是团队沟通的依据，也是日后维护的宝贵资料。 通过上述流程，从理解需求开始，逐步分解、抽象、设计，最终输出文档，你就完成了一次系统的架构设计。在这个过程中，经验发挥着重要作用：熟悉的模式会让你快速想到解决方案，了解的套路会让你少走弯路。随着不断练习，你将能更加快速地针对新需求勾勒出架构蓝图。 推荐学习资料提升架构能力离不开持续的学习。以下书籍、博客和课程资源可帮助你深入架构设计理论和Qt/C++实践： • 《大型C++程序设计》（Large-Scale C++ Software Design，John Lakos）：经典著作，阐述了模块划分和依赖管理的方法学，是理解大型项目架构的基础读物 ￼。Lakos在更新的《大规模C++：第1卷：架构与流程》中继续深入探讨了构建可扩展C++系统的原则，特别强调了依赖方向对可维护性的影响。 • 《设计模式：可复用面向对象软件的基础》（Gang of Four Design Patterns）：面向对象设计模式的权威著作 ￼。掌握其中23种设计模式及其适用场景，将极大提升你的架构和设计技巧。这本书有中文译本，可结合实际编码体会模式的作用。 • 《架构整洁之道》（Clean Architecture，Robert C. Martin）：软件架构领域的现代经典，讲述如何构筑独立于框架、UI、数据库的“清洁”架构，提出了面向架构的SOLID原则应用。适合已有一定经验后深入理解架构本质，学习如何保持架构的灵活性和可测试性。 • 《Domain-Driven Design》（领域驱动设计，Eric Evans）：虽然偏业务建模，但其界限上下文等概念对架构划分模块很有指导意义。学会DDD能帮助你从业务角度规划系统模块，建立清晰的领域边界，对于复杂企业级应用架构尤其有用。 • 《Just Enough Software Architecture》（恰如其分的软件架构，George Fairbanks）：一本实用导向的架构书，强调如何以合适的细粒度进行架构设计，不夸大也不忽视。提供了分析质量属性、制定架构决策的指导，可帮助你掌握架构设计的平衡艺术。 • Qt/C++相关书籍与文档： 推荐 Alan Ezust 等著的“An Introduction to Design Patterns in C++ with Qt”（《Qt设计模式简介》） ￼。这本书以Qt为背景讲解设计模式，实现“Qt Way”的C++架构风格，涵盖高效代码重用和分层等内容，对Qt程序架构设计很有启发意义。此外，Mark Summerfield 的《Advanced Qt Programming》（《Qt高级编程》）深入探讨了Qt 4/5中的高级主题，包含一些架构思考。Qt官方文档和Qt Wiki上也有Best Practices章节以及Model/View编程手册，可以作为随时查阅的参考 ￼。 • 优秀博客与社区资源： 国内Qt社区有不少资深开发者分享经验。例如CSDN上飞扬青云的专栏分享了很多Qt架构和模块化经验 ￼。博客园上wzzkaifa的系列文章探讨了Qt前后端解耦的多种方式 ￼ ￼，涵盖信号槽、事件总线、MVC/MVVM等实战技巧，非常贴近Qt开发者需求。英文社区方面，Qt Blog、KDAB和ICS等公司的技术博客也经常有架构相关话题（如“大型Qt应用的架构优化”“QML架构最佳实践”等）。另外，Stack Overflow和Qt论坛有众多讨论帖，可以通过搜索具体问题（如“Qt architecture best practice”）找到他人的经验 ￼。 • 在线课程与视频： 如果喜欢系统课程，建议关注一些知名讲师的架构课程。例如Mozilla前架构师的软件架构入门课（需翻墙，Coursera等平台上有），或者国内极客时间的《软件架构设计》系列专栏。这些课程从宏观架构原理到具体案例都有涉及。针对Qt，YouTube上有Qt官方和KDAB的演讲视频（如“QML/C++ Architecture Best Practices” ￼），以及诸如C++ China社区的大会视频，搜关键词“Qt架构”可能找到一些中文演讲。通过这些多媒体资源，你可以学习到架构师们在实际项目中总结的经验和教训。 • 团队协作与Mentor： 最后不要忽视从实际工作中学习。如果身边有资深架构师或Technical Lead，请主动向他们请教设计思路。参与团队的架构评审会议，多听多问。加入一些架构师社群或读书会，与同行交流也是有效的学习途径。实践出真知，理论学习和项目历练相结合，才能真正内化为自己的架构能力。提示： 在学习过程中，建议挑选一两个自己的或开源的Qt项目作为沙盘，边学边在其中应用新的架构思想。例如读完某章节设计模式，就思考能否改进项目中的相应部分。这种学以致用的方式效果最好。 实践训练计划光看书不练习，架构能力难以真正提高。下面提供一个循序渐进的实践训练计划，包含具体可操作的方法，帮助你将学到的架构理念转化为实际技能： • (1) 代码重构练习： 找一段你熟悉的现有代码（最好是中等规模的Qt模块或旧项目），尝试进行架构重构。首先分析这段代码存在的架构问题，例如MainWindow过于臃肿、UI逻辑和数据耦合严重、全局变量泛滥等。然后制定重构计划，应用所学的原则拆分职责和模块。具体练习思路：将大的类拆分成更小的类，每个类各司其职；为模块引入抽象接口，替换直接依赖；把业务逻辑从UI类中提取到后台类，通过信号槽连接UI ￼；引入设计模式解决重复代码或复杂条件判断。例如，将一段硬编码的业务流程重构为状态模式或策略模式实现。重构过程中，可以对比前后架构图和代码差异，体会架构改进带来的好处（模块清晰了，依赖减小了）。这个练习可以从小范围开始（重构一个对话框模块），逐步扩展到整个子系统。通过重构，你将亲身体验如何将不良结构改造成优雅架构，这是提升架构能力的实战必经之路。 • (2) 架构方案对比练习： 针对一个简单的功能需求，分别设计两到三种不同架构方案，然后比较他们的优劣。这种练习可以选取日常生活中的小应用场景，例如“待办事项管理工具”或“文件搜索功能”等。方案A也许是单体架构（所有逻辑写在一起）；方案B采用MVC分层，方案C进一步使用插件或模块拆分。为每个方案画出模块图，写几个关键接口定义，然后从以下方面评价：代码复杂度、开发难度、未来添加新需求的方便程度、性能影响、团队协作影响等。通过对比，你会更深入地理解架构决策的取舍。例如，模块划分细致虽然初期开发稍复杂，但后期扩展容易；反之简单架构前期快，但可能很快遇到维护瓶颈 ￼。把你的对比分析写成小报告，试着向假想的团队解释你倾向哪个方案、为何。这种多方案权衡的训练，有助于培养架构决策的能力。 • (3) 独立设计一个子系统： 选择一个你感兴趣的功能，尝试从零开始进行架构设计和实现，过程完全模拟正式项目。这个子系统可以很小，例如“日志记录系统”、“插件管理器”、“模拟聊天模块”等。按照需求 -&amp;gt; 设计 -&amp;gt; 实现 -&amp;gt; 测试的流程走一遍：先写下功能需求；进行模块划分（比如日志系统包含日志接口、文件输出模块、日志格式策略等）；设计接口和数据结构；然后编码实现各模块，并编写简单测试验证功能。特别强调在实现过程中遵守你设计的模块边界，通过接口交互而非破坏封装。这个练习能够锻炼你综合运用架构知识的能力，从无到有地搭建一个小型系统。完成后，对比反思哪个部分设计得好，哪个地方后来发现可以改进。必要时迭代重构，完善架构。通过动手设计实现一个完整组件，你将收获宝贵的一线经验。 • (4) 阅读并模仿优秀开源项目： 挑选一两个优秀的Qt/C++开源项目，研读它们的架构设计，并进行有针对性的模仿练习。阅读时关注项目的目录结构、模块划分、关键接口和设计模式运用。例如，研究Qt Creator、LibreOffice这些大型Qt应用如何组织上百万行代码；或者阅读一些中型开源项目（如Notepad++、qBittorrent）体会它们的分层设计。阅读时做笔记：项目如何区分核心模块和UI模块？有没有使用插件架构？接口命名和模块边界是怎样的？然后尝试将其中某些架构思想迁移到你的代码中。例如你发现某项目用消息中心解耦模块，你可以模仿实现一个简化的消息中心用于自己的项目。 ￼提供了全局消息中心的示例，你可以以此为蓝本，在练习项目中实现发布-订阅模式用于模块通信。通过读优秀代码，站在巨人肩膀上，你可以更快领悟架构技巧。同时要积极思考：若让你设计这个系统，你会如何做，有哪些不同。这种带着问题的阅读，会极大深化你的架构直觉。 • (5) 架构Kata和团队练习： 所谓“架构卡塔”（Architecture Kata）是一种练习形式：给定一个架构设计挑战，在固定时间内由个人或小组给出架构方案。你可以自己每周选择一个架构练习题，例如“设计一个在线图书馆系统的架构”或“设计一款音乐播放器应用的架构”。限制在比如1小时内，写出概要的模块图和说明，然后隔几天再回头审视，看看有无改进之处。如果有志同道合的同事或朋友，组成小组头脑风暴更佳：大家各自提出方案，互相讨论优缺点。这个过程可以模拟架构设计的思维碰撞，提高全局思考和沟通能力。另外，如果你的公司有架构评审或技术分享会议，不妨主动参加甚至主讲一次，把自己的架构方案拿出来接受反馈。这种压力测试式的练习能发现很多平时忽略的问题。在互动中，你也学会阐述架构思路，这是架构师的重要技能。 • (6) 持续的小项目实践： 除了上述专题练习，保持编码实践也很重要。尝试每隔一段时间做一个小项目（不一定都完成，重在过程），例如用Qt写一个Todo应用、记账程序或者小游戏。在每个项目中刻意应用一种新架构思路：这一项目试试MVVM加状态机，下一个项目试试插件式架构等等。在真实代码中验证学习所得，才能将概念变成熟练技巧。项目不需要大而全，小而精也行，关键是贯穿设计到实现的完整周期。随着项目实践增多，你会逐渐形成个人架构经验库，面对不同需求能迅速类比到类似的设计方案。最后，实践训练要循序渐进且持之以恒。刚开始可能会觉得设计比实现花时间，但随着经验增长，你会越来越快地制定出合理架构。每一次练习都当作是给自己项目当架构师的机会，总结经验教训。久而久之，你在真实工作中面对新需求做架构设计时，就会游刃有余，在有限时间内拿出高质量方案。结语： 架构能力的提升是一个长期过程，既需要理论知识的丰富，也需要大量实践磨炼。通过本指南系统学习核心架构理念、掌握Qt应用常见架构模式，并在工作和练习中不断应用、反思，你一定可以逐步成长为一名架构设计能力出众的开发者。记住，在架构世界里没有银弹，合适的就是最好的。愿你在提升架构能力的旅途中学有所成，在未来的项目中构筑出健壮优雅的Qt应用架构！祝好运！参考资料： 1. CSDN博客：《探索QT软件开发的架构设计：从设计理念到实践应用》 ￼ ￼ 2. CSDN博客：《Qt项目架构经验总结》 ￼ ￼ 3. 博客园：wzzkaifa《Qt的前端和后端过于耦合》系列 ￼ ￼ 4. Stack Overflow：Preferred way to design application architecture in Qt ￼ 5. 《大规模C++软件设计》（John Lakos）书评摘录 ￼ 6. Qt Wiki：《An Introduction to Design Patterns in C++ with Qt》书介 ￼" }, { "title": "Flutter系列1:flet", "url": "/posts/flutter-1/", "categories": "Flutter系列", "tags": "Flutter系列", "date": "2025-05-01 04:00:00 +0800", "snippet": "刚开始学习Flutter,就找它的其它语言替代品，是不是有点不专一了。Flet（https://flet.dev/）是一个基于 Flutter 渲染引擎构建的开源框架，但与原生 Flutter 开发模式有显著差异。与 Flutter 的核心关系如下：⚙️ 一、技术架构关系 底层依赖 Flutter 渲染引擎Flet 直接利用 Flutter 的 Skia/Impeller 渲染引擎实现跨平台 UI 绘制，因此其应用在 iOS、Android、Web、桌面等平台的表现与 Flutter 一致，具备 60fps 高性能和像素级多端一致性。 区别：Flet 不要求开发者直接使用 Dart 语言或 Flutter Widget 体系，而是通过 Python（或其他语言）抽象层生成 UI 逻辑。 简化 Flutter 开发模型 Flet 将 Flutter 的复杂 Widget 树简化为命令式编程模型，例如用 Python 代码直接控制按钮、文本框等组件，无需深入 Dart 生态。 例如：通过 Python 创建按钮并绑定事件： import fletdef button_clicked(e): e.control.text = &quot;Clicked!&quot;flet.app(target=button_clicked) 💎 二、核心功能定位 面向非前端开发者Flet 的目标用户是 Python/Go/C# 等后端语言开发者，允许他们用熟悉的语言构建全栈应用，无需学习 Dart 或前端技术栈。 典型场景：快速开发内部工具、数据看板、信息录入系统等。 单体架构设计与 Flutter 需搭配后端服务不同，Flet 应用是单体有状态应用，内置 Web 服务器和实时通信能力，天然支持多用户交互（如实时协作应用）。 部署灵活性支持多种交付形式： Web 应用（通过浏览器访问） 桌面独立应用（打包为 Windows/macOS/Linux 原生二进制） 移动端 PWA 或通过 Flet 客户端运行。 🆚 三、与传统 Flutter 开发对比| 维度 | Flutter (原生) | Flet ||——————|———————————–|———————————–|| 编程语言 | Dart（强类型，面向UI优化） | Python/Go/C#（后端语言友好） || 技术定位 | 全功能跨平台 UI 框架 | 快速原型工具 &amp;amp; 轻量级应用框架 || 开发模式 | 声明式 Widget 树 | 命令式组件控制 || 原生依赖 | 需处理平台通道（Channel）通信 | 内置通信层，无需手动桥接 || 多用户支持 | 需自行实现后端实时通信 | 原生支持多用户实时交互 || 学习曲线 | 需掌握 Dart 和 Flutter 生态 | 仅需 Python 基础 |⚠️ 四、局限性 性能深度优化不足复杂动画或高频交互场景下，Flet 的抽象层可能带来性能损耗，不如直接使用 Flutter 灵活。 生态成熟度较低Flet 的组件库和工具链远不如 Flutter 丰富（如缺乏 DevTools 深度调试支持）。 企业级能力欠缺对原生系统能力（如蓝牙、传感器）的调用需依赖第三方插件，成熟度不及 Flutter 的 pub.dev 生态。🧩 五、典型应用场景推荐 ✅ 适用 Flet 的场景 Python 开发者快速构建数据可视化后台或内部工具。 轻量级跨平台 MVP 产品验证（如信息展示型 App）。 教育领域简化 UI 编程教学（避免 Dart 学习成本）。 ❌ 需选择原生 Flutter 的场景 高性能游戏/复杂动画应用（如 Lottie 动画密集型界面）。 需深度集成原生 SDK 的企业级应用（如支付、AR 功能）。 已有 Flutter 团队且追求长期技术栈统一的项目。 💎 总结Flet 本质是 Flutter 渲染能力的“上层封装”，通过牺牲部分灵活性和性能深度，换来了对后端开发者的低门槛接入。它的价值在于填补了 Python 生态与高性能跨平台 UI 之间的空白，而非替代 Flutter。若团队核心优势是 Python 且需求偏向轻量级应用，Flet 是高效选择；若追求极致性能或复杂交互，原生 Flutter + Dart 仍是更优解。" }, { "title": "RPA系列1:介绍", "url": "/posts/rpa-1/", "categories": "RPA系列", "tags": "RPA系列", "date": "2025-04-30 05:30:00 +0800", "snippet": "RPA（机器人流程自动化）RPA（Robotic Process Automation）影刀、Automa、Power Automate与UiPath四款RPA产品对比 影刀RPA• 定位：国内电商场景标杆工具，主打中文环境适配与轻量化操作。• 优势：◦ 易用性：拖拽式操作，支持手机/桌面/网页全场景自动化，尤其擅长电商平台（如淘宝、拼多多）的订单处理、数据抓取。◦ AI融合：集成AI Power模块，可结合大模型生成自动化流程，降低开发门槛。◦ 生态整合：2024年底收购Automa后，补充了浏览器自动化能力，形成“RPA+低代码+AI”产品矩阵。• 开源情况：核心产品闭源，但收购后的Automa仍保留开源特性（需通过浏览器插件独立使用）。• 局限性：◦ 企业版价格较高（299元/月/账号），免费版限制任务次数；◦ 复杂流程处理能力弱于UiPath，需依赖Python扩展。 Automa• 定位：轻量级开源浏览器自动化工具，2024年被影刀收购后整合为影刀生态的网页自动化模块。• 优势：◦ 零代码开发：通过浏览器插件实现网页点击、表单填写、数据抓取，适合个人用户快速上手；◦ 开源免费：代码托管于GitHub，社区活跃，支持自定义脚本扩展；◦ 跨平台兼容：支持Chrome/Firefox，可联动Google Sheets、Telegram等工具。• 适用场景：电商价格监控、社交媒体批量操作、科研数据采集等轻量化任务。• 局限性：◦ 功能局限于浏览器内操作，无法对接本地软件或企业级系统；◦ 复杂逻辑需依赖脚本开发，缺乏可视化调试工具。 Power Automate（微软）• 定位：微软生态内的低代码自动化工具，深度集成Office 365。• 优势：◦ 无缝集成：与Excel、Teams、SharePoint等微软产品联动性强，适合企业级审批流与数据同步；◦ AI Builder：内置文档识别、情感分析等AI能力，支持复杂数据处理；◦ 免费版可用：个人用户可通过社区版实现基础自动化。• 开源情况：闭源，需订阅企业版解锁高级功能（如无人值守机器人）。• 局限性：◦ 非微软生态适配性差（如电商平台、钉钉等）；◦ 执行效率较低（如Excel操作速度弱于影刀）。 UiPath（国际标杆）• 定位：全球领先的企业级RPA平台，覆盖复杂业务流程。• 优势：◦ 功能全面：支持AI+OCR、跨系统集成（如SAP/Oracle），适合金融、医疗等高合规场景；◦ 社区生态强大：免费社区版功能完整，提供1000+插件与学习资源；◦ 云端管理：企业版支持分布式部署与机器人集群调度。• 开源情况：闭源，社区版免费但限制商业用途。• 局限性：◦ 中文支持较弱，本地化适配需二次开发；◦ 企业版按机器人数量收费，成本高昂（约$2,000/机器人/年）。总结对比表维度 影刀RPA Automa Power Automate UiPath核心场景 电商、中小企业 网页自动化 微软生态办公场景 跨国企业复杂流程技术门槛 低（零代码） 极低（插件式） 低（拖拽式） 中高（需逻辑设计）开源情况 闭源（Automa部分开源） 开源 闭源 闭源（社区版免费）典型用户 电商运营、个人开发者 个人/轻量化需求 企业IT部门 开发团队/大型企业成本 企业版299元/月/账号 免费 企业版按订阅收费 企业版$2,000+/机器人选型建议• 个人/轻量需求：优先选择Automa（免费开源）或影刀免费版（电商场景友好）。• 微软生态企业：Power Automate最佳，尤其适合Office自动化与审批流。• 全球化复杂流程：UiPath功能全面，但需预算充足。• 中国本土化场景：影刀整合Automa后覆盖更广，性价比突出。" }, { "title": "MCP系列2:如何实现一个 MCP Server", "url": "/posts/mcp-2/", "categories": "MCP系列", "tags": "MCP系列", "date": "2025-04-30 05:30:00 +0800", "snippet": "MCP servers 可以提供三种主要类型的功能：Resources（资源）：类似文件的数据，可以被客户端读取（如 API 响应或文件内容）Tools（工具）：可以被 LLM 调用的函数（需要用户批准）Prompts（提示）：预先编写的模板，帮助用户完成特定任务示例主要以工具为例https://modelcontextprotocol.io/tutorials/building-mcp-with-llmshttps://modelcontextprotocol.io/quickstart/server需要python mcp sdk安装好uv(用 Rust 编写的超快速 (100x) Python 包管理器和环境管理工具，定位为 pip 和 venv 的替代品)构造好prompt，并实现mcp server测试mcp server并接入Claude参考：https://zhuanlan.zhihu.com/p/29001189476" }, { "title": "商品选购系列14:母亲节礼物", "url": "/posts/shopping-14/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2025-04-29 05:35:00 +0800", "snippet": "综合实用性、情感价值和市场热度一、健康养生类 健康体检套餐◦ 全面了解母亲身体状况，预防疾病。 颈椎/颈部按摩仪◦ 如SKG颈椎按摩仪（热敷+仿人手揉捏）或欧姆龙颈部按摩仪（3D揉捏技术）。 百年锦坊草本舒睡枕◦ 含艾草、决明子等天然草本，热敷缓解颈椎疲劳，助眠效果显著。 鲜炖燕窝礼盒◦ 小仙炖短保鲜炖燕窝，含燕窝酸和银耳，滋养肌肤。 除螨仪◦ 希亦RM1除螨仪（100%除螨率+紫外线杀菌），适合清洁床品和毛绒玩具。二、实用家电类 内衣洗衣机◦ 希亦ACE Pro（仿手洗技术+99.9%洁净率），解放双手。 超声波清洗机◦ 希亦CG清洗机（超声波+UVC杀菌），清洁眼镜、首饰等小物件。 破壁机◦ 苏泊尔静音破壁机，制作豆浆、养生粥，营养易吸收。 扫地机器人◦ 云鲸扫拖一体机器人，自动规划路径，减少家务负担。 养生壶◦ 摩飞多功能养生壶，支持煮茶、炖汤，智能预约省心。三、情感与定制类 定制相册/影集◦ 整理家庭照片，搭配手写祝福，定格珍贵回忆。 手写情书/人生故事集◦ 记录母亲的人生经历或刻字竹炭保温杯，传递感恩。 贵金属四、时尚与生活美学 真丝丝巾◦ 提升穿搭质感，适合日常或正式场合。 珍珠项链◦ 象征优雅，适配不同年龄段。 香氛沐浴礼盒◦ 浔至XFINDING礼盒（白松露精华+舒缓香氛），仪式感满分。 抗衰老护肤品套装◦ 欧莱雅复颜系列（玻色因抗皱）或温和美容仪。五、科技与智能穿戴 智能手表◦ 监测心率、睡眠，提醒用药，适合关注健康的母亲。 电子阅读器◦ 护眼屏幕+大容量存储，满足阅读爱好。六、美食与养生 桃胶雪耳礼盒◦ 中式养生组合，搭配炖煮教程，润肺养颜。其它• 鲜花（康乃馨）：永恒经典，搭配手写贺卡更暖心。• 纯钛保温杯：宫菱母婴级安全设计，长效保温。• 陪伴体验：全天陪伴用餐、观影或短途旅行。" }, { "title": "MCP系列1:介绍", "url": "/posts/mcp-1/", "categories": "MCP系列", "tags": "MCP系列", "date": "2025-04-29 05:30:00 +0800", "snippet": "是一个统一的协议标准，使 AI 模型能够以一致的方式连接各种数据源和工具，类似于 AI 世界的”USB-C”接口。MCP 的优势：MCP 提供很多现成的插件，你的 AI 可以直接使用。使用方式https://modelcontextprotocol.io/quickstart/user 配置成功后可以在 Claude 中测试：Can you write a poem and save it to my desktop? Claude 会请求你的权限后在本地新建一个文件。有哪些mcp服务：https://github.com/punkpeye/awesome-mcp-servershttps://mcpservers.org/https://github.com/modelcontextprotocol/serversMCP 由三个核心组件构成：Host、Client 和 Server。Host一般就是chat app，server负责具体执行模型是如何确定工具的选用的？将所有的 tools 的功能描述格式化成字符串供 LLM 使用，如果执行失败，会skip掉无效的调用请求。工具文档至关重要 - 模型通过工具描述文本来理解和选择工具，因此精心编写工具的名称、docstring 和参数说明至关重要。由于 MCP 的选择是基于 prompt 的，所以任何模型其实都适配 MCP，只要你能提供对应的工具描述。但是当你使用非 Claude 模型时，MCP 使用的效果和体验难以保证（没有做专门的训练）。参考https://zhuanlan.zhihu.com/p/29001189476" }, { "title": "自媒体系列2:播客", "url": "/posts/media-2/", "categories": "自媒体系列", "tags": "自媒体系列", "date": "2025-04-29 04:00:00 +0800", "snippet": "播客（Podcast）是一种以音频或视频内容为主的数字广播技术，其名称来源于苹果公司的“iPod”与“广播”（broadcast）的结合。用户可通过订阅（RSS技术）自动接收更新内容，并自由选择收听时间与方式，具有高度的灵活性和个性化特点。 内容形式：早期以音频为主，现逐渐涵盖视频、文字等多媒体形式，常见内容类型包括对谈、知识分享、故事叙述等。 与博客的区别：博客以图文为主，播客则以音视频为核心，更强调陪伴感和场景适应性（如通勤、家务等场景）。 技术特点：基于订阅模式，支持离线下载，内容可跨平台同步至手机、电脑或便携播放器。二、国内外知名播客平台 国际平台 Apple Podcasts：最早的播客平台之一，覆盖海量内容，用户可通过iOS设备或iTunes访问。 Spotify：以音乐流媒体起家，现已成为全球播客内容的重要分发平台，支持创作者上传节目并参与广告分成。 Google Podcasts：跨平台服务，适合Android和iOS用户，整合Google生态资源。 Anchor（由Spotify收购）：提供免费制作、发布工具，支持创作者通过广告植入和赞助获取收益。 国内平台 喜马拉雅：国内头部音频平台，用户基数庞大，支持付费订阅、广告分成和品牌合作。 小宇宙：新兴的垂直播客平台，主打年轻用户群体，提供简洁的交互体验和社区互动功能。 网易云音乐：除音乐外，开辟播客专区，支持创作者通过付费节目和打赏获得收益。 蜻蜓FM：专注高品质音频内容，吸引高端用户，提供版权合作和广告植入机会。 三、支持内容创作者收益的平台 广告与赞助分成 Spotify/Anchor：通过动态广告插入（DAI）技术，创作者可参与广告收益分成。 喜马拉雅：提供广告位合作，并根据节目流量与品牌方联合推出定制内容。 付费订阅与会员制 Apple Podcasts/Spotify：支持创作者设置付费订阅频道，用户付费后可收听独家内容。 小宇宙：探索付费节目模式，优质内容可通过用户直接付费获得收益。 品牌合作与活动变现 蜻蜓FM/网易云音乐：与品牌联合推出播客节目，或通过线下活动门票销售、衍生品开发获利。 荔枝播客：支持创作者通过直播打赏、虚拟礼物等互动形式获取收益。 其他变现方式 电商导流：部分平台（如喜马拉雅）允许播客主推荐商品并赚取佣金。 版权授权：热门节目可授权至影视、图书等领域，如《故事FM》的IP衍生开发。 创作者建议：深耕垂直领域（如财经、文化），结合多平台分发（如同步上传至Apple Podcasts和喜马拉雅），并利用社交媒体引流。" }, { "title": "自媒体系列1:活跃APP排行榜", "url": "/posts/media-1/", "categories": "自媒体系列", "tags": "自媒体系列", "date": "2025-04-28 04:00:00 +0800", "snippet": "全称：Monthly Active Users（每月活跃用户数）一、月活跃用户（MAU）全球TOP 20 Facebook◦ 30.7亿（社交平台，Meta旗下，覆盖全年龄段用户） YouTube◦ 27亿（视频平台，日均播放时长超2.8小时） WhatsApp◦ 24.2亿（即时通讯工具，隐私保护与全球化优势） Instagram◦ 23.6亿（视觉化社交平台，年轻用户占比超70%） TikTok（抖音国际版）◦ 16.7亿（短视频霸主，算法驱动用户增长） 微信（WeChat）◦ 13.8亿（中国超级应用，融合社交、支付、小程序生态） Messenger◦ 11.1亿（Meta旗下独立通讯应用，与Facebook账号深度绑定） Telegram◦ 9.02亿（加密通讯工具，以安全性和群组功能著称） 抖音（中国版）◦ 8亿（国内短视频头部应用，商业化成熟） 淘宝◦ 8.2亿（中国电商龙头，直播电商占比超40%） 支付宝◦ 8.5亿（金融生态覆盖支付、理财、政务服务） QQ◦ 6.6亿（传统即时通讯工具，下沉市场活跃） 微博◦ 5.9亿（社交媒体平台，热搜与明星内容主导） 快手（含极速版）◦ 5.73亿（短视频平台，下沉市场渗透率显著） 百度◦ 5.5亿（中文搜索引擎，AI技术推动语音与图像搜索） 拼多多◦ 5.51亿（低价策略吸引下沉市场） 京东◦ 5.51亿（电商平台，物流与自营商品优势） 美团◦ 4.96亿（本地生活服务，外卖日配送1.2亿单） Snapchat◦ 2.55亿（年轻用户为主的即时通讯与社交应用） 高德地图◦ 8亿（出行刚需，聚合打车与本地生活服务）二、日活跃用户（DAU）全球TOP 20全称：Daily Active Users（每日活跃用户数） 微信◦ 超10亿（社交与支付场景高频使用） Facebook◦ 约15亿（推算自MAU，社交与内容互动主导） 抖音（含极速版）◦ 6.3亿（短视频与直播吸引用户长时间停留） 淘宝◦ 4.1亿（购物转化率提升，直播电商驱动） 拼多多◦ 3.5亿（低价策略与“百亿补贴”高频触达） 美团◦ 1.7亿（外卖与本地生活服务高频需求） 京东◦ 1.36亿（外卖业务上线推动增长） YouTube◦ 约13.5亿（推算自MAU，视频内容消费高频） WhatsApp◦ 约12亿（推算自MAU，即时通讯刚需） Instagram◦ 约11.8亿（推算自MAU，视觉内容与互动黏性高） TikTok（国际版）◦ 约8.35亿（推算自MAU，短视频与挑战活动驱动） 抖音（中国版）◦ 约4亿（推算自MAU，内容生态丰富） 支付宝◦ 约4.25亿（支付与生活服务场景高频使用） 高德地图◦ 约4亿（实时导航与聚合打车需求） 微博◦ 约2.95亿（热搜与明星话题吸引每日访问） 快手◦ 约2.87亿（下沉市场用户活跃） 百度◦ 约2.75亿（搜索与信息流内容驱动） Snapchat◦ 约1.27亿（年轻用户互动与滤镜功能） 小红书◦ 约1.18亿（种草内容与社区活跃度提升） 哔哩哔哩◦ 约1.1亿（Z世代用户与长视频内容黏性）" }, { "title": "AI系列24:有哪些知名的RAG产品", "url": "/posts/ai-24/", "categories": "AI系列", "tags": "AI系列", "date": "2025-04-24 06:00:00 +0800", "snippet": "一、企业级RAG平台 Dify• 核心优势：• 低代码开发：提供可视化工作流编排，支持拖拽式构建知识库，5分钟即可完成基础问答系统搭建；• 混合检索引擎：融合向量检索、关键词匹配和图召回策略，在医疗场景下准确率提升至92%；• 企业级功能：支持私有化部署、数据加密及多租户权限管理，兼容20+主流大模型（如GPT-4、Claude3）。• 缺点：• 单独部署时对扫描件/复杂表格解析失败率超60%； RAGFlow• 核心优势：• 深度文档解析：布局感知技术可解析扫描件和表格，实测合同条款定位速度达0.8秒/条，错误率仅3.2%；• 安全部署：支持全链路私有化部署，结合BGE重排序模型降低漏检率40%。• 缺点：• 部署复杂度高，需维护Docker容器集群，内存需求≥32GB；• 社区活跃度低于Dify，高级功能开发依赖NLP工程师调参。• 适用场景：法律/医疗专业文档处理、高安全需求场景。二、开发者工具型框架 LangChain• 核心优势：• 生态成熟：GitHub 80k+ stars，模块化设计支持快速集成向量数据库（如Chroma）；• 多模态支持：兼容PDF/HTML/Markdown，可扩展至流式输出和Agent编排。• 缺点：• 中文处理需手动配置分词器（如jieba），表格解析依赖第三方OCR；• 内存消耗随Chain复杂度指数增长，运维成本高。• 适用场景：需要高度定制的复杂RAG流程（如金融风控系统）。 LlamaIndex• 核心优势：• 专为RAG优化：轻量级索引结构单机可处理百万级文档，支持中文段落语义分割；• 动态更新：实时索引更新时CPU占用可控，适合高频数据迭代场景。• 缺点：• 高级功能（如图索引）文档示例少，分布式部署需修改源码；• 中文NER效果依赖外部模型（如BERT-wwm）。• 适用场景：中小规模知识库构建、动态数据源接入（如新闻聚合）。三、轻量级解决方案 FastGPT• 核心优势：• 开箱即用：基于TypeScript开发，2周可上线基础版问答系统；• 成本低廉：API调用成本为行业均值的1/3，适合预算有限场景。• 缺点：• 格式支持少（仅限基础文本），商品参数检索误差率达22%；• 不支持复杂工作流编排，扩展性有限。• 适用场景：中小团队快速验证MVP、电商客服系统。 MaxKB• 核心优势：• 零代码配置：内置LLM路由系统，可自动分配查询至不同模型（如GPT-4处理复杂问题）；• 资源高效：单节点8GB内存即可运行，支持Kubernetes集群化部署。• 缺点：• 依赖Python生态，处理百万级文档时性能下降明显；• 社区支持较弱，问题排查周期长。• 适用场景：教育/金融领域的中型知识库建设。四、垂直领域工具 QAnything• 核心优势：• 自研模型：采用有道BCEmbedding+Reranker模型，中文语义匹配准确率提升15%；• 轻量化部署：单机16GB内存支持10万级文档检索。• 缺点：• 项目维护性低（自2024年5月后无更新），存在版权风险；• 前端不可修改，不适合企业级定制需求。• 适用场景：轻量级知识库问答（如教育机构题库）。 Haystack• 核心优势：• 企业级架构：支持ElasticSearch多路召回，金融政策问答召回率提升41%；• 模块化设计：兼容多种OCR引擎（Tesseract/Google Vision）。• 缺点：• 中文社区活跃度低，预训练模型以英文为主；• 基础服务（如ES）占用40%以上资源，部署成本高。• 适用场景：大规模多语言知识库（如跨国企业文档中心）。五、选型建议| 需求维度 | 推荐方案 | 核心理由 ||——————–|—————————|————————————————-|| 企业级安全与扩展性 | Dify企业版 + RAGFlow | 混合部署保障数据安全，Dify工作流弥补RAGFlow交互缺陷 || 快速原型开发 | FastGPT或Dify社区版 | 5分钟部署基础问答系统，适合验证市场需求 || 专业文档解析 | RAGFlow | 扫描件/表格解析准确率95%+，法律/医疗领域首选 || 低成本轻量级需求 | MaxKB | 零代码配置+资源高效，适合中小团队 || 高度定制化开发 | LangChain/LlamaIndex | 开源生态成熟，支持复杂流程编排 |建议优先测试Dify和RAGFlow的社区版本以验证适配性。" }, { "title": "AI系列23:RAG介绍", "url": "/posts/ai-23/", "categories": "AI系列", "tags": "AI系列", "date": "2025-04-24 05:00:00 +0800", "snippet": "检索增强生成，Retrieval-Augmented Generation 是一种结合信息检索与生成模型的技术，旨在通过动态引用外部知识库提升大语言模型（LLM）的准确性、实时性和专业性。 核心机制RAG通过“检索-增强-生成”三步流程运作：• 检索（Retrieval）：从外部知识库（如文档、数据库）中搜索与用户问题相关的信息； • 增强（Augmentation）：将检索结果整合为上下文输入，增强模型对问题的理解； • 生成（Generation）：基于检索内容和模型原有知识生成最终回答。 与传统生成模型的区别传统LLM（如ChatGPT）依赖训练时的固化知识，而RAG像“开卷考试”的学霸，实时检索最新或专业资料辅助回答，减少“幻觉”（即虚构事实）。 核心优势 信息实时性无需重新训练模型即可接入最新数据，例如新闻、政策或科研论文。 领域专业化可对接企业知识库、法律条文或医学文献，生成更精准的领域内回答。 可解释性答案来源可追溯（如标注引用文档），用户可验证可靠性。 应用场景 企业客服快速检索产品手册、服务流程，生成符合规范的客户答复。 法律咨询分析法律条文与案例库，辅助律师处理案件。输入“知识产权纠纷”，RAG可检索相似判决依据。 医疗诊断连接医学文献库，辅助医生解读罕见病症状与治疗方案。 教育辅助学生提问历史事件细节时，RAG可从教材、百科中提取资料生成详解答复。 当前限制 • 长上下文处理效率较低，影响实时性。未来方向 • 多模态RAG：整合图像、音视频等多类型数据；• 动态知识更新：设计自动化管道持续更新知识库；• 与其他技术融合：结合强化学习、Agent等提升复杂任务处理能力。" }, { "title": "AI系列22:dify介绍", "url": "/posts/ai-22/", "categories": "AI系列", "tags": "AI系列", "date": "2025-04-23 05:00:00 +0800", "snippet": "开源的大语言模型（LLM）应用开发平台，专注于降低生成式AI应用的开发门槛，帮助开发者及非技术人员快速构建、部署和管理智能化应用。通过模块化设计和可视化工具，让用户无需深入编码即可完成复杂AI应用的开发。它融合了 后端即服务（BaaS） 和 LLMOps（大模型运维） 的理念，提供从原型设计到生产部署的全流程支持。核心功能 低代码/无代码开发• 用户可通过拖拽界面定义 Prompt（提示词）、上下文和工具插件，实现自然语言交互逻辑的编排。 • 支持快速构建聊天助手、智能客服、内容生成工具等应用。 多模型兼容与混合部署• 集成主流商业模型（如 GPT-4、Claude）和开源模型（如 Llama、DeepSeek），允许灵活切换或组合模型。 • 支持通过API对接本地或云端部署的私有模型。 检索增强生成（RAG）引擎• 支持从文档（PDF、PPT等）中提取文本，构建私有知识库，减少模型“幻觉”并提升回答准确性。 • 提供两种索引模式：高质量模式（向量检索+全文检索）和 经济模式（离线向量引擎）。 Agent与工作流编排• 支持创建具备推理能力的智能体（Agent），可自主调用工具（如谷歌搜索、DALL·E）完成复杂任务。 • 通过可视化工作流定义多步骤逻辑，例如数据清洗→分析→报告生成。 企业级功能• 提供权限管理、数据隔离、审计日志和性能监控，适用于团队协作与敏感数据处理。 • 支持私有化部署，确保数据隐私与合规性。 应用场景 内容生成自动化生成营销文案、文章、代码等，支持多语言与风格定制。 智能问答系统构建企业知识库助手或客服机器人，实时回答用户问题。 数据分析与洞察从非结构化数据中提取趋势，生成可视化报告。 流程自动化嵌入AI能力至现有系统，实现会议纪要生成、邮件处理等任务。优势与差异化• 低门槛：非技术人员可通过自然语言定义AI行为。• 灵活性：支持从简单聊天应用到复杂工作流的全场景覆盖。适用对象• 开发者：快速集成AI能力至现有系统，减少重复开发。• 企业团队：构建内部智能工具（如数据分析、客服），提升效率。• 技术爱好者：探索Prompt工程与Agent技术的实践平台。Dify 成为连接大模型能力与实际业务需求的桥梁。可通过Docker快速部署本地环境。" }, { "title": "AI系列21:编程工具Trae", "url": "/posts/ai-21/", "categories": "AI系列", "tags": "AI系列", "date": "2025-04-20 22:00:00 +0800", "snippet": "Trae是字节出的类似Cursor的AI编程工具，1月20号正式推出Claude 3.7 Sonnet 这个模型很多地方推荐，代码能力比r1强Trae有两个模式，Chat和Builder。Builder模式能一个人从0到1刷复杂项目的代码" }, { "title": "AI系列20:扣子空间", "url": "/posts/ai-20/", "categories": "AI系列", "tags": "AI系列", "date": "2025-04-19 22:00:00 +0800", "snippet": "4月19日字节推出通用AI Agent平台扣子空间（Coze Space）能跑通流程，但还有很大的提升空间。扣子空间和传统智能体/MCP 产品最大的不同之处，就在于这个能够「停下来、慢一点」的规划模式。简单来说，交给 MCP 一个任务之后，它会自动分解任务指定规划然后开始跑任务，最终生成结果。但这难免出现「一步错，步步错」的情况。而扣子空间开启规划模式后，可以在执行复杂任务的关键节点上「停下脚步」和用户对齐，让用户可以实时纠错和纠偏，优化执行逻辑。内部自动调用各种 Agent（智能体），不需要用户介入，就能完成各种任务。你可以把它想象成一个”Agent 的自动调用器”。PPT也可以直接生成下载" }, { "title": "三方库编译系列8:使用vcpkg安装qt", "url": "/posts/3rd-8/", "categories": "三方库编译系列", "tags": "三方库编译系列", "date": "2025-04-08 05:05:00 +0800", "snippet": "1，新建一个目录qt2，进入目录vcpkg new –application会生成2个json文件。编辑下vcpkg.json{ &quot;dependencies&quot;: [ &quot;qt5-base&quot; ], &quot;overrides&quot;: [ { &quot;name&quot;: &quot;qt5-base&quot;, &quot;version&quot;: &quot;5.15.2#20&quot; } ]}然后在目录下执行vcpkg install即可在vcvarsarm64.bat环境下执行安装arm64版本qt.报错了[ERROR:vcvarsall.bat] Invalid argument found : Unknown_arm64将vcvarsall.bat里面复制一份Unknown_arm64 改成arm64一样的在vcpkg文件夹的triplets文件夹，复制里面的arm64-windows.cmake 重命名为arm64-windows-release.cmake在文件最后添加一行 set(VCPKG_BUILD_TYPE release)执行vcpkg install –host-triplet=arm64-windows-release上面的最终只编译了base库，少Qt5AxContainerConfig.cmakehttps://vcpkg.io/en/packages 可以看到有哪些库，还有他们支持的版本{ &quot;dependencies&quot;: [ &quot;qt5-base&quot;, &quot;qt5-activeqt&quot; ], &quot;overrides&quot;: [ { &quot;name&quot;: &quot;qt5-base&quot;, &quot;version&quot;: &quot;5.15.2#20&quot; }, { &quot;name&quot;: &quot;qt5-activeqt&quot;, &quot;version&quot;: &quot;5.15.2#1&quot; } ]} 或{ &quot;dependencies&quot;: [ { &quot;name&quot;: &quot;openssl&quot;, &quot;features&quot;: [ &quot;tools&quot; ] }, { &quot;name&quot;: &quot;qt5&quot;, &quot;default-features&quot;: false, &quot;features&quot;: [ &quot;activeqt&quot;, &quot;multimedia&quot;, &quot;imageformats&quot;, &quot;svg&quot;, &quot;tools&quot; ] } ], &quot;overrides&quot;: [ { &quot;name&quot;: &quot;qt5&quot;, &quot;version-semver&quot;: &quot;5.15.2&quot;, &quot;port-version&quot;: 1 }, { &quot;name&quot;: &quot;openssl&quot;, &quot;version&quot;: &quot;3.4.0#2&quot; } ], &quot;builtin-baseline&quot;: &quot;ca846b21276c9a3171074ac8d2b4f6516894a7d0&quot;}" }, { "title": "汽车知识系列8:车险", "url": "/posts/car-8/", "categories": "汽车知识系列", "tags": "汽车知识系列", "date": "2025-04-08 05:00:00 +0800", "snippet": "交强险和车船税是必须要交，其它看自己 交强险是法定强制险所有上路车辆必须投保，用于赔偿第三方（事故受害人）的人身伤亡和财产损失。若不投保，车辆无法年审、上路，且被查处后将面临罚款、扣车等处罚。 车船税是法定财产税按年征收，根据车辆排量或类型确定税额（如1.6L排量约360元/年）。 比如1，交强险665固定金额（其中死亡伤残18w+无责任1.8w=332.50医疗费用1.8w+无责任1800=199.5财产损失2000+无责任100=133）2，车船税150固定金额尽管法律允许只交强险和车船税，但保障范围极不充分： 交强险保障局限：仅覆盖第三方损失，且赔偿额度极低（如死亡伤残限额18万，医疗费1.8万，财产损失仅2000元）。若事故造成他人豪车损毁或重伤，赔偿可能远超限额，需车主自掏腰包。 自身损失无保障：交强险不赔偿自己车辆的维修费、车上人员医疗费。例如： 单方事故（如撞树）导致车辆损坏，维修费全自付； 碰撞全责时，对方损失由交强险赔付，但自己车辆维修需另购车损险。 💡 三、强烈建议补充商业险为规避经济风险，推荐以下组合： 基础保障方案（必加） 第三者责任险：建议保额200万以上，覆盖人伤或豪车赔偿（如撞劳斯莱斯等天价维修）。 车上人员责任险（座位险）：保障自己及乘客的医疗费用。 全面保障方案（推荐） 车损险：覆盖自身车辆维修（尤其新车或中高端车型）； 开车不慎碰撞导致车辆受损；将车停在路边被盗了；停放时被碰擦受损，找不到肇事者；车子因线路老化自燃了；自然灾害、涉水行驶导致发动机进水损坏了；挡风玻璃被掉落的花盆砸碎了。 医保外医疗费用责任险：补充医保不覆盖的第三方医疗费。 📌 案例说明：若仅投保交强险，倒车撞坏邻居奔驰（维修费5万）： 交强险最多赔2000元财产损失，剩余4.8万需自付； 若有第三者责任险（200万保额），可全额赔付。 一句话总结：保费≠越低越好，核心是覆盖“撞豪车、人重伤、修己车”三大风险点，小A投保了车辆损失险后，选择了5%的附加绝对免赔率险，保费减少了几十元。发生单车事故造成了8000元的损失，小A理赔时赔款金额为7600元=8000*（1-5%）。小A投保了三者险100万后，选择了10%的附加绝对免赔率险，保费减少了一百多元。发生事故时属于全责方，需赔付第三方受害者1.2万元的财产损失，小A理赔时赔款金额为9000元=（12000-2000（交强险赔偿））*（1-10%） 。在保险合同中，“无责任”和“绝对免赔率”是直接影响理赔结果的关键概念，具体解析如下：一、无责任（无责）指在交通事故中本方完全不承担事故责任（责任判定为0%）。但根据险种不同，赔偿逻辑有本质差异：1. 交强险中的“无责赔偿”（中国特色条款） 规则：即使你无责，交强险也需赔偿对方损失（人道主义条款）。 赔偿限额（2025年标准）： 死亡伤残：1.8万元 医疗费用：1800元 财产损失：100元 案例： 你正常行驶被追尾（对方全责），对方受伤需治疗费5000元。你的交强险需赔1800元医疗费（无责限额），剩余3200元由对方保险承担。 二、绝对免赔率 指保险公司免于承担赔偿的比例，该部分损失由车主自担。分为两种模式： 1. 合同约定型（主动选择可降保费） 原理：投保时自愿选择5%、10%等免赔率，可降低保费（如保费打8折）。 计算方式： 实际赔款 = （损失金额 - 交强险已赔部分） × （1 - 绝对免赔率） 案例： 你投保车损险时选择10%绝对免赔率（省保费200元），事故修车费1万元。保险公司赔付：1万 × (1 - 10%) = 9000元，你自付1000元。 " }, { "title": "汽车知识系列7:轮胎", "url": "/posts/car-7/", "categories": "汽车知识系列", "tags": "汽车知识系列", "date": "2025-04-06 05:00:00 +0800", "snippet": "品牌：法国米其林，德国马牌，日本普利司通，美国固特异，意大利倍耐力，日本邓禄普轮胎，韩国韩泰，日本优科豪马，浙江的朝阳，台湾玛吉斯，新加坡佳通，一般有运动型，舒适静音型，耐磨型一般来说，选择某个品牌最擅长领域的产品线，比如马牌的静音舒适型轮胎或者倍耐力的高性能运动型轮胎，最有可能买到在该方向上表现最好的轮胎。轮胎上的数字代表什么意思？以205/55R16 91H为例，205代表轮胎胎面宽度为205mm；55代表扁平比为55%，即轮胎横断面厚度和胎面宽度之比，扁平比越高的轮胎一般更安全舒适节油，越低的抓地力、制动性能更好；R代表这款轮胎是生产工艺最为先进的子午线轮胎；16代表轮毂直径16英寸；91代表单个轮胎充气状态下的负重指数为91，根据负重指数对照表可查得91对应的是615kg；H代表轮胎的速度级别为H，对应轮胎速度等级表可知这款轮胎最高支持210KM/H，字母越靠后速度越快。什么状况下需要更换？1.磨损程度。当轮胎表面出现裂纹、鼓包等实质性破坏痕迹时，必须马上更换，此外，每条纵向沟槽中一般都附有一个小凸起标志，当花纹厚度磨损至与标志等高时需要更换。 使用时间。轮胎侧面最接近轮毂的一圈字体中，有一串使用胶囊形外框的四位数编号，后两位数字为年份，前两位数字为该年份第几周，如0123表示该轮胎生产日期为2023年第一周。由于橡胶材质会老化，即使轮胎未达到严重磨损状态也不要使用超过6年，长期不上路，也不要使用超过生产日期10年以上的轮胎。 补胎次数。每款轮胎有规定的修补次数，平价轮胎正面一般在四次以内，补胎间隔需超过40cm，如果胎壁被扎穿则无法修补。" }, { "title": "网络系列4:什么是Headless Chrome", "url": "/posts/net-4/", "categories": "网络系列", "tags": "网络系列", "date": "2025-04-03 05:05:00 +0800", "snippet": "headless Chrome 是 Google Chrome 浏览器的无界面运行模式，允许用户在不启动图形界面（GUI）的情况下执行浏览器功能。它通过 Chromium 内核和 Blink 渲染引擎提供完整的现代网页支持，适用于自动化测试、数据抓取等场景。核心特点 无界面操作完全在后台运行，无需显示器或图形界面支持，特别适合服务器环境。例如，在 Linux 服务器上部署时可直接通过命令行启动。 完整的浏览器功能支持 JavaScript 渲染、CSS 解析、Cookie 管理等所有 Chrome 特性，能精准模拟真实用户浏览行为。例如，可执行动态页面截图或生成 PDF。 高性能与资源优化相比传统浏览器（如带 GUI 的 Chrome）和早期无头工具（如 PhantomJS），Headless Chrome 的加载速度提升 55%，内存占用减少 38%。 主要应用场景 自动化测试用于 UI 测试时，可绕过页面渲染加速测试流程，并支持在持续集成（CI）环境中并行运行多实例。例如结合 Selenium 实现静默模式启动。 网页爬虫与数据抓取能解析 AJAX 动态加载内容，解决传统爬虫对单页应用（SPA）数据抓取不全的问题。通过 DevTools 协议控制页面交互（如点击、表单提交）。 截图与 PDF 生成支持高精度截图（包括全页面滚动截图）和 PDF 导出，常用于网页快照、错误监控等场景。例如通过命令行参数 –screenshot 快速生成图片。 预渲染与 SEO 优化在服务器端渲染动态页面内容，提升首屏加载速度，并生成静态 HTML 供搜索引擎抓取。 技术实现• 启动方式：通过命令行参数（如 –headless、–disable-gpu）或编程接口（如 Python 的 selenium 库）调用。• 控制协议：基于 Chrome DevTools Protocol，允许通过 WebSocket 或库（如 chrome-remote-interface）远程调试和操控浏览器。例如监听页面加载事件或调整视口尺寸。注意事项• 调试技巧：通过 –remote-debugging-port=9222 启动后，可用其他浏览器访问 localhost:9222 查看调试界面。" }, { "title": "健康系列2:中暑", "url": "/posts/health-2/", "categories": "健康系列", "tags": "健康系列", "date": "2025-04-02 06:00:00 +0800", "snippet": "中暑属于热损伤急症，药物仅能缓解轻度症状，重度中暑必须立即送医抢救⚠️ 一、核心原则：先物理降温，再药物辅助最快见效方式： 转移→阴凉通风处平躺，脱去外衣； 降温→冷水喷洒全身+风扇吹拂（重点冷却颈部、腋下、腹股沟）； 补水→小口饮用含电解质液体（淡盐水、运动饮料）。完成以上三步后，再根据症状使用药物。💊 二、轻症中暑常备药清单（见效速度排序）| 药品名称 | 适用场景 | 用法与效果 | 注意事项 ||——————–|—————————-|———————————-|—————————–|| 口服补液盐Ⅲ | 大量出汗后脱水、电解质紊乱 | 1包冲500ml温水，小口频服，30分钟缓解乏力 | 优先级最高，比普通运动饮料更科学 || 十滴水/仁丹 | 头晕恶心、胸闷（先兆中暑） | 十滴水5ml稀释后服；仁丹含服3-5粒，10分钟起效 | 孕妇禁用；十滴水含酒精，勿与头孢同服 || 藿香正气水 | 湿暑引起的呕吐、腹泻 | 1支（10ml）口服，每日2-3次 | 含酒精！驾驶/服药后勿开车；儿童选无酒精口服液 || 冰片爽身粉 | 皮肤灼热刺痛（晒伤或热疹） | 冷水清洁后薄涂患处，即刻清凉 | 避开眼周、破损皮肤 | ❗ 重要提醒： 退烧药无效：布洛芬、对乙酰氨基酚对中暑体温调节失衡无效，且可能加重肝肾负担； 禁用镇静剂：安宫牛黄丸、安定等可能掩盖病情，延误救治。 🆘 三、重度中暑（热射病）的识别与急救立即拨打120！ 在救护车到达前： 快速降温：冷水浸泡或冰袋敷大动脉处（勿直接接触皮肤，用毛巾包裹）； 保持气道通畅：若昏迷，侧卧防呕吐窒息； 禁用口服药：禁止喂水喂药，等待专业救治。🎒 四、防暑出行必备物品清单除药品外，这些工具更能快速救命：| 物品 | 作用 ||——————-|—————————-|| 手持喷雾风扇 | 物理降温即时见效 || 冷感毛巾（水激活） | 围颈部降温，效果持续2小时 || 电解质泡腾片 | 快速纠正脱水（比液体便携） || 电子体温计 | 随时监测核心体温（＞38.5℃需警惕）|🌡️ 五、儿童中暑特殊处理 首选物理降温：冷水擦拭+口服补液盐（儿童专用）； 慎用药物：3岁以下禁用十滴水/藿香正气水； 观察尿量：4小时无排尿提示严重脱水，立即送医。 💡 总结：最快见效组合 = 物理降温（冷水+风扇） + 口服补液盐Ⅲ + 十滴水（仅成人轻症）。高温天出行，带齐“冷感毛巾+电解质水+温度计”比依赖药物更关键！若症状10分钟内无缓解，无论轻重均需就医。" }, { "title": "windows常见问题系列8:arm64ec与原生有什么区别", "url": "/posts/win-skills-8/", "categories": "windows常见问题", "tags": "windows常见问题", "date": "2025-04-02 05:25:00 +0800", "snippet": "win11使用全新的模拟器Prism模拟运行x86和x64应用，但win10只能模型x86x64应用的系统库会编译成arm64x pe文件，可以被x64或arm64进程加载arm64ecArm64EC (“Emulation Compatible”)Arm64EC is a new application binary interface (ABI)，只在win11上才有arm64ec 与x64 代码可以互操作(包括链接)，但不能与arm64互操作。但x64与arm64可以被arm64x pe加载，应该是arm64x pe里面包含了2份，一份是x64(arm64ec),一份是arm64所以前期可以先将x64编译成arm64ec，来提升部分性能检测类型：link /dump /headers会输出File Type: EXECUTABLE IMAGEFILE HEADER VALUES 8664 machine (x64) (ARM64X)The combination of (x64) and (ARM64X) indicates that some portion of the binary has been recompiled as Arm64EC,A binary with a machine header that contains (ARM64) and (ARM64X) is an Arm64X PE file that can be loaded into both x64 and Arm64 apps.Arm64X is a new type of binary that can contain both the classic Arm64 code and Arm64EC code together.x64和arm64应用可以加载arm64x pe库如何编译arm64x pe库，比较麻烦！在arm64ec属性页面有一个Build Projet as ARM64X选项。除了arm64ec配置外，还必须有一个Arm64的配置" }, { "title": "windows常见问题系列7:exe转msix安装包", "url": "/posts/win-skills-7/", "categories": "windows常见问题", "tags": "windows常见问题", "date": "2025-04-01 05:25:00 +0800", "snippet": "可以使用MSIX Packaging Tool可以将exe安装包转成msix包，它会监控exe的安装过程listening to everything in the environment to capture what the installer is doing.winget install “MSIX Packaging Tool”不能向安装目录写文件最好有一台纯净的机器，可以使用hyper-v虚拟机 https://learn.microsoft.com/en-us/windows/msix/packaging-tool/quick-create-vm 测试" }, { "title": "windows常见问题系列6:自带虚拟机Hyper-V", "url": "/posts/win-skills-6/", "categories": "windows常见问题", "tags": "windows常见问题", "date": "2025-04-01 05:05:00 +0800", "snippet": "Microsoft’s hardware virtualization product.可以在win10上运行如何启用Open a PowerShell console as Administrator.Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All运行完要重启创建虚拟机：打开Hyper-V Manager进行创建通过Hyper-V管理器创建检查点(快照)，系统会自动创建检查点，可以右键重命名." }, { "title": "AI系列19:模型蒸馏是什么", "url": "/posts/ai-19/", "categories": "AI系列", "tags": "AI系列", "date": "2025-03-27 05:00:00 +0800", "snippet": "模型蒸馏就像是​​“学霸带学渣”​​的学习方法。举个生活中的例子：想象学校里有个超级学霸（复杂的大模型），解题又快又准，但每次考试要花很长时间写详细步骤，不适合快速答题比赛。于是，老师让学霸把自己的解题思路教给一个反应更快的普通学生（轻量的小模型），让他能像学霸一样正确解题，但速度更快。​​​为什么要用蒸馏？​​大模型（学霸）虽然厉害，但太笨重，用起来费电、占内存，不适合手机、智能手表等小设备。小模型（普通学生）通过蒸馏，能继承大模型的核心能力，既轻便又高效。本质上，​​蒸馏就是把复杂模型的核心知识“提炼”出来，教给更简单的小模型​​，让技术既能保持效果，又更容易落地使用。" }, { "title": "DeepSeek系列2:本地部署", "url": "/posts/deepseek-2/", "categories": "DeepSeek系列", "tags": "DeepSeek系列", "date": "2025-03-26 05:30:00 +0800", "snippet": "1，下载并安装ollama简化了大型语言模型的部署流程，你可以用它快速在本地运行和测试模型。安装后cmd输入ollama验证一下打开ollama网页，点击左上角的models终端运行 ollama run deepseek-r1:7b 即可2，使用可视化ui下载并安装https://chatboxai.app/zh启动后，选择 使用自己的 API Key 或本地模型。选择ollamaAPl，注意使用时要保持ollama run运行状态还有DeepSeek本部部署整合包。参考https://mp.weixin.qq.com/s/6w8VT0KNzJw5RjSeTyCTJw" }, { "title": "windows开发系列3:C++库管理器vcpkg", "url": "/posts/win-3/", "categories": "windows开发系列", "tags": "windows开发系列", "date": "2025-03-25 07:05:00 +0800", "snippet": "git clone https://github.com/Microsoft/vcpkg.gitcd vcpkg./bootstrap-vcpkg.sh./vcpkg integrate install 如果希望在 Visual Studio 中使用vcpkg./vcpkg install kcp ./vcpkg install sdl2 curl ./vcpkg install cpr 上面will install x86 libraries by default. To install x64vcpkg install package:x64-windows安装arm64的arm64-windows安装指定版本--version=3.4.0需要vs英文语言包vcpkg integrate install 执行后所有VS项目自动识别vcpkg安装的头文件和库vcpkg integrate project 单个项目集成​,生成NuGet包引用文件，适用于需要隔离依赖的场景,​CMake项目集成​-DCMAKE_TOOLCHAIN_FILE=”/scripts/buildsystems/vcpkg.cmake&quot; 支持自动查找依赖项（如find_package(fmt CONFIG REQUIRED)）安装Android/iOS库：如vcpkg install zlib:arm64-android查看支持的三元组（Triplet）：vcpkg help triplet参考https://github.com/Microsoft/vcpkg" }, { "title": "健康系列1:黑眼圈是如何形成的", "url": "/posts/health-1/", "categories": "健康系列", "tags": "健康系列", "date": "2025-03-25 06:00:00 +0800", "snippet": "黑眼圈通常不是由单一因素造成的，而是多种原因共同作用的结果。主要可以分为以下几大类： 血管型黑眼圈（最常见）： 原因： 眼下皮肤是人体最薄的皮肤之一（大约只有0.5毫米厚），皮下脂肪也很少。这使得皮下的毛细血管网和血管颜色更容易透过皮肤显现出来。 关键因素： 血液循环不畅/淤滞： 熬夜、睡眠不足、用眼过度（长时间盯着屏幕）、疲劳、压力大等会导致眼周血液循环变差，血液中缺氧的血红蛋白（呈蓝紫色）增多并淤积在血管中，透过皮肤显现出青黑色或紫红色的阴影。 血管扩张/增多： 鼻炎、鼻塞、过敏（如过敏性鼻炎、结膜炎）会导致鼻部和眼周的静脉血管扩张、血流不畅、颜色加深，加重黑眼圈。 天生因素： 有些人天生眼下皮肤就特别薄，或者血管位置更靠近皮肤表面，即使没有熬夜也容易显得有黑眼圈。 外观： 通常呈现青紫色、紫红色或蓝黑色，在拉扯下眼睑皮肤时颜色可能加深（因为皮肤更薄了），或者抬头时颜色变浅（重力作用使血液回流）。 色素型黑眼圈： 原因： 眼周皮肤本身存在过多的黑色素沉积。 关键因素： 日晒： 紫外线是导致黑色素生成的主要刺激因素。眼周防晒不到位，长期积累的紫外线伤害会导致黑色素沉着，形成棕褐色的黑眼圈。 炎症后色素沉着： 眼周有湿疹、皮炎等皮肤炎症，或者经常用力揉搓眼睛（摩擦刺激），炎症消退后可能留下色素沉着。 遗传因素： 有些人天生眼周皮肤颜色就比较深，或者容易在眼周产生色素沉着。 药物因素： 某些药物可能增加光敏性或导致色素沉着。 外观： 通常呈现棕色、茶色或咖啡色，围绕在整个眼眶周围（上下眼睑都可能出现），颜色比较均匀，拉扯皮肤时颜色不会明显变化。 结构型/阴影型黑眼圈： 原因： 并非皮肤颜色或血管问题，而是由于眼周结构的凹凸变化，在光线照射下产生的阴影。 关键因素： 泪沟凹陷： 眼下内侧靠近鼻子的凹陷。随着年龄增长，皮下脂肪和胶原蛋白流失、韧带松弛，泪沟会加深，形成阴影。 眼袋突出： 下眼睑脂肪膨出或水肿形成眼袋，在眼袋下方会形成一道阴影。 皮肤松弛、皱纹： 下眼睑皮肤松弛下垂，形成褶皱，也会在褶皱下方产生阴影。 外观： 看起来像黑眼圈，但实际上是光线形成的视觉阴影。颜色深浅会随着光线角度变化。通常出现在下眼睑靠近睫毛的位置或泪沟处。 混合型黑眼圈： 原因： 大多数人的黑眼圈都不是单一类型，而是上述两种或三种类型的混合（比如血管型+色素型，或者血管型+结构型）。 外观： 综合了不同类型的特点，颜色和成因更复杂。 其他可能的影响因素或诱因： 年龄增长： 皮肤变薄、胶原蛋白流失、脂肪垫下移、泪沟加深、眼袋形成等，都加剧了血管显现和结构阴影的问题。 脱水： 身体缺水会使皮肤显得暗沉、缺乏光泽，可能让黑眼圈看起来更明显。 贫血： 缺铁性贫血导致血液携氧能力下降，皮肤苍白，使得皮下血管的蓝紫色更易显现。 吸烟： 尼古丁损害血管，影响血液循环，并加速皮肤老化。 不良护肤习惯： 用力卸妆、揉搓眼睛会刺激皮肤，可能导致炎症和色素沉着。 某些慢性疾病。如何判断自己的黑眼圈类型？ 观察颜色： 青紫/蓝紫色：血管型可能性大。 棕褐/咖啡色：色素型可能性大。 颜色随光线角度变化明显：结构型/阴影型可能性大。 轻轻拉平下眼睑皮肤： 颜色变淡：可能是结构型（阴影消失）。 颜色变深：可能是血管型（皮肤更薄，血管更明显）。 颜色无变化：可能是色素型（色素在皮肤内）。 回忆生活习惯： 熬夜后加重？有过敏史？防晒做得好吗？家族遗传？ 看医生： 皮肤科医生或整形外科医生能给出更专业的诊断。总结来说，黑眼圈的形成是多种机制交织的结果： 薄透的皮肤是基础条件。 血管问题（淤滞、扩张、颜色深） 是常见直接原因（血管型）。 色素沉积（黑色素增多） 是另一类直接原因（色素型）。 眼周结构变化（凹陷、凸起、松弛） 形成视觉阴影（结构型）。 遗传、衰老、生活习惯（熬夜、过敏、日晒、揉眼）、健康状况（贫血） 则是重要的诱发或加重因素。了解自己黑眼圈的主要成因，才能更有针对性地选择改善方法（如调整作息、防晒、抗过敏、使用特定成分的眼霜、医美手段等）。如果黑眼圈突然出现或明显加重，建议咨询医生排除潜在健康问题。" }, { "title": "cmd系列6:缩短路径提示", "url": "/posts/cmd-6/", "categories": "cmd系列", "tags": "cmd系列", "date": "2025-03-24 07:15:00 +0800", "snippet": "输入prompt $g输入prompt恢复本文从手机上发布" }, { "title": "Docker系列2:docker与docker-compose什么区别", "url": "/posts/docker-2/", "categories": "Docker系列", "tags": "Docker系列", "date": "2025-03-24 05:00:00 +0800", "snippet": "两个互补但定位不同的工具，主要区别如下：Docker是容器化的基础引擎，专注于单容器的创建、运行和管理。它通过 Dockerfile 定义容器镜像，使用 docker run 等命令操作容器，适合独立应用的打包和部署Docker Compose是 Docker 的扩展工具，用于多容器应用的编排。通过 docker-compose.yml 文件定义服务、网络、卷等，支持一键启动整个应用，适合微服务、前后端分离等复杂场景。示例：定义 Web + MySQL + Redis 的 YAML 配置services: web: image: nginx db: image: mysql cache: image: redis启动命令 :docker compose up（一键启动所有服务）适合：多服务协作的复杂应用（如 Web + 数据库 + 缓存），自动创建服务间专用网络，本质是对 Docker 命令的封装Docker 解决“如何运行一个容器”，Compose 解决“如何协同多个容器”" }, { "title": "vs系列8:vs环境", "url": "/posts/vs-8/", "categories": "vs系列", "tags": "vs系列", "date": "2025-03-23 08:00:00 +0800", "snippet": "vcvars32.bat 其实里面内容是：@call &quot;%~dp0vcvarsall.bat&quot; x86 %*&quot;%~dp0vcvarsall.bat&quot; 表示调用当前批处理文件所在目录下的 vcvarsall.bat 文件%* 表示将当前批处理文件接收到的所有参数传递给 vcvarsall.bat传递的平台参数有x86 32 位平台。x64 64 位平台。arm64 x64_arm // amd64_armx64_arm64 //amd64_arm64x64_x86 //amd64_x86x86_x64 //x86_amd64x86_arm //x86_armx86_arm64 //x86_arm64arm64_x64 //只在arm机上有 ，arm64_amd64arm64_x86 //只在arm机上有 , arm64_x86可以在vcvarsall.bat文件里面看到不同平台对应参数对应的值：以 x64_arm64 为例__VCVARSALL_HOST_ARCH=x64__VCVARSALL_TARGET_ARCH=arm64" }, { "title": "cmd系列5:文件夹映射盘符subst", "url": "/posts/cmd-5/", "categories": "cmd系列", "tags": "cmd系列", "date": "2025-03-23 07:15:00 +0800", "snippet": "利用subst命令将一个文件夹镜像成本地的一个磁盘subst Z: E:\\testdir 中间有空格删除映射：subst Z: /d输入subst查看映射情况远程调试编译慢1，先在本地的D:\\devel\\code\\Bin下新建一个Bin\\x64\\Release目录，就有2级Bin目录了。2，映射本地的code\\Bin成Z盘符 subst Z: D:\\devel\\code\\Bin，最终内容为Z:\\Bin\\x64\\Release3, 共享code\\Bin，在远端机器上映射为Z盘符，这样远端机器上内容也为Z:\\Bin\\x64\\Release是不是也可以直接在远端映射，跳过本地映射？本文从手机上发布" }, { "title": "护肤系列2:护肤品选购指南", "url": "/posts/skin-2/", "categories": "护肤系列", "tags": "护肤系列", "date": "2025-03-23 05:30:00 +0800", "snippet": "基础护肤三部曲，就是指“清洁-保湿-防晒”。备齐一套洗面奶＋保湿产品+防晒霜，就足够应对日常的护肤需求。①清洁是护肤的第一步。每日都会分泌油脂，还会接触粉尘和细菌，毛孔易被堵塞，因此需要清理。最基础的面部清洁，就是用洗面奶洗脸，频率为每日1-2次。不需要再频繁使用去角质产品、清洁面膜，以免造成过度清洁，导致皮肤水油失衡，越洗越敏感。②保湿是最重要的一环。常说的皮肤屏障，就是指皮脂膜和角质层，一旦屏障受损，干燥、过敏、衰老等问题便会接踵而至。保湿的目的，就是补充肌肤流失的水分和油脂，确保角质层富有水分和弹性常见的保湿产品有化妆水、乳液和面霜，化妆水和乳液比较清爽，但保湿度也偏低；面霜含大量油脂，保湿力和封闭性强。建议油皮购买化妆水和乳液，干皮购买面霜。如果不确定自己为哪种肤质，备一套基础保湿水乳。③防晒是预防光老化的主要手段。常见的防晒产品有防晒霜和防晒喷雾两种，防晒霜覆盖力佳、防护力持久，适合日常使用。而防晒喷雾消耗量大且难以把控喷涂范围，更适合用于身体防晒或户外补涂。若只有通勤防晒需求，一般选购SPF30+的防晒产品即可，户外防晒则建议选择SPF50+的产品。想要美白和抗衰，可叠加面部精华。精华的作用就是精准、高效地改善肌肤问题，相比面霜和乳液渗透性更佳，可直达真皮层发挥作用。不要叠加过多不同功效的精华。此外，并非配方越豪华，精华的功效就越好，核心成分的纯度和浓度，才是决定一款精华能发挥多大功效的重要因素。譬如玉兰油小白瓶精华，所添加的烟酰胺纯度可达99.7%，因此美白能力在烟酰胺精华中出类拔萃。建议从大牌精华入门。皮肤不定期爆痘和长闭口，可使用含酸类的精华或清洁涂抹面膜，常见的酸类成分有果酸、水杨酸和壬二酸等。见效快，但有一定刺激性，不宜每日使用，建议每周使用1-2次即可。" }, { "title": "护肤系列1:如何抗氧化", "url": "/posts/skin-1/", "categories": "护肤系列", "tags": "护肤系列", "date": "2025-03-22 05:30:00 +0800", "snippet": "“抗氧化”实际上是指对抗氧自由基。自由基是人体新陈代谢过程中自然产生的产物，会诱导DNA、蛋白质、脂质等产生氧化应激反应，从而导致细胞损伤，在皮肤上直观地表现为衰老、肤色暗沉、炎症等问题。人体消化过程中也会产生自由基。当过量摄入糖分、劣质脂肪或高碳水等，会催生大量自由基，加剧氧化应激反应。此外紫外线对自由基的生成也有促进作用，这也是为什么暴饮暴食、抽烟喝酒或不做防晒的人，都会比旁人老得更快。人体每时每刻都在产生自由基，无法完全根除。要想阻止自由基进一步伤害皮肤，我们只能从“清除已形成的自由基”这一方面着手。多数抗氧化剂都能清除自由基，市面上主流的抗氧化剂主要有：1.DEUK-134可直接分解自由基，抗氧化效果彻底而持久，但EUK-134在酸性环境下易失活，2.麦角硫因（EGT）清除自由基的同时阻止氧化反应发生，抗氧化效果显著。由于原料来源稀有且提纯难度大，麦角硫因同样“身价”不菲。不建议选择宣称添加麦角硫因但售价低廉的产品。3.艾地苯与辅酶Q10结构相似，但抗氧化效果更为强大且易渗透，除了具备以上几类抗氧化剂的优点，还能抑制胶原蛋白降解并对抗炎症，从而淡化色斑与细纹。因此，艾地苯又被誉为“最强抗氧化剂”。但艾地苯刺激性较高，且极易氧化失活，比较考验品牌的配比能力。产品有：伊丽莎白•雅顿铂粹御肤精华液4.。维生素类维生素是护肤领域中最为常见的抗氧化剂。所有维生素中，主攻抗氧化的即为维E（生育酚）与维C（抗坏血酸）“两姐妹”。其中，维E抗氧效果略为逊色。维C则是通过还原的方式清除自由基，同时提高其他抗氧化成分的活性，功效更佳。它还可还原并抑制黑色素生成，美白淡斑效果更为出众。原型维C抗氧化能力最优，但温和性、稳定性及吸收率却极差。由此也催生出了多种经过改良的维C衍生物，如AA-2G（抗坏血酸葡糖苷）、维C乙基醚、维C-IP（抗坏血酸四异棕榈酸酯）等。但若是追求最佳的抗氧化效果，原型维C依然是最理想的选择。产品：修丽可CE复合修护精华液5，其他天然抗氧化剂从植物中提取出的天然抗氧化剂，也能为皮肤健康带来诸多益处。常见的天然抗氧化剂一般取自植物中富含的酚类化合物，按名称可分为多酚、黄酮、色素等类别。a.多酚类常见的多酚类抗氧化剂为：茶多酚、葡萄多酚、白藜芦醇，除了可清除自由基，还可抑制酪氨酸酶及弹性蛋白酶，帮助淡化黑色素并延缓衰老。b.黄酮类酚类化合物中一般都含有黄酮类化合物，作用较明显的抗氧化剂主要有大豆异黄酮、橙皮苷甲基查尔酮、5,7-二羟基黄酮、槲皮素（五羟黄酮）等。这类抗氧化剂通常都具有活肤、抗糖、美白等其他功能，常见于眼部护肤产品中，帮助消肿及淡化黑眼圈。c.色素类植物色素除了能染色，还是一类十分重要的抗氧化剂。虾青素、姜黄素、花青素等皆为植物色素。" }, { "title": "汽车知识系列6:2.0T和扭矩啥意思", "url": "/posts/car-6/", "categories": "汽车知识系列", "tags": "汽车知识系列", "date": "2025-03-21 05:00:00 +0800", "snippet": "数字部分：代表发动机排量，单位为升（L）。例如：◦ 2.0T：发动机排量为2.0升的涡轮增压发动机；◦ 3.0T：发动机排量为3.0升的涡轮增压发动机。字母“T”：表示涡轮增压技术（Turbo），通过压缩空气提高进气量，从而提升动力输出。相比自然吸气发动机，涡轮增压能在更小排量下实现更强的动力• 排量2.0升：指发动机所有气缸的总工作容积为2.0升。活塞从上止点移动到下止点所通过的空间容积称为单缸排量，多缸发动机的总排量即为各缸排量之和。什么是扭矩？扭矩可以理解为“发动机推车轮的力气”，就像你用手推门一样——力气越大，门转得越快！发动机的扭矩越大，车轮转动的“力气”就越大扭矩有什么用？ 加速更快：起步和超车时能“嗖”地冲出去，推背感十足。 爬坡更轻松： 拉更多东西涡轮增压的作用：涡轮就像给发动机戴了一个“打气筒”，能“吹”进更多空气，让燃烧更猛，力气更大。马力是衡量发动机做功快慢的功率单位，可以理解为“单位时间内发动机能输出的能量”，决定极速与加速：马力越大，发动机在相同时间内释放的能量越多，车辆的最高速度越高，加速能力越强。比如，家用车通常有100-200马力，而超跑可达500马力以上，极速轻松突破300km/h。马力是扭矩和转速的综合体现（公式：功率=扭矩×转速）。例如，一台高转速发动机即使扭矩较小，也能通过高转速产生大马力kW千瓦和马力啥区别马力是瓦特提出的，用来比较蒸汽机和马的做功能力千瓦（kW）与马力都是衡量发动机或机械功率的单位 千瓦（kW）是国际单位制（SI）中的标准功率单位 马力分公制和英制，1kW≈1.36公制马力（PS）例如：100kW×1.36≈136PS。1kW≈1.34英制马力（HP）例如：100kW×1.34≈134HP。反向转换：1PS≈0.735kW，1HP≈0.746kW。2.0T发动机• 最大功率：180kW（约245马力）至310kW（约420马力）3.0T发动机• 最大功率：250kW（约340马力）至375kW（约510马力）" }, { "title": "windows开发系列2:Windows包管理器WinGet", "url": "/posts/win-2/", "categories": "windows开发系列", "tags": "windows开发系列", "date": "2025-03-20 07:05:00 +0800", "snippet": "https://learn.microsoft.com/en-us/windows/package-manager/winget/在win系统上安装软件的命令行工具是Windows package manager service的客户端还可以在Windows Sandbox中安装WinGet对于 Windows App SDK 开发，通过 NuGet 安装 SDK 包是标准流程，开发者无需手动配置复杂的环境依赖。" }, { "title": "汽车知识系列5:有哪些跟沃尔沃xc90同级别的车", "url": "/posts/car-5/", "categories": "汽车知识系列", "tags": "汽车知识系列", "date": "2025-03-20 05:00:00 +0800", "snippet": "一、传统豪华品牌 奔驰GLE• 特点：作为豪华中大型SUV的标杆车型，内饰采用双12.3英寸联屏设计，搭配MBUX智能交互系统，科技感与豪华感并存。• 优势：提供2.0T（GLE 350）和2.5T直六（GLE 450）两种动力，后者零百加速仅5.9秒；AMG套件版本外观更具攻击性。• 不足：全系仿皮座椅（真皮需选装），主动安全配置（如膝部气囊）低于XC90；油耗偏高（9.1-9.9L/100km）。 宝马X5• 特点：主打运动操控，国产后轴距加长（3105mm），第二排空间优化，但外观线条不如进口版紧致。• 优势：搭载2.0T+48V轻混系统（30Li），动力平顺；配备哈曼卡顿音响、智能泊车及循迹倒车功能，科技配置丰富。• 不足：入门版配置较低（无空气悬架、座椅通风），仅提供五座版本；适时四驱系统脱困能力弱于XC90全时四驱。 奥迪Q7• 特点：设计偏中庸，性价比突出，终端优惠后起售价低于XC90（约60万元）。• 优势：标配quattro全时四驱，机械素质稳定；可选七座布局，第三排空间优于GLE；内饰采用三联屏设计，科技感较强。• 不足：品牌溢价下降，车内用料和环保标准略逊于沃尔沃；插混版本续航较短（约50公里）。 保时捷Cayenne• 特点：定位更高端，主打高性能与个性化定制，适合追求驾驶乐趣和品牌调性的用户。• 优势：提供燃油、插混多版本，动力强劲（如Cayenne S零百加速4.7秒）；选装配置丰富（如PDCC动态底盘控制系统）。• 不足：基础版配置简陋（需大量选装），起售价超90万元，远超XC90同级车型。二、新能源与新势力品牌 理想L9• 特点：主打“家庭旗舰”，全系六座布局，智能化配置领先。• 优势：标配双电机四驱（总功率330kW）、空气悬架、后排冰箱/大屏；纯电续航215km，支持快充。• 不足：品牌积淀较浅，操控性偏软，适合纯家用场景。 问界M9• 特点：华为技术加持，智能化体验突出，对标豪华品牌。• 优势：鸿蒙座舱支持多设备互联，ADS 3.0智驾系统覆盖全场景；提供增程/纯电双版本，续航最高630km。• 不足：设计偏保守，第三排空间局促，起售价超45万元。若追求安全性与实用性，沃尔沃XC90仍是首选；若看重品牌与豪华感，可选奔驰GLE或宝马X5；若倾向智能化与新能源，理想L9、问界M9值得考虑" }, { "title": "windows开发系列1:Windows App SDK是什么", "url": "/posts/win-1/", "categories": "windows开发系列", "tags": "windows开发系列", "date": "2025-03-19 05:05:00 +0800", "snippet": "Windows App SDK 和传统 Windows SDK 有什么区别Windows App SDK支持跨不同平台（如Win32、.NET）而使用统一API，而Windows SDK更偏向底层系统接口。​Windows App SDK：支持WinUI 3，提供更高级别的开发接口，开源运行时依赖：需要部署Windows App SDK Runtime（1.0.0+），而Windows SDK功能内置于操作系统使用：Windows App SDK为Visual Studio 2022提供了扩展。Windows App SDK库可通过NuGet包获得以便安装在现有项目中。安装tools：打开cmdwinget install “Visual Studio Professional 2022” –override “–add Microsoft.VisualStudio.Workload.NativeDesktop Microsoft.VisualStudio.ComponentGroup.WindowsAppSDK.Cpp”确保安装了 Windows App SDK C++ Templates然后可能要启用开发者模式 https://learn.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development如何在现有工程中使用app sdk:https://learn.microsoft.com/en-us/windows/apps/windows-app-sdk/use-windows-app-sdk-in-existing-project1，安装NuGet Visual Studio, click Tools &amp;gt; NuGet Package Manager &amp;gt; Package Manager Settings.Make sure that PackageReference is selected for Default package management format.开始开发：https://learn.microsoft.com/en-us/windows/apps/get-started/start-here?tabs=vs-2022-17-10可以使用这个测试下https://github.com/microsoft/WindowsAppSDK-Samples/tree/release/experimental/Samples/WindowsCopilotRuntime/cpp-console-unpackaged" }, { "title": "汽车知识系列4:宝马x5有几款，区别是什么，各自有什么优缺点", "url": "/posts/car-4/", "categories": "汽车知识系列", "tags": "汽车知识系列", "date": "2025-03-18 05:00:00 +0800", "snippet": "一、国产华晨宝马X5（第四代G05）国产车型分为 30Li（2.0T） 和 40Li（3.0T） 两大系列，共四款配置： xDrive30Li M运动套装• 售价：约61.5万• 动力：2.0T四缸+48V轻混，258马力，7.2秒破百• 核心配置：基础M运动套件、前排座椅加热、哈曼卡顿音响、自动驾驶辅助Plus、无钥匙进入• 优点：价格门槛低，配置满足日常需求；油耗相对经济（综合约10-12L/100km）。• 缺点：动力较弱，缺少激光大灯、HUD等高端配置。 xDrive30Li 尊享型M运动套装• 售价：约64.5万（+3万）• 升级配置：哈曼卡顿高端音响、21英寸轮毂、全彩HUD、自动泊车辅助Pro。• 优点：科技配置提升，适合注重智能驾驶的用户。• 缺点：仍为2.0T动力，性价比提升有限。 xDrive40Li M运动套装• 售价：约72.9万• 动力：3.0T六缸+48V轻混，381马力，5.5秒破百• 核心配置：激光大灯、Alcantara车顶、前排座椅通风、四区空调。• 优点：动力强劲，操控性能同级领先；标配自适应悬架提升舒适性。• 缺点：价格较高，缺少空气悬架等越野配置（需选装）。 xDrive40Li 尊享型M运动曜夜套装• 售价：约80万（+7.1万）• 升级配置：星空全景天窗、空气悬架、M运动排气、前后排座椅加热、自动驾驶辅助Pro。• 优点：配置全面，兼顾豪华与性能；空气悬架支持40mm车身升降，适合轻度越野。• 缺点：选装费用高（如越野套装需5.5万），终端可能加价。二、平行进口车型（以加版、墨版为主）平行进口车型配置更灵活，但需注意售后保障： 加版X5• 标配：xLine外观套件、隐私玻璃• 选装包：◦ M运动包：22英寸轮毂、M卡钳、运动排气；◦ 大豪华包：宝华韦健音响、座椅按摩、电吸门。• 优点：配置丰富，可选空气悬架、七座布局（中规无）；价格低于中规顶配。• 缺点：缺少部分国内专属配置（如璀璨水晶内饰），维修周期较长。 墨版X5• 标配：电吸门、LED大灯• 特点：五座/七座可选，价格略低于加版，但配置较基础（如无哈曼卡顿音响）选购建议 预算有限：选30Li M运动套装，满足日常需求。 追求性能：40Li尊享型，3.0T动力+空气悬架+自动驾驶Pro。 个性化需求：平行进口加版，选装大豪华包+越野套件。 " }, { "title": "电影系列16:盗梦空间 无套路下载", "url": "/posts/movie-16/", "categories": "电影系列", "tags": "电影系列", "date": "2025-03-16 05:50:00 +0800", "snippet": "ed2k://|file|[%E4%BA%BA%E4%BA%BA%E7%94%B5%E5%BD%B1%E7%BD%91%EF%BC%9Awww.rrdyw.net]%E7%9B%97%E6%A2%A6%E7%A9%BA%E9%97%B4.Inception.2010.BD1080P%E9%AB%98%E6%B8%85.%E5%9B%BD%E8%8B%B1%E5%8F%8C%E8%AF%AD.%E4%B8%AD%E8%8B%B1%E5%AD%97%E5%B9%95.%E6%97%A0%E6%B0%B4%E5%8D%B0%E7%89%88.mkv|7520228005|8690A368F9C761CDE7115AAD5AB8FF02|h=UYVDGX3QPGSLJE7PMYSDPPQ7Q5M62U3R|/如果链接失效，请反馈" }, { "title": "电影系列15:星际穿越 无套路下载", "url": "/posts/movie-15/", "categories": "电影系列", "tags": "电影系列", "date": "2025-03-15 05:50:00 +0800", "snippet": "ed2k://|file|[%E4%BA%BA%E4%BA%BA%E7%94%B5%E5%BD%B1%E7%BD%91%EF%BC%9Awww.rrdyw.net]%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A.Interstellar.2014.IMAX%E7%89%88.BD1080P.%E5%9B%BD%E8%8B%B1%E5%8F%8C%E8%AF%AD.%E7%89%B9%E6%95%88%E4%B8%AD%E8%8B%B1%E5%8F%8C%E5%AD%97.mp4|8587432352|6DDC14852D89B8AE0D987228D58C4C0F|h=U4HC4IYXNMWJHHPDEVMISLCTYBTEG3KS|/如果链接失效，请反馈" }, { "title": "开源软件推荐系列14:本地数据存取", "url": "/posts/opensource-soft-14/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2025-03-14 05:20:00 +0800", "snippet": "📁 一、轻量级数据存储（推荐指数⭐⭐⭐⭐⭐）1. SQLite（嵌入式关系数据库）import sqlite3# 创建/连接数据库（自动生成test.db文件）conn = sqlite3.connect(&#39;local_data.db&#39;)cursor = conn.cursor()# 建表cursor.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)&#39;&#39;&#39;)# 写入数据cursor.execute(&quot;INSERT INTO users (name, age) VALUES (?, ?)&quot;, (&#39;Alice&#39;, 28))conn.commit() # 提交事务# 读取数据cursor.execute(&quot;SELECT * FROM users&quot;)print(cursor.fetchall()) # 输出: [(1, &#39;Alice&#39;, 28)]conn.close() # 关闭连接 优势：无需安装服务端，单文件存储，支持ACID事务 适用：用户配置、交易记录等结构化数据2. JSON文件（配置/简单数据）import json# 写入数据data = {&quot;user&quot;: &quot;Alice&quot;, &quot;prefs&quot;: {&quot;theme&quot;: &quot;dark&quot;, &quot;notify&quot;: True}}with open(&#39;config.json&#39;, &#39;w&#39;) as f: json.dump(data, f) # 可选indent=4美化格式# 读取数据with open(&#39;config.json&#39;) as f: loaded = json.load(f) print(loaded[&#39;prefs&#39;][&#39;theme&#39;]) # 输出: dark 优势：人类可读，跨语言兼容 注意：频繁写入大文件时性能较低⚡ 二、高性能场景方案（推荐指数⭐⭐⭐⭐）3. Shelve（类字典持久化）import shelve# 写入数据（自动创建data.db文件）with shelve.open(&#39;data&#39;) as db: db[&#39;user1&#39;] = {&#39;name&#39;: &#39;Bob&#39;, &#39;score&#39;: 85} db[&#39;config&#39;] = {&#39;version&#39;: 1.2}# 读取数据with shelve.open(&#39;data&#39;) as db: print(db[&#39;user1&#39;]) # 输出: {&#39;name&#39;: &#39;Bob&#39;, &#39;score&#39;: 85} 本质：基于pickle的键值存储 适用：需要快速键值查询的非结构化数据4. HDF5（科学计算大文件）import h5pyimport numpy as np# 写入大型数组data = np.random.rand(10000, 10000)with h5py.File(&#39;big_data.h5&#39;, &#39;w&#39;) as f: f.create_dataset(&#39;matrix&#39;, data=data)# 读取数据with h5py.File(&#39;big_data.h5&#39;, &#39;r&#39;) as f: loaded = f[&#39;matrix&#39;][:] # 加载整个数组 需安装：pip install h5py 适用：数值计算、机器学习数据集🔒 三、安全敏感数据方案（推荐指数⭐⭐⭐）5. SQLite + 加密扩展（SQLCipher）# 安装: pip install pysqlcipher3from pysqlcipher3 import dbapi2 as sqliteconn = sqlite.connect(&#39;encrypted.db&#39;)cursor = conn.cursor()cursor.execute(&quot;PRAGMA key=&#39;MySecretKey&#39;&quot;) # 设置加密密钥# 后续操作与普通SQLite相同cursor.execute(&quot;CREATE TABLE secrets (id INT, info TEXT)&quot;) 安全性：AES-256加密整个数据库文件 代价：读写性能下降约10-15%📊 方案对比速查表| 存储需求 | 推荐方案 | 性能 | 易用性 | 安全 ||———————–|—————|——|——–|——|| 结构化数据（中小规模） | SQLite | ⭐⭐⭐⭐ | ⭐⭐⭐⭐ | ⭐⭐ || 简单配置/元数据 | JSON文件 | ⭐⭐ | ⭐⭐⭐⭐⭐ | ⭐ || 键值型数据 | Shelve | ⭐⭐⭐ | ⭐⭐⭐⭐ | ⭐ || 大型数值数据 | HDF5 | ⭐⭐⭐⭐⭐| ⭐⭐⭐ | ⭐ || 敏感结构化数据 | SQLite+加密 | ⭐⭐⭐ | ⭐⭐⭐ | ⭐⭐⭐⭐ |⚠️ 关键实践建议 备份机制：定期压缩备份数据文件 import shutilshutil.make_archive(&#39;backup_2023&#39;, &#39;zip&#39;, &#39;data_dir&#39;) # 目录压缩 异常处理：增加写入保护 try: with open(&#39;data.json&#39;, &#39;w&#39;) as f: json.dump(...)except IOError as e: print(f&quot;写入失败! 错误: {str(e)}&quot;) 性能优化： SQLite批量写入使用executemany() 大文件避免一次性加载：HDF5支持分块读取 兼容性：路径处理用pathlib from pathlib import Pathdata_path = Path(&#39;data&#39;) / &#39;v1&#39; / &#39;records.db&#39; # 自动处理操作系统路径差异 根据数据规模选择方案： &amp;lt;1MB：JSON/Shelve 1MB~1GB：SQLite &amp;gt;1GB：HDF5 敏感数据：必须加密存储 " }, { "title": "AI系列18:manus是什么", "url": "/posts/ai-18/", "categories": "AI系列", "tags": "AI系列", "date": "2025-03-14 05:00:00 +0800", "snippet": "由中国团队 Monica 开发的通用人工智能代理产品，于2025年3月6日发布，它的内测邀请码一码难求，甚至被炒至数万元创始人肖弘毕业于华中科技大学软件工程专业，具有连续创业经验，另一位联合创始人季逸超曾开发猛犸浏览器作为一款智能体产品AI Agent，Manus被设计为能够自主完成复杂任务的 AI 系统。与聊天机器人不同，Manus 能够自主规划并执行多模态任务，无需用户持续指导便可自动搜索和多步骤行动，直接交付完整成果。有强大的工具调用能力，主动调用浏览器，代码编辑器等例如从包含十来份简历的压缩包里筛选出最符合的求职简历；股票分析以前的AI，跟它说句话，它顶多给您答个话，而现在，AI Agent能帮您把事儿给办了。演示：https://manus.im/share/Aa0M0gvOybi9cRwDK0RNpx?replay=1https://manus.im/share/hRGARE7EBqtDhLHBGISLP7?replay=1https://manus.im/share/Sc5a78DH57lQ5aYJbVAvZp?replay=1https://manus.im/share/cmRIphYJybxNiLSkWn6PJn?replay=1与此同时，开源复现潮也出现了，除了之前介绍的OpenManus之外，另一个开源项目OWL已经把DeepSeek模型整合到多智能体协作框架中。OpenManus所使用的代码库browser-use也现身了Browser Use是Manus执行各种任务的关键组件之一，比如点击网站菜单和填写表单。每个人都想知道如何造一个Manus，而MCP是一种有效的实现途径。MCP（Model Context Protocol）协议是由Anthropic提出来的，这协议旨在提供一个开放标准，用于连接大型语言模型（LLMs）与外部数据源和工具，简化AI应用的集成与开发。GAIA基准测试：GAIA由Meta AI、HuggingFace和AutoGPT团队推出，图灵奖得主Yann LeCun和HuggingFace首席科学家Thomas Wolf参与，旨在解决现有大语言模型基准测试被快速突破、难以评估新模型的问题。3月11日，Manus平台与阿里通义千问团队宣布达成战略合作，双方将基于通义千问系列开源模型，在国产模型和算力平台上实现Manus的全部功能。3月6日推出的QwQ-32B推理模型，尽管仅有320亿参数，但通过强化学习优化，其性能已能与6710亿参数的DeepSeek-R1相媲美。此外，该模型支持消费级显卡本地部署，为中小企业采用国产AI解决方案提供了更具经济性的选择。其他科技巨头也在AI Agent领域积极布局。微软在2024年宣布打造全球最大的企业级AI Agent生态系统，并在Dynamics 365中集成了10个自主AI Agent；谷歌基于Gemini 2.0模型推出了三款AI Agent，包括“通用大模型助手”Project Astra、“浏览器助手”Project Mariner以及“编程助手”Jules；OpenAI则在2025年1月发布了首款AI智能体Operator，并于3月11日推出全新Agent工具，旨在帮助开发者更便捷地创建能够自动执行任务的AI Agent。参考https://ai-bot.cn/manus/https://www.qbitai.com/2025/03/262263.html" }, { "title": "常用工具推荐系列2:fiddler如何抓包", "url": "/posts/tools-2/", "categories": "常用工具推荐系列", "tags": "常用工具推荐系列", "date": "2025-03-13 05:22:00 +0800", "snippet": "先设置软件的网络代理如下：http 127.0.0.1:8888然后打开fiddlerToos-&amp;gt;Fiddler Options-&amp;gt;Https-&amp;gt;Decrypt Https traffic， Ignore server certificate errorsRules-&amp;gt;Automatic Breakpoints-&amp;gt;Before Requests然后请求来后，会中断，此时可以看到请求的头，看完请求数据后可以点击Run to completion就可以让请求完成并看到响应数据。用完要关闭代理设置。" }, { "title": "开源软件推荐系列13:爬虫", "url": "/posts/opensource-soft-13/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2025-03-13 05:20:00 +0800", "snippet": "🧰 一、主流爬虫框架（开发友好，适合程序员） Scrapy（Python） 特点：异步高性能框架，支持数据管道（Pipeline）、中间件扩展，可导出JSON/CSV/XML等格式。 适用场景：大规模结构化数据抓取（如电商价格监控、新闻聚合）。 局限：需配合Selenium/Playwright处理动态JS页面。 Crawlee（Node.js/Python） 特点：内置反爬机制（代理轮换、浏览器指纹模拟），无缝切换HTTP与无头浏览器模式，适合复杂站点。 适用场景：需要对抗反爬的动态网页（如社交媒体、单页应用）。 Apache Nutch（Java） 特点：分布式架构，兼容Hadoop，严格遵循robots协议，适合搜索引擎级爬取。 适用场景：超大规模全网爬取（学术研究、企业级数据仓库）。 🖱️ 二、可视化/无代码工具（非技术用户首选） EasySpider（跨平台，支持Windows/Linux/macOS） 特点：拖拽式设计，支持登录认证、循环翻页、条件分支，数据可导出为CSV/JSON或存入数据库。 适用场景：快速采集商品信息、新闻内容等，无需编程基础。 Portia（基于Scrapy） 特点：通过点击网页元素定义抓取规则，自动生成爬虫，支持Ajax页面。 适用场景：静态页面+轻量动态页面的可视化采集。 🧩 三、轻量级库/工具（灵活嵌入开发） BeautifulSoup + Requests（Python） 特点：HTML解析神器，搭配Requests处理HTTP请求，适合小规模快速抓取。 适用场景：静态页面数据提取（如博客文章、论坛内容）。 Selenium（多语言支持） 特点：模拟浏览器操作（点击、表单提交），完美处理JavaScript渲染。 适用场景：需交互的动态网页（如登录后爬取、瀑布流加载）。 ⚙️ 四、AI增强型工具（智能解析与适应） Firecrawl 特点：专为AI优化，将网页转为LLM友好的Markdown/JSON，支持JS渲染和反爬绕过。 适用场景：RAG系统、知识库构建（如学术论文、竞品分析）。 ScrapeGraphAI（Python） 特点：用LLM理解页面结构，自动适配网站改版，减少维护成本。 适用场景：结构易变的网站（如频繁更新的新闻门户）。 📊 工具对比速查表| 工具名称 | 语言/平台 | 核心优势 | 适用场景 ||——————–|——————|———————————-|———————————-|| Scrapy | Python | 高性能异步，扩展性强 | 大规模结构化数据采集 || EasySpider | 跨平台（无代码） | 可视化操作，支持复杂逻辑 | 非技术人员快速抓取 || Crawlee | Node.js/Python | 内置反爬，动态页面支持 | 高防网站爬取 || Selenium | 多语言 | 完全模拟浏览器行为 | 交互式动态网页 || Firecrawl | API服务 | 输出AI友好格式，自动处理JS | 知识库构建/LLM数据源 |💎 四、如何选择？ 追求开发自由度 → Scrapy / Crawlee 零编程需求 → EasySpider / Portia 应对动态页面 → Selenium / Crawlee AI集成或学术研究 → Firecrawl / ScrapeGraphAI" }, { "title": "vs系列7:搜索插件", "url": "/posts/vs-7/", "categories": "vs系列", "tags": "vs系列", "date": "2025-03-13 05:00:00 +0800", "snippet": "https://github.com/chromium/vs-chromiumhttps://chromium.github.io/vs-chromium/搜索速度很快。安装后，视图-其它窗口-Code Search打开搜索窗口需要在项目根目录下放一个vs-chromium-project.txt 文件[SourceExplorer.ignore].git/*.objBin/[SearchableFiles.ignore]obj/Debug/VSProject/*.pch*.pdb[SearchableFiles.include]*txt文件的名字是特定的，不能改成其它的。" }, { "title": "电影系列14:这个杀手不太冷 无套路下载", "url": "/posts/movie-14/", "categories": "电影系列", "tags": "电影系列", "date": "2025-03-12 07:50:00 +0800", "snippet": "ed2k://|file|%E3%80%90%E4%BA%BA%E4%BA%BA%E9%9B%BB%E5%BD%B1%E7%BD%91%EF%BC%9Awww.rrdyw.net%E3%80%91Leon.1994.%E8%BF%99%E4%B8%AA%E6%9D%80%E6%89%8B%E4%B8%8D%E5%A4%AA%E5%86%B7.%E5%8A%A0%E9%95%BF%E7%89%88.%E5%8F%8C%E8%AF%AD%E5%AD%97%E5%B9%95.HR-HDTV.AC3.1024X576.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86%E5%88%B6%E4%BD%9C.mkv|2361203466|31327BEBEE45D329A98E8EE2200967A7|h=F7MPW27BAZVMVKCXISD6HNLCFGRS2D4D|/如果链接失效，请反馈" }, { "title": "商品选购系列13:天文望远镜", "url": "/posts/shopping-13/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2025-03-12 05:35:00 +0800", "snippet": "包括物镜，目镜，寻星镜镜筒是有长度的，镜筒的长度就是物镜的焦距，比如镜筒是 650mm，焦距就是 650mm焦距是指通过物镜将光线聚焦在一点所需的距离。焦距越长，观测视野越小，放大倍率时成像较为清晰，适合观测明亮且细节丰富的近距离天体，比如月球、土星、木星。倍率 = 物镜焦距 / 目镜焦距那么用 20mm 的目镜时，倍率就是 900 / 20 = 45 倍；改为 4mm 的目镜后，倍率就变成了 225 倍。倍率是可以通过更换目镜改变的。所以不要追求高倍率，这没什么意义。小焦距的目镜会导致视野狭小赤道仪可以抵消地球自转带来的场旋，天文望远镜分为 3 类：折射式、反射式即牛顿反射式、折反射式。牛反同等价位下可获得更大的口径，但比较重，使用不太方便，需要经常校准。折反式望远镜集折射式和反射式之长，有施密特-卡塞格林式（施卡镜）以及马克苏托夫-卡塞格林式（马卡镜）两类，优点是口径大、焦距长、结构紧凑、便携，但视野范围较小。支架可分为地平式支架（经纬仪）和赤道式支架。赤道式支架：赤道式支架最常见的德式赤道仪支架，这种支架不论用于天文摄影还是天文观测都非常合适，也是目前民用天文望远镜的主流支架。其优点在于操作门槛更低，在校准后，只需转动一根轴即可调节方位追踪，配合寻星、追星装置，能轻易实现全自动化调节，体验极好，尤其如果需要进行天文摄影，堪称必选。地平式支架：地平式支架最有代表性的一种名为道布森支架，一般搭载牛顿式反射天文望远镜来使用，其优点在于容易架设组装且成本低，性价比高，个人也很容易DIY制作，而且重心低、转动流畅，非常适合目测观星。但用来天文摄影体验极差，容易出现长曝光现象导致出现重影问题，其次在追星操作上也更麻烦，需要不停同时调节赤经轴和赤纬轴，操作门槛跟高，尤其对入门者不太友好。赤道仪是为了改进地平式观星支架的缺点而制作出来的，地平式装置观星时虽然操作搭建简单，适合初学者操作，但是由于星星与地球都是一直在运动，其最大的缺点就是需要不停地追星，调整仰角与方位角，而赤道仪的转动则可以消除地球自转的影响，使得每颗星星的坐标参数保持不变，从而更方便追星与调整。赤道仪按照结构的差异可分为德式、英式、轭式、马蹄式和叉式5种，其中德式最为常见，常用于长镜筒的折射式望远镜，广泛应用于日常观测。最好有自动寻星和自动追星一般而言，在调试望远镜时会将它的倍率调成与口径数值相等，120mm口径的望远镜建议调到120倍的倍率，如果视宁度极佳，可以把倍率调到“最大有效倍率”，即望远镜口径的2倍，也就是240倍。一旦超过望远镜的最大有效倍率，那么被放大也只是模糊的影像，会丢失很多细节，意义不大，入门建议首选星特朗的 80EQ，改进型EQ2赤道仪比一般手动经纬仪更为稳定、精准，不会有重影、变形等场旋问题，700元左右购买天文望远镜，最关键要看两个参数：口径和焦距。这两个至关重要的参数，几乎完全决定了望远镜的成像素质。除了牛顿反射式外，像折射式、折反射式都必须配备天顶镜，这是用来让我们以比较舒服的姿势进行观察的必备配件。信达小黑75倍，750/10=75，发射式，牛反，EQ3 赤道仪也便于天体的定位于追踪。信达在国内热销的型号是BK P15075 EQ3，俗称“小黑”，2500元左右，150mm口径星特朗127st是马卡，自动寻星，127mm口径，极限星等13，焦距1500，价格3500左右千万不能直接观测太阳，不管是通过寻星镜还是主镜筒。信达小黑：主要是镜筒分单速和双速 脚架分钢脚和铝脚 然后功能配件双电跟还有goto 功能配件可以后期单独加的升级单速是普通版 双速是摄影版 摄影版的小黑在调焦上面比普通版多一个微调旋钮，让调焦更加精细 摄影版的接单反相机更容易对焦 普通版的也可以用单反相机拍摄只是不容易对焦 一般的话双速和单速的区别可以理解为双速用微调可以比较简单的调到清晰的画面 单速的话只有粗调需要慢慢调整 但是能看到的画面差距不大 简单点说单速是配了单速的调焦系统他只有粗调 双速配了双速两种速度的调焦系统 有粗调和微调 微调转10圈相当于粗调的一圈 双速可以更精准一点 其次双速内消光消光好一些 这个对单反摄影的会比较实用 其他差距不大 主镜也是一样的钢脚的比较稳重 稳定性好一点观测不容易受外力影响 更加美观一点价格要贵上不少 铝脚的比较轻便方便携带 另外这两种只有底部脚架不一样 其他的赤道仪或者主镜都是一样的 实际使用情况铝脚是正常使用完全没问题的 所以如果普通使用的话铝脚完全够了的双电跟，电动跟踪，主要是拍摄的时候用到，因为地球是自转的 所以目视的时候您看的目标会慢慢移出您的视线范围 双电跟的作用就是抵消地球自转 让目标一直保留在视野范围内，这个目视低倍数的时候影响不大一般可以手动调整赤道仪转动微调杆就可以跟踪目标了，主要是摄影的时候还有倍数高的时候目标会移动比较快，接单反相机的时候没有双电跟的话 就拉线了。如果不用双电跟 我们就用微调杆手动追踪目标就可以了。双电跟操作也比较复杂的，需要手动先找到目标然后再开启电跟跟踪，也需要提前校准这些，本身精度偏低，不适合新手轻便的折射式望远镜（如80mm口径）更容易被频繁使用，而笨重的反射式或折反射式望远镜可能因搬运困难而降低使用频率。例如： 折射式望远镜镜筒封闭，稳定性好，适合新手快速上手。星特朗80EQ， 信达小黑（BKP150），星特朗127SLT（NexStar 127 SLT）的对比如下：折射式 ，牛顿反射式 ，折反射式（马克苏托夫-卡塞格林）口径 80mm， 150mm， 127mm焦距 900mm ，750mm， 1500mm价格范围 800-1100元 ，2650-3000元（标配钢脚） ，3600-4500元重量 8.62kg（轻便） 25kg（含赤道仪） ，8.12kg（便携）适用场景 城市阳台、行星观测 ，深空天体、行星摄影 ，行星观测、自动寻星小黑缺点：· 体积笨重（镜筒+赤道仪约25kg），搬运需车辆支持；· 需定期调整光轴，维护复杂，对新手不友好；· 标配EQ3D赤道仪无自动寻星功能，需额外购买电跟或GOTO系统。星特朗127SLT· 优点：· 自动寻星（NexStar系统）功能强大，操作便捷；· 折反射式结构便携性好，适合郊外观测；· 1500mm长焦距适合高倍行星观测（如木星云带、土星环缝）。但价格贵i推荐下面这款星特朗80EQ：https://u.jd.com/OrLPo4J" }, { "title": "电影系列13:美丽人生 无套路下载", "url": "/posts/movie-13/", "categories": "电影系列", "tags": "电影系列", "date": "2025-03-11 05:50:00 +0800", "snippet": "资源：迅雷云盘 提取码：iyi8" }, { "title": "windows软件推荐系列11:wsl2", "url": "/posts/windows-softs-11/", "categories": "windows软件推荐", "tags": "windows软件推荐", "date": "2025-03-11 05:05:00 +0800", "snippet": "一、安装WSL 21. 系统要求 Windows版本：Win 10 1903+（内部版本18362+）或 Win 11。 虚拟化支持：需在BIOS中启用虚拟化（任务管理器 → “性能”页 → 确认“虚拟化：已启用”）。2. 安装步骤 启用必要功能（管理员PowerShell执行）： dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestartdism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 重启电脑。 安装Linux内核更新包： 下载x64内核更新包并安装。 设置WSL 2为默认版本： wsl --set-default-version 2 安装Linux发行版：安装默认 Ubuntu 版本wsl –install -d Ubuntu安装特定版本wsl –install -d Ubuntu-22.04二、常用命令| 功能 | 命令 ||————————-|——————————————|| 列出已安装发行版 | wsl -l -v || 运行指定发行版 | wsl -d Ubuntu-22.04 || 设置默认发行版 | wsl -s Ubuntu-22.04 || 终止发行版 | wsl -t Ubuntu-22.04 || 关闭所有WSL实例 | wsl --shutdown || 导出/导入发行版 | wsl --export Ubuntu-22.04 backup.tarwsl --import Ubuntu-22.04 C:\\path backup.tar || 卸载发行版 | wsl --unregister Ubuntu-22.04 || 更新WSL内核 | wsl --update --web-download || 在WSL中执行Windows命令 | notepad.exe（直接输入exe文件名） |三、高效操作技巧 文件系统互访： Windows访问WSL：文件资源管理器输入 \\\\wsl$\\Ubuntu-22.04 直接访问Linux文件。 WSL访问Windows：所有Windows盘符挂载在 /mnt/ 下（如 /mnt/c/Users）。 配置国内镜像加速： sudo sed -i &quot;s@http://.*archive.ubuntu.com@http://mirrors.aliyun.com@g&quot; /etc/apt/sources.listsudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y 适用于apt和conda（修改 ~/.condarc 为清华源）。 SSH远程连接配置： sudo apt install openssh-serversudo vi /etc/ssh/sshd_config # 修改：`PasswordAuthentication yes`sudo service ssh start 通过 ifconfig 获取IP后，用Windows SSH客户端连接。 开机自启动服务（如Nginx/MySQL）： 在WSL创建启动脚本 /etc/init.wsl，添加 service nginx start 等命令。 Windows任务计划程序设置登录时运行：wsl -d Ubuntu-22.04 -u root /etc/init.wsl。 " }, { "title": "电影系列12:千与千寻 无套路下载", "url": "/posts/movie-12/", "categories": "电影系列", "tags": "电影系列", "date": "2025-03-10 05:50:00 +0800", "snippet": "资源：迅雷云盘 提取码：6itq" }, { "title": "windows软件推荐系列10:fiddler抓包", "url": "/posts/windows-softs-10/", "categories": "windows软件推荐", "tags": "windows软件推荐", "date": "2025-03-10 05:05:00 +0800", "snippet": "https://www.telerik.com/download/fiddler/fiddler2" }, { "title": "电影系列11:阿甘正传 无套路下载", "url": "/posts/movie-11/", "categories": "电影系列", "tags": "电影系列", "date": "2025-03-09 07:50:00 +0800", "snippet": "资源：迅雷云盘 https://pan.xunlei.com/s/VNoWFCQkkEIFyUl4DACy4O-HA1提取码：5cpx资源：百度网盘 https://pan.baidu.com/s/1b97w1WF-OXnsKBNf5oPZOw?pwd=2eqx提取码：1234资源：阿里网盘更多电影资源可以关注公众号：toprank520" }, { "title": "电影系列10:泰坦尼克号 无套路下载", "url": "/posts/movie-10/", "categories": "电影系列", "tags": "电影系列", "date": "2025-03-09 06:50:00 +0800", "snippet": "资源：迅雷云盘 提取码：7iau资源：百度网盘 提取码：ohpa" }, { "title": "电影系列9:霸王别姬 无套路下载", "url": "/posts/movie-9/", "categories": "电影系列", "tags": "电影系列", "date": "2025-03-09 05:40:00 +0800", "snippet": " [霸王别姬.BD720P.超清国语中字.mp4](ed2k:// file [人人电影网：www.renrendianyingwang.cn]霸王别姬.BD720P.超清国语中字.mp4 3639212957 96C9B8611778ADD3C146C439353290C1 h=H4DAJWQOJ7OKRRPF47X66QWFDBGKWN33 /)（3.39GB） https://pan.xunlei.com/s/VMRP2s8ENYsibvEgIYHkFzU8A1 提取码：uqs4https://pan.baidu.com/s/18DYQBrCURZZFsm8iklrGzQ 提取码: 2333" }, { "title": "windows软件推荐系列9:桌面管理软件", "url": "/posts/windows-softs-9/", "categories": "windows软件推荐", "tags": "windows软件推荐", "date": "2025-03-09 05:05:00 +0800", "snippet": "Rolan，类似以前的vstart音速启动,用于快捷方式管理。让桌面不是乱七八糟一大堆图标。看起来很清爽。但是收费的。Dawn Launcher ,采用Electron开发,最新版（v1.5.0）仅支持Windows 10及以上系统Lily 启动器,纯绿色软件 https://cr2.chenjianxiang.com/lilypcpj.ziphttps://www.cr173.com/soft/756291.html" }, { "title": "电影系列8:肖申克的救赎 无套路下载", "url": "/posts/movie-8/", "categories": "电影系列", "tags": "电影系列", "date": "2025-03-08 05:30:00 +0800", "snippet": "https://pan.xunlei.com/s/VMRqj71ccjdnl3rnB4wf5zWfA1提取码：2fy3magnet:?xt=urn:btih:36bb95bec8d3ec9b11647bb8c8f50c1882c4d64b如果你发现更好的资源，欢迎补充" }, { "title": "Python系列8:2.7升级3", "url": "/posts/python-8/", "categories": "Python", "tags": "Python", "date": "2025-03-08 05:00:00 +0800", "snippet": "待整理" }, { "title": "Python系列7:gui框架推荐", "url": "/posts/python-7/", "categories": "Python", "tags": "Python", "date": "2025-03-07 05:00:00 +0800", "snippet": "选择 Python GUI 框架需结合项目复杂度、开发经验、性能及跨平台需求。🧩 一、全能型框架（复杂应用首选）1. PyQt5 / PySide6 核心优势 功能最强：支持 600+ 控件（表格、3D 渲染、多媒体），集成 Qt Designer 可视化拖拽布局。 界面美观：QSS 样式表（类 CSS）实现高定制化，动画效果流畅，媲美桌面原生应用。 跨平台：Windows/macOS/Linux 深度适配，支持高分辨率屏渲染。 缺点 学习曲线陡峭（需掌握信号槽机制、QThread 多线程）。 打包体积大（约 50-100MB），商业应用需注意 LGPL 协议限制。 适用场景：大型桌面软件（如 IDE、数据可视化工具）、企业级应用。2. wxPython 核心优势 原生外观：调用系统原生控件，Win/Mac/Linux 界面风格与操作系统一致。 Pythonic API：比 PyQt 更符合 Python 编码习惯，事件绑定简洁。 缺点 文档较少，高级功能（如自定义绘图）需啃 C++ 版 wxWidgets 文档。 社区活跃度低于 PyQt，复杂控件（如 3D 图表）需手动实现。 适用场景：需原生体验的跨平台工具（如配置管理器、轻量级 IDE）。🚀 二、轻量级框架（快速开发）1. PySimpleGUI 核心优势 5 分钟上手：封装 Tkinter/Qt/wxPython，10 行代码生成窗口，支持主题切换。 极简打包：依赖少，exe 文件仅 5-10MB。 缺点 功能有限：复杂交互（如拖拽排序）需直接调用底层框架 API。 适用场景：内部工具原型、数据录入表单、小型自动化脚本前端。2. Tkinter 核心优势 零成本入门：Python 标准库，无需安装，示例丰富。 教学友好：适合 GUI 编程初学者理解事件驱动模型。 缺点 界面老旧：默认风格类似 Windows 95，现代化需依赖 ttk 或第三方主题包。 功能薄弱：无内置图表控件，多线程易卡 UI。 适用场景：学生作业、微工具（如文件重命名器）、教学演示。📱 三、移动/触控优先框架Kivy 核心优势 跨端覆盖：一套代码打包 Android/iOS/Windows/macOS，支持多点触控手势。 GPU 加速：OpenGL ES 2 渲染，适合游戏及动态 UI。 缺点 桌面体验差：移动端优化设计对键鼠操作反人类（如无右键菜单）。 需学习 KV 语言：布局文件与 Python 代码分离，增加心智负担。 适用场景：移动 App（如教育类触屏应用）、简单 2D 游戏。⚡ 四、新兴高性能框架Dear PyGui 核心优势 实时渲染：基于 GPU 加速，支持 60fps 动态数据可视化（如实时曲线图）。 声明式语法：类似前端开发体验，减少回调嵌套。 缺点 生态不成熟：控件数量少（约 30 个），复杂业务需自造轮子。 文档示例少：GitHub Issue 是主要求助渠道。 适用场景：工业监控仪表盘、实时数据看板、仿真工具界面。🔍 五、框架对比一览表| 维度 | PyQt6/PySide6 | wxPython | PySimpleGUI | Tkinter | Kivy ||——————|———————|———————|———————|———————|———————|| 学习曲线 | ⭐⭐⭐⭐（陡峭） | ⭐⭐⭐（中等） | ⭐（极低） | ⭐（极低） | ⭐⭐⭐⭐（高） || 功能强度 | ⭐⭐⭐⭐⭐ | ⭐⭐⭐⭐ | ⭐⭐ | ⭐ | ⭐⭐⭐⭐ || 界面美观度 | ⭐⭐⭐⭐⭐（可定制） | ⭐⭐⭐⭐（原生） | ⭐⭐（依赖主题） | ⭐（需美化包） | ⭐⭐⭐（现代但非原生） || 打包体积 | 50-100MB | 30-50MB | 5-10MB | &amp;lt;5MB | 20-40MB || 移动端支持 | ❌ | ❌ | ❌ | ❌ | ✅ || 适用项目规模 | 大型 | 中大型 | 小型 | 微型 | 移动端项目 |💎 六、按场景选型指南 初学者/教学用途 → Tkinter 零配置+语法简单，30 行代码实现计算器。 企业内部工具 → PySimpleGUI 3 小时完成 CSV 解析工具前端，支持一键打包。 商业级桌面软件 → PyQt6（开源项目）/ PySide6（商业应用） 用 Qt Designer 拖拽布局，QThread 解决阻塞问题，QPdfWriter 导出报表。 移动端 App → Kivy Buildozer 一键打包 APK/iPA，触控手势识别精度达 99%。 数据可视化看板 → Dear PyGui 实时绘制 10 万点折线图不卡顿，适合物联网监控场景。 💡 避坑提示： 避免用 Tkinter 开发复杂应用：后期扩展性差，事件循环缺陷易导致卡死。 慎选 Kivy 开发桌面软件：其触控优先设计对键鼠用户极不友好。 📚 七、学习资源推荐 PyQt6：《PyQt6 快速开发与实践》 + 官方 Qt Designer 教程 Tkinter：Python 官方教程 + 项目模板 TKinterDesigner 移动开发：Kivy 官方 Pong 教程根据需求权衡开发效率与功能上限，可优先用 PySimpleGUI 验证原型，再逐步迁移至 PyQt6 实现工业级交付。" }, { "title": "vs系列6:远程调试", "url": "/posts/vs-6/", "categories": "vs系列", "tags": "vs系列", "date": "2025-03-06 05:00:00 +0800", "snippet": "以下在远端windows arm64机器上进行调试。首先在远端arm64机器上安装arm64远程工具。x64机器上要安装了适用于arm64的vs远端机器安装远程工具https://learn.microsoft.com/zh-cn/visualstudio/debugger/remote-debugging-cpp?view=vs-2022配置vs：右键项目的“属性”，不是解决方案的属性。 打开“调试”选项卡远程命令：要部署的exe在远程机上的全路径比如：C:\\test\\test.exe工作目录：exe所在的远程机器上的目录比如：C:\\test远程服务器名称：服务器:端口调试器类型：仅限本地Native Only部署目录：同工作目录，比如：C:\\test右键单击解决方案，然后选择“配置管理器”，勾选上部署即可，然后在项目上右键部署，如果部署失败，需要取消勾选上面的部署，自己手动拷贝代码过去。https://learn.microsoft.com/en-us/visualstudio/debugger/project-settings-for-a-cpp-debug-configuration?view=vs-2022" }, { "title": "Python系列6:Streamlit是什么", "url": "/posts/python-6/", "categories": "Python", "tags": "Python", "date": "2025-03-06 05:00:00 +0800", "snippet": "Streamlit 是一款基于 Python 的开源框架，专为数据科学家和开发者设计，用于快速构建交互式数据应用和机器学习界面。它通过简化 Web 开发流程，让用户无需前端知识即可创建动态、可视化的工具。一、核心功能与特点 零前端开发需求Streamlit 完全依赖 Python 脚本控制界面元素，用户通过简单代码即可生成按钮、滑块、图表等交互组件。例如，使用 st.slider() 创建滑动条控件，或通过 st.pyplot() 嵌入 Matplotlib 图表。 实时热重载（Hot Reload）修改代码后，Streamlit 会自动刷新页面，无需手动重启服务器，极大提升开发效率。这一特性尤其适合快速迭代和调试。 丰富的内置组件• 数据展示：支持直接显示 Pandas 数据框、Markdown 文本、图片等。 • 交互控件：包括文件上传器、下拉菜单、进度条等，用户输入可实时触发数据更新。 • 布局管理：通过 st.sidebar 创建侧边栏，或用 st.columns 分栏排版，优化界面结构。 与数据科学工具无缝集成兼容主流库如 Pandas、NumPy、Matplotlib、Scikit-learn 和 TensorFlow，可直接在应用中加载模型、分析数据并可视化结果。 二、应用场景 数据可视化仪表盘快速构建交互式报告，例如展示销售趋势或实时监控业务指标。用户可通过滑动条筛选时间范围，动态更新图表。 机器学习模型演示部署分类器或回归模型，允许用户输入参数并实时查看预测结果。 内部工具开发创建数据清洗工具或自动化报告生成器，例如上传 CSV 文件后自动生成统计摘要。 教育与协作开发交互式教学材料，例如展示算法动态效果 三、与其他框架的对比| 框架 | 适用场景 | 学习成本 | 定制化能力 ||—————-|———————————-|————–|———————-|| Streamlit | 快速原型开发、数据科学应用 | 低（仅需Python） | 中等（依赖内置组件） || Dash | 复杂数据分析工具 | 较高（需学React） | 高（支持深度定制） || Flask | 全功能 Web 应用（需前后端分离） | 高（需前后端知识） | 极高（完全自主开发） |四、入门与部署 安装与验证通过 pip install streamlit 安装，运行 streamlit hello 可查看示例应用。 创建首个应用 import streamlit as stst.title(&quot;Hello Streamlit!&quot;)name = st.text_input(&quot;输入姓名&quot;)st.write(f&quot;欢迎，{name}！&quot;) 执行 streamlit run app.py 启动应用。 部署选项• 本地运行：直接通过命令行启动，适合开发和测试。 • 云端部署：使用 Streamlit Community Cloud 或 Hugging Face Spaces 一键托管。 五、总结• 开发效率：从脚本到可分享的 Web 应用仅需几分钟。• 学习曲线：无需 HTML/CSS/JavaScript，适合 Python 开发者快速上手。• 社区支持：活跃的开源社区提供大量教程和第三方插件（如 Streamlit-AgGrid）。" }, { "title": "艺搜周刊第3期", "url": "/posts/weekly-3/", "categories": "艺搜周刊", "tags": "艺搜周刊", "date": "2025-03-05 05:01:00 +0800", "snippet": "2025-01-28 春节2025-01-28 DeepSeek登顶苹果中美两区意味着什么2025-02-07《哪吒之魔童闹海》登顶全球影史单一市场票房榜。截至2月7日21时，电影《哪吒之魔童闹海》票房（含预售）突破67.922亿，超过《星球大战：原力觉醒》票房成绩，登顶全球影史单一市场票房榜。2025-03-04 腾讯元宝登顶苹果中国区免费榜榜首，超越DeepSeek" }, { "title": "git系列8:合并时禁止自动提交", "url": "/posts/git-8/", "categories": "git系列", "tags": "git系列", "date": "2025-03-03 05:00:00 +0800", "snippet": "git merge时如何只合并不提交可以使用 –no-commit 选项" }, { "title": "电影百科系列3:动画片与动漫有啥区别", "url": "/posts/moviebaike-3/", "categories": "电影百科系列", "tags": "电影百科系列", "date": "2025-03-02 05:30:00 +0800", "snippet": "动画片起源于欧美（如迪士尼、皮克斯）日本是动漫文化的代表动漫更注重角色塑造、世界观构建和长期剧情发展。" }, { "title": "DeepSeek系列1:V3与R1区别", "url": "/posts/deepseek-1/", "categories": "DeepSeek系列", "tags": "DeepSeek系列", "date": "2025-03-01 05:30:00 +0800", "snippet": "V3:定位：通用型多模态模型，擅长标准化任务（如智能客服、多语言翻译、内容生成等）R1：专注于复杂逻辑推理任务（如数学证明、代码生成、金融分析），适合科研、算法开发等深度推理场景追求效率与通用性：选V3，它像“高效秘书”，快速解决80%的日常任务需要深度推理与创新：选R1，它是“天才军师”，攻克20%的高难度问题" }, { "title": "Yarn系列1:介绍", "url": "/posts/yarn-1/", "categories": "Yarn系列", "tags": "Yarn系列", "date": "2025-03-01 05:00:00 +0800", "snippet": "JavaScript 包管理工具由 Facebook 于 2016 年推出，主要用来替代 npm（Node 包管理器）通过锁文件 (yarn.lock) 确保团队中每个人使用的依赖版本一致先确保你已安装 Node.jsnpm install -g yarn使用 Yarn 初始化一个新项目：yarn init这会创建一个 package.json 文件。安装依赖：yarn add更新项目中的所有依赖：yarn upgrade如果项目中定义了脚本，可以使用yarn run 脚本名 来运行脚本" }, { "title": "开源软件推荐系列12:桌面提醒软件", "url": "/posts/opensource-soft-12/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2025-02-22 05:20:00 +0800", "snippet": "要求：免费，无广告，开源优先BreakTimer核心功能：自定义休息间隔（如30分钟提醒一次），支持弹窗+音效提醒；智能空闲检测（离开电脑自动暂停倒计时）；可设置工作时间段（如仅工作日提醒）。优势：开源免费（GitHub 1.1K星），无广告；多平台支持（Windows/macOS/Linux）；界面简洁，支持自定义弹窗颜色和提示语。下载：GitHub仓库或官网（需注意部分功能需配置YAML文件）。Stretchly核心功能：科学休息模式：默认每10分钟短暂休息20秒，每30分钟长休息5分钟；严格模式（禁止跳过休息）、勿扰模式（专注时段免打扰）；深色护眼主题+多语言支持（含中文）。优势：开源免费（Electron开发），无广告；跨平台兼容性极强（Windows/macOS/Linux/FreeBSD）；支持系统托盘运行，不占用任务栏空间。下载：GitHub Releases页面或国内镜像站。Workrave核心功能：动态监测鼠标键盘活动，自动计时（如45分钟提醒休息）；内置做操动画（如肩颈拉伸、眼保健操）；支持自定义倒计时和休息时长。优势：开源免费，无广告；适合久坐办公族，缓解重复性劳损（RSI）；体积小巧（安装版仅18M），老电脑流畅运行。下载：官网或国内论坛（如吾爱破解）。迷你定时提醒工具（MiniAlert）核心功能：极简定时提醒（如设置30分钟弹窗）；支持开机自启、护眼配色（豆沙绿/粉蓝色）；事件内容自定义（如“休息喝水”）。优势：免费无广告，绿色版仅0.9M；无需安装，即开即用；适合轻量化需求（如学生、基础办公）。局限性：非开源，声音提醒功能有限。选型建议优先开源：选BreakTimer或Stretchly，扩展性强且透明度高。需健康指导：选 Workrave（动画教学），缓解肩颈/眼部疲劳。极简需求：选迷你定时提醒工具，零学习成本。" }, { "title": "电影系列7:第90届奥斯卡金像奖获奖影片全集打包下载", "url": "/posts/movie-7/", "categories": "电影系列", "tags": "电影系列", "date": "2025-02-20 06:30:00 +0800", "snippet": "第90届奥斯卡金像奖（2018年颁发）获奖影片及简介以下是所有获奖影片及其对应奖项和简短剧情介绍，按影片名称排序：1.《水形物语》（The Shape of Water）· 获奖奖项：最佳影片、最佳导演（吉尔莫·德尔·托罗）、最佳艺术指导、最佳原创配乐· 剧情简介：1963年冷战时期，一名哑女实验室清洁工与被困的水陆两栖生物产生情感，并策划营救行动。影片以奇幻暗黑风格探讨孤独与跨越物种的爱。2.《三块广告牌》（Three Billboards Outside Ebbing, Missouri）· 获奖奖项：最佳女主角（弗兰西斯·麦克多蒙德）、最佳男配角（山姆·洛克威尔）· 剧情简介：一位母亲因女儿奸杀案未破，租下三块广告牌公开谴责警方无能，引发小镇连锁反应，揭露人性善恶与救赎的可能。3.《至暗时刻》（Darkest Hour）· 获奖奖项：最佳男主角（加里·奥德曼）、最佳化妆与发型设计· 剧情简介：二战初期，英国首相丘吉尔面临是否与纳粹和谈的抉择，影片聚焦他在议会中的激烈辩论与个人挣扎，展现历史转折点的领袖魄力。4.《敦刻尔克》（Dunkirk）· 获奖奖项：最佳音效剪辑、最佳音响效果、最佳剪辑· 剧情简介：以海陆空三线叙事还原二战中敦刻尔克大撤退，士兵在德军围困下绝境求生，通过极简台词与沉浸式音效营造战争压迫感。5.《银翼杀手2049》（Blade Runner 2049）· 获奖奖项：最佳摄影、最佳视觉效果· 剧情简介：未来世界中，复制人警官K发现一个可能颠覆社会秩序的隐秘真相，踏上寻找失踪传奇银翼杀手的旅程，探讨人性与记忆的边界。6.《寻梦环游记》（Coco）· 获奖奖项：最佳动画长片、最佳原创歌曲（《Remember Me》）· 剧情简介：墨西哥男孩米格误入亡灵世界，追寻音乐梦想的同时揭开家族禁忌，以绚烂画风诠释亲情与记忆的力量。7.《霓裳魅影》（Phantom Thread）· 获奖奖项：最佳服装设计· 剧情简介：1950年代伦敦，偏执的天才裁缝与年轻女子展开情感博弈，病态控制欲与艺术追求交织成一段扭曲的爱情故事。8.《伊卡洛斯》（Icarus）· 获奖奖项：最佳纪录长片· 剧情简介：导演原本计划揭露体育禁药黑幕，却意外牵出俄罗斯系统性兴奋剂丑闻，真实记录国际奥委会与俄罗斯政府的博弈。9.《普通女人》（A Fantastic Woman）· 获奖奖项：最佳外语片（智利）· 剧情简介：跨性别女性在伴侣猝死后，遭遇其家人的歧视与法律压迫，以坚韧对抗社会偏见，争取尊严与爱的权利。10.《亲爱的篮球》（Dear Basketball）· 获奖奖项：最佳动画短片· 剧情简介：科比·布莱恩特以手绘动画自述职业生涯，从童年梦想成长为篮球巨星的心路历程，致敬对篮球的热爱与退役宣言。其他技术类奖项影片· 《金钱世界》（All the Money in the World）：最佳男配角提名者克里斯托弗·普卢默紧急补拍替换原主演凯文·史派西，但未获奖。· 《沉默的孩子》（The Silent Child）：最佳真人短片，讲述聋哑女孩与手语教师的温情故事。提供以上电影合集的U盘及其他资源定制U盘" }, { "title": "电影系列6:第91届奥斯卡金像奖获奖影片全集打包下载", "url": "/posts/movie-6/", "categories": "电影系列", "tags": "电影系列", "date": "2025-02-15 06:30:00 +0800", "snippet": "第91届奥斯卡金像奖于2019年颁发。以下是获奖影片及奖项： 《绿皮书》：最佳影片、最佳男配角、最佳改编剧本 《罗马》：最佳导演、最佳外语片、最佳摄影 《波西米亚狂想曲》：最佳男主角、最佳剪辑、最佳音响效果、最佳音效剪辑 《宠儿》：最佳女主角 《假若比尔街能够讲话》：最佳女配角 《蜘蛛侠：平行宇宙》：最佳动画长片 《包宝宝》：最佳动画短片 《徒手攀岩》：最佳纪录长片 《句尾》：最佳纪录短片 《肤色》：最佳真人短片 《黑豹》：最佳艺术指导、最佳服装设计、最佳原创配乐 《登月第一人》：最佳视觉效果 《副总统》：最佳化妆与发型设计 《一个明星的诞生》：最佳原创歌曲“Shallow”提供以上电影合集的U盘及其他资源定制U盘" }, { "title": "电影系列5:第92届奥斯卡金像奖获奖影片全集打包下载", "url": "/posts/movie-5/", "categories": "电影系列", "tags": "电影系列", "date": "2025-02-15 05:30:00 +0800", "snippet": "第92届奥斯卡金像奖是在2020年颁发的。以下是获奖影片及奖项：• 《寄生虫》：最佳影片、最佳导演、最佳原创剧本、最佳国际影片• 《小丑》：最佳男主角、最佳原创配乐• 《朱迪》：最佳女主角• 《好莱坞往事》：最佳男配角、最佳艺术指导• 《婚姻故事》：最佳女配角• 《乔乔的异想世界》：最佳改编剧本• 《玩具总动员4》：最佳动画长片• 《美国工厂》：最佳纪录长片• 《1917》：最佳摄影、最佳视觉效果、最佳音响效果• 《极速车王》：最佳剪辑、最佳音效剪辑• 《小妇人》：最佳服装设计• 《爆炸新闻》：最佳化妆与发型设计• 《火箭人》：最佳原创歌曲• 《发之恋》：最佳动画短片• 《邻居的窗》：最佳真人短片• 《女孩的战地滑板课》：最佳纪录短片提供以上电影合集的U盘" }, { "title": "电影系列4:第93届奥斯卡金像奖获奖影片全集打包下载", "url": "/posts/movie-4/", "categories": "电影系列", "tags": "电影系列", "date": "2025-02-14 07:30:00 +0800", "snippet": "第93届奥斯卡金像奖是在2021年颁发的。以下是获奖影片及奖项： 1《无依之地》：最佳影片、最佳导演、最佳女主角· 剧情简介：一名女性在经济危机中失去一切，选择驾驶房车成为现代游牧民，穿越美国西部寻找生存意义。影片通过纪实风格展现底层群体的漂泊与坚韧。 《困在时间里的父亲》：最佳男主角、最佳改编剧本剧情简介：一位患有阿尔茨海默症的老人逐渐迷失在混乱的记忆与现实中，通过非线性叙事展现患者视角的困惑与恐惧，探讨亲情与衰老的残酷。 《犹大与黑弥赛亚》：最佳男配角、最佳原创歌曲剧情简介：基于真实事件，讲述黑豹党领袖弗雷德·汉普顿被FBI线人背叛的故事，聚焦种族抗争与权力阴谋的交织。 《蓝调天后》：最佳女配角、最佳服装设计、最佳化妆与发型设计剧情简介：1920年代芝加哥，传奇蓝调歌手玛·雷尼在录音室与乐队成员爆发冲突，揭露种族歧视与艺术剥削，以音乐为载体的社会批判。 5《曼克》：最佳摄影、最佳艺术指导 《灵魂乐之夏》：最佳动画长片、最佳原创配乐 《金属之声》：最佳剪辑、最佳音效剧情简介：一名重金属鼓手因突发性失聪被迫离开乐队，在适应新生活的过程中学习接纳残缺，通过声音设计让观众沉浸于失聪者的感官世界。 《另一轮》：最佳国际影片 《科莱特》：最佳纪录短片剧情简介：90岁法国老妇重返二战集中营遗址，追忆抵抗运动中被纳粹杀害的哥哥，串联个人记忆与历史伤痕。 10《若有似无我爱你》：最佳动画短片 《前程似锦的女孩》：最佳原创剧本 《我的章鱼老师》：最佳纪录长片剧情简介：一名潜水员与南非海藻林中的章鱼建立跨物种友谊，记录其生命周期与生存智慧，反思人与自然的关系。 《誓血五人组》：最佳剪辑 14《远在天边》：最佳真人短片豆瓣删除了本届获奖名单提供以上电影全集打包U盘" }, { "title": "电子书系列1:《创京东-刘强东亲述创业之路》免费下载", "url": "/posts/book-1/", "categories": "电子书系列", "tags": "电子书系列", "date": "2025-02-12 05:10:00 +0800", "snippet": "https://book.douban.com/subject/26400900/下载地址: mobi:点击下载如果需要其它书，可以留言评论告诉我。" }, { "title": "电影百科系列2:电影行业有哪些含金量特别高的奖项", "url": "/posts/moviebaike-2/", "categories": "电影百科系列", "tags": "电影百科系列", "date": "2025-02-10 19:30:00 +0800", "snippet": "电影行业含金量高的奖项遍布全球，既有国际公认的顶级荣誉，也有地区或国家层面的权威奖项。以下是分类整理的重要电影奖项，涵盖其背景、特点及影响力：一、国际顶级奖项奥斯卡奖（Academy Awards）颁发机构：美国电影艺术与科学学院（AMPAS）特点：全球知名度最高，涵盖导演、演员、影片、技术等20余个奖项，注重商业与艺术的平衡。最高荣誉：最佳影片、最佳导演、最佳国际影片（原最佳外语片）。戛纳电影节金棕榈奖（Palme d’Or）颁发机构：法国戛纳国际电影节特点：欧洲三大电影节之首，推崇艺术性与作者电影，是艺术电影的殿堂级奖项。威尼斯电影节金狮奖（Golden Lion）颁发机构：意大利威尼斯国际电影节特点：历史最悠久的电影节奖项，注重先锋性和实验性电影。柏林电影节金熊奖（Golden Bear）颁发机构：德国柏林国际电影节特点：关注社会议题和政治表达，强调电影的公共价值。英国电影学院奖（BAFTA Awards）颁发机构：英国电影和电视艺术学院特点：被誉为“英国奥斯卡”，对英语电影尤其是英国本土作品影响力显著。二、地区/国家重要奖项北美地区金球奖（Golden Globe Awards）由好莱坞外国记者协会颁发，涵盖电影与电视，被视为奥斯卡风向标。美国演员工会奖（SAG Awards）由演员评选演员，奥斯卡表演类奖项的重要参考。独立精神奖（Independent Spirit Awards）表彰低成本独立电影，如《月光男孩》等奥斯卡获奖影片曾先获此奖。亚洲地区中国金鸡奖：中国大陆最权威奖项，侧重主旋律与艺术性结合。大众电影百花奖：是中国历史最悠久的群众性电影奖，每年评选一次，由观众投票产生，代表了广大观众对电影的喜好和评价，具有广泛的群众基础和社会影响力。● 中国电影华表奖：是中国电影的政府奖，每两年举办一次，旨在表彰优秀的国产影片和电影工作者，对推动中国电影产业的发展、弘扬主流价值观具有重要意义。香港电影金像奖：聚焦香港本土电影工业，影响力辐射华语圈。台湾金马奖：曾为华语电影最高荣誉之一，近年因政治因素受限。日本电影学院奖（日本奥斯卡）：日本国内最高电影奖项。韩国青龙电影奖：韩国大众性与专业性并重的奖项，近年随韩影崛起受国际关注。印度国家电影奖：政府颁发，代表印度电影最高荣誉；Filmfare奖：商业电影风向标。欧洲及其他地区法国凯撒奖（César Awards）：法国本土最高电影奖。西班牙戈雅奖（Goya Awards）：西班牙语电影重要奖项。欧洲电影奖（EFA）：泛欧洲电影界的年度荣誉，地位类似“欧洲奥斯卡”。三、行业与专业类奖项美国导演工会奖（DGA Awards）：奥斯卡最佳导演的重要预测指标。美国编剧工会奖（WGA Awards）：表彰杰出剧本创作。评论家选择奖（Critics’ Choice Awards）：由北美影评人协会颁发，覆盖面广。圣丹斯电影节奖项：独立电影的发声平台，如《爆裂鼓手》从此走出。四、特殊影响力奖项戛纳电影节其他奖项：最佳导演、评审团大奖等，均具高度认可。洛迦诺电影节金豹奖：发掘新锐导演的实验性平台。动画界：安妮奖（动画领域最高荣誉）、奥斯卡最佳动画长片。纪录片：圣丹斯纪录片单元、奥斯卡最佳纪录片。" }, { "title": "电影百科系列1:毒舌电影", "url": "/posts/moviebaike-1/", "categories": "电影百科系列", "tags": "电影百科系列", "date": "2025-02-09 19:30:00 +0800", "snippet": "2017年6月8日，毒舌电影微信公众账号被封。账号被封17天之后，又注册“sir电影”和“毒sir放映室”微信公众号，正常运营。创始人，何君看一部电影需要2小时人的一生可以看20000部电影互联网收录的好电影至少200万部每天坚持看一部电影，那么一生也只能看不到1%推荐好片，把时间浪费在对的事情上毒舌的公号有四个，定位也相对清晰，主号sir电影主要受众是：一二线城市25-40岁成熟精英，资深影迷；表妹则定位为：追日韩热剧、花痴网剧，娱乐圈吃瓜吐槽专业户，18—25岁的大学生和年轻职场群体；肉叔的主要受众是：20-30岁年轻白领、追踪热播影视剧；毒眸号：专写娱乐圈影视圈热点资讯。影视是仅此于游戏的第二大核心娱乐产业https://www.woshipm.com/evaluating/2323062.html毒舌电影作为国内极具影响力的影视自媒体，其发展历程和成功原因可梳理如下：一、发展历史 起源与早期探索（2013-2014年） 毒舌电影最初由陈植雄（毒Sir）与何君（小卷）等人于2013年创立，早期定位为电影推荐与评论平台。首篇爆款文章发布于2013年6月，以犀利吐槽电影《富春山居图》的“五彩斑斓的屎还是屎”等金句引发关注，迅速积累早期粉丝。2014年11月，毒舌电影微信公众号开始独立运营，半年内粉丝突破50万，但因缺乏商业模式未能获得天使轮融资。 商业化转型与扩张（2015-2016年） 2015年6月，毒舌电影放弃融资依赖，转向品牌广告模式，三个月后广告流水达单月百万。2016年完成Pre-A轮和A轮融资，估值达3亿，并布局多平台分发（如抖音、今日头条等），全网粉丝超千万。同时，团队开发“毒舌电影APP”，试图构建影迷生态入口。 封禁与后续影响（2017年后） 因持续批评影视行业乱象（如烂片、删减问题），毒舌电影触及利益链，最终在“净网行动”中被全面封禁，包括公众号和APP。其创始团队曾尝试公关但未果，被封原因被推测为“触碰影视行业利益蛋糕”及敏感内容审查。 二、成功原因分析 内容策略：犀利与专业并存 批判性定位：以“骂烂片、赞好片”为核心，填补了当时影评市场“软文泛滥”的空白。用户需求明确：“选片指南”和“深度影评”双轨并行。 专业性与人格化：毒Sir等IP形象通过“毒舌”风格建立人格化标签，后续扩展“表妹”“菊长”等角色形成IP矩阵，覆盖不同受众（如女性、文艺青年）。 内容质量：团队坚持原创与深度分析，如对《肖申克的救赎》等经典影片的解读，甚至自费推广小众独立电影（如《心迷宫》），树立公信力。 商业模式创新 私域流量转化：短视频（如抖音）仅作为引流工具，核心收入来自公众号和APP的私域流量变现（如广告、会员服务），避免过度依赖平台分成。 广告克制：拒绝影视软文，保持内容独立性，品牌广告合作集中于汽车、数码等领域，用户接受度高。 用户情感共鸣 通过“发泄式吐槽”引发共鸣（如对烂片的讽刺），同时满足用户“信息获取”“身份认同”“情感宣泄”三大需求。 互动性强，如组织众筹观影、送票活动，增强用户黏性。 资本与行业趋势助力 2016年资本涌入后，毒舌电影加速内容与产品布局，抓住短视频红利期，成为行业标杆。 契合自媒体黄金期用户对“真实声音”的渴求，尤其在影视行业乱象丛生的背景下。 三、争议与衰落 触碰行业利益毒舌电影对烂片的尖锐批评、对“影片删减”现象的揭露，直接威胁到影视产业链的利益分配，最终成为封禁导火索。 政策风险其内容涉及敏感议题（如司法不公、权贵批判），在监管收紧的背景下难以持续。总结毒舌电影的成功源于“内容为王”的策略、精准的用户需求把控，以及独特的商业模式。其衰落则揭示了内容创业在商业与监管夹缝中的脆弱性。尽管被封禁，其影响力仍为自媒体行业提供了“优质内容+人格化IP”的经典案例。" }, { "title": "电影系列3:第94届奥斯卡金像奖获奖影片全集打包下载", "url": "/posts/movie-3/", "categories": "电影系列", "tags": "电影系列", "date": "2025-02-07 07:30:00 +0800", "snippet": "第94届奥斯卡金像奖于2022年3月27日颁发，以下是所有获奖影片及其对应的奖项，按类别分类列出：1，《健听女孩》（CODA）最佳影片最佳男配角（特洛伊·科特瑟）最佳改编剧本2《犬之力》（The Power of the Dog）最佳导演（简·坎皮恩）3《驾驶我的车》（ドライブ・マイ・カー）最佳国际影片（日本）4《魔法满屋》（Encanto）最佳动画长片5《灵魂乐之夏》（Summer of Soul）最佳纪录长片6《塔米·菲的眼睛》（The Eyes of Tammy Faye）最佳女主角（杰西卡·查斯坦），最佳化妆与发型设计7《国王理查德》（King Richard）最佳男主角（威尔·史密斯）8《西区故事》（West Side Story）最佳女配角（阿丽亚娜·德博斯）9《贝尔法斯特》（Belfast）最佳原创剧本10《沙丘》（Dune）最佳摄影最佳视觉效果最佳音效最佳艺术指导最佳原创配乐11《黑白魔女库伊拉》（Cruella）最佳服装设计12《007：无暇赴死》（No Time to Die）最佳原创歌曲（《No Time to Die》）13《倒数时刻》（Tick, Tick… Boom!）最佳剪辑14《漫长的告别》（The Long Goodbye）最佳真人短片15《皆为爱》（The Windshield Wiper）最佳动画短片16《篮球女王》（The Queen of Basketball）最佳纪录短片总结以上为第94届奥斯卡所有获奖影片及对应奖项，共涉及23个奖项类别，未遗漏任何一部获奖作品。技术类影片《沙丘》以6项大奖成为当晚最大赢家，而《健听女孩》成为首部获最佳影片的流媒体电影（Apple TV+出品）。" }, { "title": "电影系列2:第95届奥斯卡金像奖获奖影片全集打包下载", "url": "/posts/movie-2/", "categories": "电影系列", "tags": "电影系列", "date": "2025-02-06 07:30:00 +0800", "snippet": "第95届奥斯卡金像奖是在2023年颁发的。以下是完整获奖名单：• 1《瞬息全宇宙》，最佳影片、最佳导演（关家永、丹尼尔·施纳特）、最佳男主角（布兰登·费舍）、最佳女主角（杨紫琼）、最佳男配角（关继威）、最佳女配角（杰米·李·柯蒂斯）、最佳原创剧本、最佳剪辑• 《西线无战事》，最佳国际影片、最佳摄影、最佳原创配乐、最佳艺术指导• 《吉尔莫·德尔·托罗的匹诺曹》，最佳动画长片• 《纳瓦尔尼》，最佳纪录长片• 5《阿凡达2：水之道》，最佳视觉效果• 《壮志凌云2：独行侠》，最佳音效• 《鲸》，最佳化妆与发型设计（阿德里安·莫罗、朱迪·秦、安妮玛丽·布拉德利）• 《黑豹2：瓦坎达万岁》，最佳服装设计• 《RRR》，最佳原创歌曲• 10《爱尔兰式告别》，最佳真人短片• 《男孩、鼹鼠、狐狸和马》，最佳动画短片• 《小象守护者》，最佳纪录短片• 13《女性的谈判》，最佳改编剧本提供以上所有电影的U盘" }, { "title": "电影系列1:第96届奥斯卡金像奖获奖影片全集打包下载", "url": "/posts/movie-1/", "categories": "电影系列", "tags": "电影系列", "date": "2025-02-05 07:30:00 +0800", "snippet": "第96届奥斯卡金像奖颁奖典礼于当地时间2024年3月10日（北京时间2024年3月11日）在美国加利福尼亚州洛杉矶杜比剧院举行，在此次典礼上颁发了该届奥斯卡各奖项 。传记电影《奥本海默》获包括最佳影片在内的七个奖项，是最大赢家。获奖影片及奖项如下： 《奥本海默》：最佳影片、最佳导演、最佳男主角、最佳男配角、最佳摄影、最佳剪辑、最佳原创配乐 《可怜的东西》：最佳女主角、最佳艺术指导、最佳服装设计、最佳化妆与发型 《坠落的审判》：最佳原创剧本 《美国小说》：最佳改编剧本 《利益区域》：最佳国际影片、最佳音效 《你想活出怎样的人生》：最佳动画长片 《战争结束了！受列侬和洋子音乐的启发》：最佳动画短片 《亨利·休格的神奇故事》：最佳真人短片 《马里乌波尔20天》：最佳纪录长片 《最后的修理店》：最佳纪录短片 《芭比》：最佳原创歌曲 《哥斯拉-1.0》：最佳视觉效果 《留校联盟》：最佳女配角提供以上所有电影的U盘合集。" }, { "title": "网络协议系列3:IRC是什么", "url": "/posts/protocol-3/", "categories": "网络协议系列", "tags": "网络协议系列", "date": "2025-01-24 05:15:00 +0800", "snippet": "IRC（Internet Relay Chat，因特网中继聊天）是一种应用层协议，主要用于群体聊天，但也可以用于个人对个人的聊天。它由芬兰人亚尔科·奥伊卡里宁于1988年发明。工作原理是通过客户端软件连接到IRC服务器，用户可以加入不同的频道（类似于聊天室）进行交流。IRC服务器可以互相连接，形成一个分布式的IRC网络。常见的IRC服务器端口有6667（明文传输）和6697（SSL加密传输）特点包括： 实时通信：用户可以即时发送和接收消息。 多频道支持：用户可以加入多个频道，每个频道可以讨论不同的话题。 分布式架构：多个服务器可以互相连接，扩展网络规模。 开放协议：IRC是一种公开的协议，任何人都可以实现自己的IRC客户端或服务器。首先，你需要选择一个IRC客户端If you are in a location without direct IRC access, please try the KiwiIRC Webchat.以下是一些推荐的跨平台IRC客户端，适用于Windows、macOS和Linux： HexChat：这是一个流行的开源IRC客户端，基于XChat开发，支持多平台。它具有用户友好的界面和丰富的功能，如脚本支持和多服务器连接。 WeeChat：这是一个高度可定制的终端IRC客户端，支持多种脚本语言（如Python、Ruby、Lua等）。它适用于Windows、macOS和Linux。" }, { "title": "AI系列17:私有部署本地文生图工具", "url": "/posts/ai-17/", "categories": "AI系列", "tags": "AI系列", "date": "2025-01-24 05:00:00 +0800", "snippet": "依赖Python 3.10.6，(Newer version of Python does not support torch) checking “Add Python to PATH”.注：torch是一个用于深度学习的开源库，全名是 PyTorch,由 Facebook 的人工智能研究团队开发git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git先管理员权限打开cmd，并cd到脚本所在目录，然后Run webui-user.batRuntimeError: Torch is not able to use GPU; add –skip-torch-cuda-test to COMMANDLINE_ARGS variable to disable this check解决：打开webui-user.bat文件。找到COMMANDLINE_ARGS变量的设置行,加上set COMMANDLINE_ARGS=–skip-torch-cuda-test运行成功后会在浏览器上打开 http://127.0.0.1:7860/点generate时报RuntimeError: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver由于Stable Diffusion WebUI依赖于NVIDIA GPU进行加速，因此在没有NVIDIA GPU的系统上运行会出现这个错误。解决：使用CPU进行推理：虽然速度会慢很多，但你可以修改配置文件以使用CPU而不是GPU。你可以在启动命令中添加–no-half" }, { "title": "AI系列16:多模态是什么", "url": "/posts/ai-16/", "categories": "AI系列", "tags": "AI系列", "date": "2025-01-23 05:35:00 +0800", "snippet": "多模态，简单来说就是指能够处理和理解多种类型数据的技术或模型。这些数据类型可以包括文本、图像、视频、音频等。举个例子：我们人类在日常生活中，经常会同时接收到来自不同感官的信息，比如看到一张图片、听到一段声音，并能将这些信息结合起来，形成一个完整的认知。多模态就是试图让机器也具备这种能力，能够同时处理和理解来自不同模态的数据。多模态的优势： 信息更全面： 通过融合多种模态的数据，可以获得更全面、更准确的信息。 理解能力更强： 多模态模型可以更好地理解复杂场景，提高任务的准确性。 应用范围更广： 多模态技术在自然语言处理、计算机视觉、语音识别等领域都有广泛的应用。多模态的应用场景： 图像描述生成： 根据给定的图像，生成一段描述性的文字。 视频理解： 理解视频内容，进行视频分类、事件检测等。" }, { "title": "AI系列15:DeepSeek是什么", "url": "/posts/ai-15/", "categories": "AI系列", "tags": "AI系列", "date": "2025-01-23 05:30:00 +0800", "snippet": "DeepSeek 是一家中国专注于人工智能技术研发的公司，致力于打造高性能、低成本的 AI 模型。最近，DeepSeek 推出了最新一代的 AI 模型——DeepSeek-V3DeepSeek-V3 有以下几个特点：性能强大：DeepSeek-V3 拥有 6710 亿参数，尽管只激活了 370 亿参数，但在知识问答、长文本处理、代码生成和数学能力等方面表现出色生成速度快：生成速度从上一代的 20 TPS 提升到了 60 TPS，用户体验更加流畅价格亲民：相比国际顶尖模型（如 GPT-4o），DeepSeek-V3 的使用成本更低，非常适合中小企业和个人开发者开源与本地部署：DeepSeek-V3 不仅开源了模型权重，还支持本地部署，开发者可以自由定制和优化模型" }, { "title": "加密货币系列5:web3是什么", "url": "/posts/btc-5/", "categories": "加密货币系列", "tags": "加密货币系列", "date": "2025-01-23 05:25:00 +0800", "snippet": "Web3，也被称为Web 3.0，是互联网的下一代形态，它是一个基于区块链技术的去中心化网络。Web3的核心概念是： 去中心化： 与传统的Web2.0平台不同，Web3不再依赖于中心化的服务器和机构。数据存储在区块链上，由众多节点共同维护，使得数据更加安全、透明，不易被篡改。 用户主权： 在Web3中，用户拥有对自身数据的完全控制权。你可以决定你的数据如何使用，而不是被平台随意利用。 开放性： Web3是一个开放的网络，任何人都可以参与其中，构建和使用应用，而无需经过中心化的许可。Web3的优势： 安全性： 区块链的分布式账本技术使得数据更加安全，不易被黑客攻击。 透明度： 所有交易记录都记录在区块链上，公开透明，可追溯。 抗审查性： 数据分布在全球各地的节点上，任何人都无法轻易删除或篡改数据。 用户主权： 用户拥有对自身数据的控制权，不再受平台的限制。Web3的应用场景： 去中心化金融（DeFi）： 在Web3上，你可以进行去中心化的借贷、交易、保险等金融活动。 NFT（非同质化代币）： 可以用于代表独特的数字资产，如艺术品、游戏道具等。 元宇宙： Web3为构建元宇宙提供了基础设施，用户可以在虚拟世界中拥有数字资产和身份。 社交媒体： 去中心化的社交媒体平台可以保护用户隐私，防止数据泄露。" }, { "title": "AI系列14:OpenVINO是什么", "url": "/posts/ai-14/", "categories": "AI系列", "tags": "AI系列", "date": "2025-01-23 05:15:00 +0800", "snippet": "OpenVINO（Open Visual Inference and Neural Network Optimization）开放式视觉推理和神经网络优化工具包,是一个开源工具包，由英特尔公司开发，旨在优化和部署深度学习模型,帮助开发者更轻松地将深度学习模型部署到各种应用中，尤其是计算机视觉相关的应用。它支持多种流行的模型框架，如PyTorch、TensorFlow、ONNX等可以在本地、云端或边缘设备上部署模型." }, { "title": "windows软件推荐系列8:有哪些比较私密的浏览器", "url": "/posts/windows-softs-8/", "categories": "windows软件推荐", "tags": "windows软件推荐", "date": "2025-01-23 05:05:00 +0800", "snippet": " Brave 浏览器 特点： 内置广告拦截器和脚本屏蔽功能，有效保护用户隐私，同时提升网页加载速度。 优势： 简单易用，界面友好，同时支持扩展插件。 缺点： 虽然注重隐私，但仍有一些追踪功能。 Tor 浏览器 特点： 通过洋葱路由实现高度匿名，保护用户隐私。 优势： 隐私保护级别最高，适合需要高度匿名性的用户。 缺点： 速度较慢，连接不稳定，使用体验可能不如其他浏览器。 DuckDuckGo 隐私浏览器 特点： 基于Chromium内核，内置广告拦截器和跟踪器保护，同时提供隐私友好的搜索引擎。 优势： 界面简洁，操作直观，注重用户隐私。 缺点： 功能相对较少，扩展插件支持有限。 " }, { "title": "加密货币系列4:Solana是什么", "url": "/posts/btc-4/", "categories": "加密货币系列", "tags": "加密货币系列", "date": "2025-01-23 05:00:00 +0800", "snippet": "Solana 是一个高性能的区块链平台，旨在提供快速、低成本的交易，同时支持智能合约。它被认为是目前区块链领域中最快的网络之一，每秒可以处理数万笔交易。Solana的特点： 速度快： 采用了独特的共识机制，使得交易处理速度非常快。 费用低： 与其他一些区块链相比，Solana上的交易费用相对较低。 可扩展性强： 设计之初就考虑到了可扩展性，可以处理大量的交易。 生态系统丰富： 吸引了众多开发者和项目，生态系统不断壮大。有哪些类似solana的知名平台 以太坊 (Ethereum) 特点： 智能合约的先驱，拥有最广泛的开发者生态系统和DApp。 优势： 历史悠久，社区庞大，生态丰富。 劣势： 交易费用较高，网络拥堵问题突出，扩展性相对较弱。 波卡 (Polkadot) 特点： 多链架构，可实现不同区块链之间的互操作性。 优势： 可扩展性强，安全性高，生态系统不断发展。 劣势： 技术较为复杂，发展时间相对较短。 " }, { "title": "网络系列3:Clash是什么", "url": "/posts/net-3/", "categories": "网络系列", "tags": "网络系列", "date": "2025-01-22 23:05:00 +0800", "snippet": "Clash是一款功能强大的开源代理软件，主要用于绕过网络限制，访问被封锁的网站和服务。它支持多种代理协议，包括Vmess、Shadowsocks、Trojan等，并提供灵活的规则配置，可以满足各种复杂的网络需求。Clash的特点 多协议支持： 支持多种代理协议，可以同时使用多个协议。 规则丰富： 提供灵活的规则配置，可以自定义流量转发规则。 性能优异： 采用Go语言编写，性能高效，稳定性高。 界面友好： 提供Web界面，方便管理和配置。 开源免费： 完全开源，可以自由修改和定制。Clash的工作原理Clash通过分析网络流量，根据预设的规则将流量转发到不同的代理服务器或直接连接。这些规则可以基于域名、IP地址、端口等进行匹配。" }, { "title": "AI系列13:ASI是什么意思", "url": "/posts/ai-13/", "categories": "AI系列", "tags": "AI系列", "date": "2025-01-22 21:00:00 +0800", "snippet": "ASI是Artificial Superintelligence的缩写，即人工超智能。 什么是人工超智能？ 超越人类在几乎所有领域的能力的人工智能。 可以独立思考、学习、创造，甚至超越人类的理解范围。 ASI与AGI的区别： AGI（Artificial General Intelligence）是指具有与人类同等水平的通用智能。 ASI则超越了AGI，具备远超人类的智能。 " }, { "title": "Python系列5:Gradio是什么库", "url": "/posts/python-5/", "categories": "Python", "tags": "Python", "date": "2025-01-22 07:00:00 +0800", "snippet": "Gradio是一个开源Python库，旨在简化机器学习模型的展示和交互。通过Gradio，你可以轻松地为你的模型创建用户友好的Web界面，无需编写复杂的前端代码。它支持多种输入和输出组件，如文本、图像、音频等，使得用户可以通过简单的拖拽操作来与模型进行交互。Gradio的主要特点包括：易于使用：只需几行代码即可创建交互界面。多种输入输出支持：支持文本、图像、音频等多种数据类型。实时更新：可以实时查看模型的输出结果。部署方便：可以将界面部署到本地或云端，方便分享和使用。" }, { "title": "windows软件推荐系列7:没有广告的壁纸软件", "url": "/posts/windows-softs-7/", "categories": "windows软件推荐", "tags": "windows软件推荐", "date": "2025-01-22 06:00:00 +0800", "snippet": "干净且免费的自动更换壁纸软件推荐不喜欢国内一些“XX桌面”“XX壁纸”等乱七八糟的软件把系统搞乱，或者收费，或者暗藏垃圾软件。1.wally免费，壁纸来源于Unsplash免费图库，Unsplash里的图以自然及艺术类图片为主2，Daily Desktop Wallpaper免费，壁纸来源于bing，Bing 每日的图片都非常漂亮且有文化内涵找不到了。bing官方出了一个软件，推荐：https://bingwallpaper.microsoft.com/Windows/bing/bing-wallpaper/历史图片：https://bingwallpaper.anerg.com/3，Lively Wallpaper如果喜欢让桌面壁纸动起来，不妨试试这款动态的桌面壁纸软件，这是一个免费的开源应用程序4.WinDynamicDesktop" }, { "title": "常用工具推荐系列1:有哪些小众的在线笔记服务", "url": "/posts/tools-1/", "categories": "常用工具推荐系列", "tags": "常用工具推荐系列", "date": "2025-01-22 05:22:00 +0800", "snippet": "Biji.ci：https://biji.ci/，不需要登录https://note.ms" }, { "title": "开源软件推荐系列11:老外的这些开源软件养活了很多国产软件", "url": "/posts/opensource-soft-11/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2025-01-22 05:20:00 +0800", "snippet": "现在各种国产软件已经牢牢占据了国内市场，无论是浏览器、下载软件、压缩软件还是视频播放器，都可以看到国产软件活跃的身影。诚然，国产软件在很多方面体验都不错，但它们之所以这么强，很大程度上是因为在核心技术方面，借用了相当多来自开源软件的技术。大家对国产软件都相当了解，但对于国产软件背后的开源软件，又知道多少？今天，就一起来谈谈国产软件背后的开源软件吧。养活了很多国产浏览器：Chromium国内有很多“极速浏览器”，所使用的是 Chrome 同样的引擎，这点大家都相当了解。不过，对于 Chome 背后的开源项目 Chromium，大家了解的细节未必就这么多了。Chromium 是一堆国产极速浏览器赖以生存的基本国产播放器的大奶妈：FFmpeg笔者就是长期从事FFmpeg的开发，小到播放器，大到转码系统，剪辑软件都可以用这个东西做出来。大家都喜欢用国产播放器看小电影，毕竟国产播放器的功能体验用起来真的不错，能够搜字幕，能够云播，最重要的还是支持格式比较全。但是，很多人并不知道，支持格式全这点，其实和国外的开源项目 FFmpeg 是息息相关的。FFmpeg 的解码器造就了无数万能播放器FFmpeg 是一个和视频处理相关的开源项目，包含了丰富的多媒体解码库。国内的播放器之所以如此万能，很大程度上就是因为使用了 FFmpeg 的解码库。但是，FFmpeg 是基于 LGPL/GPL 开源的，这意味着如果某软件使用了 FFmpeg 的代码，那么这个软件涉及这些代码的部分，也必须开源。但是国内的风气嘛，你懂的，白拿了你的东西才不要守规矩。因此，国内的一些“XX 影音”被钉在了 FFmpeg 的耻辱柱上。占了便宜还被踢出门：7-Zip7zip国内有很多免费的压缩软件，这些压缩软件的功能都挺不错，速度也可以，但内核往往也并非来自自己。国内压缩软件往往使用了7-Zip 这款开源软件的内核，来实现众多压缩文件的支持。7-Zip 这款开源软件的影响还是非常大的，首先它的效率很高。使用7-Zip 编码的话，能够比 WinZip 和 WinRAR 提供更高的压缩率。另外它对各种压缩文件支持也非常好，主流的压缩文件基本都给予支持，当然一些商业的压缩格式例如 rar，就只能解压不能压缩。由于7-Zip 是开源的，所以它的内核被很多其他压缩软件所使用，国产压缩软件通常就是7-Zip 的忠实拥簇。7-Zip 在国内不流行的一大原因可能是界面太简陋，然而，7-Zip 也是一款使用了 LGPL 协议的开源软件，使用了7-Zip 的源码，按理来说也必须开源。但国内的“X压”等软件非但没有开源，还在压缩文件的文件头中故意加入无助于压缩的私货，让其他压缩软件无法解压。用了人家的代码还故意制造不兼容，对于这种行为，只想说一句，“我从未见过如此厚颜无耻之人”！为老司机铺开康庄大道：eMule如果你是有些年头的老司机，应该会知道 VeryCD 和电驴。VeryCD 这个站点提供了大量 eD2k 链接，通过旗下的“电驴”软件，就可以下载到各种资源。不过电驴和 eD2k 背后的 eMule“电骡”，大家或许就知之甚少了。其实 eD2k 协议最早起源于商业公司开发的 eDonkey（这才是正牌电驴）分享软件，有个德国人不满这软件，就自己开发了开源的客户端 eMule 电骡，也支持 eD2k 协议。国内的 VeryCD 把 eMule 电骡的开源代码魔改后，制造出了大家熟知的“VeryCD 电驴”。如果你没用过 eMule，你可能不是真正的老司机和 eMule 电骡这个开源软件相比，其实 VeryCD 电驴阉割了相当多的东西。例如，不能直接在 KAD 网络上进行无限制的搜索，这意味着不能无限制地上各种车——现在流行的各种“种子搜索神器”，也只是阉割过的 KAD 搜索器罢了。现在 VeryCD 已经衰败，但 eD2k 仍长存于各大下载软件中，希望大家在开车的同时，也记得背后的 eMule 这位铺路人。智能路由器的力量之源：OpenWRT笔者就刷了小米路由器系统，然后自动挂载vpn。手机连上wifi就能看谷歌，爽得很。现在国内智能路由器可谓是如火如荼，智能路由器对比传统的路由器，功能的确强大很多。例如，可以外接硬盘当 NAS 用，还可以安装很多第三方插件，实现更强劲的功能。但是，智能路由器所依仗的 OpenWRT，却鲜为人知。没有 OpenWRT，就没有一众智能路由器OpenWRT 是一款开源的路由器固件，扩展性强是 OpenWRT 最大的卖点——这也是智能路由器们的最大卖点。OpenWRT 源于 Linux，其强大的拓展性很大程度上也是得益于 Linux。不过和 Linux 一样，OpenWRT 的使用门槛也比较高，原版需要命令行操纵，没有一定的 Linux 和网络知识还真是无法驾驭。国内的路由器厂商把 OpenWRT 改造成界面更友好的固件，可以算是 OpenWRT 的改版。不过，国内的智能路由器固件虽然上手容易，但对比 OpenWRT，还是有一些方面例如性能和可玩性方面，是有所不如的。对比 OpenWRT，智能路由器固件的性能和稳定性都要偏弱。特别是高流量时候的吞吐性能，差距会显得更加明显；而在扩展方面，由于技术和商业上的原因，可玩性也不如 OpenWRT。而且，国内智能路由器厂商使用了 OpenWRT，往往也不根据 GPL 协议继续开源，这些都是很值得批判一番的。总结在这个广告铺天盖地的商业社会，大家很少会听见开源软件的种种消息。闭源的商业软件搭造起了软件世界琳琅满目的繁华，但开源软件也未曾离开过栋梁的位置。诚然，国产软件的很多功能都相当容易上手，但在使用这些商业软件的时候，大家也应该记住背后默默奉献的开源项目，信息时代少了它们，也会失去很多光彩！" }, { "title": "路由器系列3:OpenWrt", "url": "/posts/router-3/", "categories": "路由器系列", "tags": "路由器系列", "date": "2025-01-22 05:10:00 +0800", "snippet": "官网：https://openwrt.org/适用于嵌入式设备的一个Linux发行版，可用来刷路由器。相对原厂固件而言，OpenWrt不是一个单一、静态的固件，而是提供了一个可添加软件包的可写的文件系统。这使用户可以自由的选择应用程序和配置，而不必受设备提供商的限制，并且可以使用一些适合某方面应用的软件包来定制你的设备。对于开发者来说，OpenWrt是一个框架，开发者不必麻烦的构建整个固件就能得到想要的应用程序；对于用户来说，这意味着完全定制的能力，与以往不同的方式使用设备。它是一个嵌入式的 Linux 发行版，（主流路由器固件有 dd-wrt,tomato,openwrt三类），而不是试图建立一个单一的、静态的系统。OpenWrt的包管理提供了一个完全可写的文件系统，从应用程序供应商提供的选择和配置，并允许您自定义的设备，以适应任何应用程序。对于开发人员，OpenWrt 是使用框架来构建应用程序，而无需建立一个完整的固件来支持；对于用户来说，这意味着其拥有完全定制的能力，可以用前所未有的方式使用该设备。而且OpenWRT支持各种处理器架构，无论是对ARM，X86，PowerPC或者MIPS都有很好的支持。 其多达3000多种软件包，囊括从工具链(toolchain)，到内核(linux kernel)，到软件包(packages)，再到根文件系统(rootfs)整个体系，使得用户只需简单的一个make命令即可方便快速地定制一个具有特定功能的嵌入式系统来制作固件。鉴于开源软件在国内的发展态势，目前国内有基于OpenWRT改进而来的OpenWRT-DreamBox。这个版本的OpenWRT集成了很多常用功能（包括脱机下载等），而通过这个版本的OpenWRT便可以把一个路由器的功能发挥到淋漓尽致。哪些路由器对OpenWrt支持较好？https://www.zhihu.com/question/30771491国内的Pandorabox,前身是Dreambox参考http://zh.wikipedia.org/wiki/OpenWrthttp://baike.baidu.com/view/1671581.htmhttps://www.zhihu.com/question/49787104" }, { "title": "网络系列2:Shadowrocket app里面的shadowsocks,shadowsocksR,subscribe区别", "url": "/posts/net-2/", "categories": "网络系列", "tags": "网络系列", "date": "2025-01-22 05:05:00 +0800", "snippet": "Shadowrocket app里面的Type有shadowsocks,shadowsocksR,subscribe他们有什么区别Shadowsocks、ShadowsocksR 和 subscribe 这三种类型，本质上都是用来实现网络代理协议， Shadowsocks（SS）： 基础协议：SS 是最基础的协议之一，具有较高的稳定性和兼容性。 特点：简单易用，配置相对简单。 适用场景：适用于大部分的网络代理需求，包括访问被封锁的网站、绕过网络审查等。 ShadowsocksR（SSR）： 增强版：SSR 是 SS 的增强版本，在 SS 的基础上增加了混淆、协议插件等功能。 特点：安全性更高，更不易被检测。 适用场景：对于安全性要求较高，或者网络环境复杂的用户来说，SSR 是一个不错的选择。 subscribe： 订阅：subscribe 并不是一种协议，而是一种配置管理方式。它允许你通过订阅链接自动更新节点配置，无需手动添加。 特点：方便快捷，省去手动配置的麻烦。 适用场景：适用于经常更换节点或者希望自动更新配置的用户。 subscribe 是一种配置管理方式，可以用于管理多种协议的节点。如果你不想手动配置节点，可以使用 subscribe 功能。一般来说，subscribe 往往包含多种协议的节点，你可以根据自己的需求选择不同的协议。" }, { "title": "艺搜周刊第二期", "url": "/posts/weekly-2/", "categories": "艺搜周刊", "tags": "艺搜周刊", "date": "2025-01-22 05:01:00 +0800", "snippet": "11月8日举行的十四届全国人大常委会第十二次会议的新闻发布会上，财政部部长蓝佛安介绍，批准6万亿元债务限额和4万亿专项债，直接增加地方化债资源10万亿。12.4琼瑶去世12.10谷歌最新量子芯片突破，5分钟完成目前超算需要“10的25次方”年的运算，远超宇宙的年龄2025-01-17特朗普发币2025-1-20特朗普宣誓就职" }, { "title": "AI系列12:Stable Diffusion文生图", "url": "/posts/ai-12/", "categories": "AI系列", "tags": "AI系列", "date": "2025-01-21 05:00:00 +0800", "snippet": "2022年发布的深度学习文本到图像生成模型由初创公司StabilityAI、CompVis与Runway合作开发，源代码和模型权重已公开发布在GitHub上 github.com/Stability-AI/generative-models以前的专有文生图模型（如DALL-E和Midjourney）只能通过云端运算服务访问还可以图生图，Stable Diffusion建议在10GB以上的显存下运行Stable Diffusion 2.0版本引入了以768×768分辨率图像生成的能力https://github.com/AUTOMATIC1111/stable-diffusion-webui" }, { "title": "AI系列11:Grok是什么", "url": "/posts/ai-11/", "categories": "AI系列", "tags": "AI系列", "date": "2025-01-20 05:13:00 +0800", "snippet": "Grok 是由埃隆·马斯克（Elon Musk）创办的 xAI 公司开发的一款先进的人工智能聊天机器人，类似于 ChatGPTGrok 能够实时回答用户的问题，并利用 X（原推特）社交媒体平台的数据进行回应。它不仅在聊天、推理和代码生成等任务中表现出色，还具备生成图像的能力。" }, { "title": "加密货币系列3:以太坊是什么意思", "url": "/posts/btc-3/", "categories": "加密货币系列", "tags": "加密货币系列", "date": "2025-01-20 05:12:00 +0800", "snippet": "以太坊（Ethereum）是一个开源的有智能合约功能的公共区块链平台，以下是关于它的具体介绍：技术层面● 核心是区块链技术：像一个公开的账本，记录着所有交易和操作，使用分布式账本技术，数据存储在多个节点上，保证了数据的安全性和不可篡改性。● 引入智能合约：智能合约是以太坊的一大特色，它是一种自动执行的合约，条款以代码形式写在区块链上。当预设条件满足时，合约自动执行，无需第三方干预，可用于各种应用，如金融交易、供应链管理等。以太币（ETH）● 以太坊有自己的原生加密货币以太币（ETH）。它有多种用途，如作为交易手续费支付给验证交易的节点，激励节点参与网络运行和维护；也是参与以太坊网络上各种应用和智能合约交互的必要媒介，用户使用DApp时可能需支付ETH。智能合约（Smart Contract）是一种自执行的协议，条款和条件直接写入代码中。它们运行在区块链上，确保合同的执行不需要第三方的介入。以下是智能合约的几个关键特点： 自动化：一旦满足预定条件，智能合约会自动执行，不需要人为干预。 透明性：所有参与方都可以查看合约的条款和执行情况，确保透明度。 不可篡改：一旦部署在区块链上，智能合约的代码和条款就无法被修改，确保了合约的安全性和可靠性。 去中心化：智能合约在区块链上运行，不依赖于任何中央机构或服务器。" }, { "title": "加密货币系列2:usdt是什么", "url": "/posts/btc-2/", "categories": "加密货币系列", "tags": "加密货币系列", "date": "2025-01-20 05:11:00 +0800", "snippet": "USDT是“Tether USD”的缩写，中文通常称为泰达币，是一种稳定币，它的价值与美元直接挂钩。简单来说，1 USDT 就相当于 1 美元。USDT和USDC有以下区别：发行主体 USDT：由Tether Limited发行。 USDC：由Centre Consortium（由Circle和Coinbase组成）发行。储备资产 USDT：声称由法定货币、国债和商业票据等多种资产支持，曾因储备资产构成的透明度问题引发争议。 USDC：完全由美国银行持有的现金和短期美国国债支持，储备资产较为透明和稳定。监管与审计 USDT：受到的监管较少，虽表示进行自愿审计，但审计报告有限且质量曾受质疑。 USDC：受纽约金融服务部（NYDFS）监管，定期接受知名会计事务所审计，每月发布储备证明。市场情况 USDT：是目前市值最大的稳定币，在加密货币交易中广泛使用，在新兴市场和监管宽松地区更受欢迎，在多个区块链上可用，流动性更高。 USDC：近年来市场份额不断增长，是USDT的主要竞争对手，在美国本土市场接受度优势明显，主要在以太坊区块链上使用，更多用于DeFi领域。稳定机制 USDT：通过发行或销毁代币来保持与美元的挂钩。 USDC：通过购买或出售美元来维持与美元的挂钩，自推出以来一直保持高度稳定，很少出现脱锚情况。" }, { "title": "加密货币系列1:usdc是什么", "url": "/posts/btc-1/", "categories": "加密货币系列", "tags": "加密货币系列", "date": "2025-01-20 05:10:00 +0800", "snippet": "USDC通常是指美元稳定币（USD Coin），USD 是 United States Dollar 的缩写，也就是 美元。以下是关于它的主要信息：定义与性质• USDC是一种基于区块链技术的稳定币，旨在与美元保持1:1的锚定汇率，即1 USDC始终等价于1美元，通过这种方式来减少加密货币市场常见的价格大幅波动问题，兼具加密货币的交易特性和法定货币的稳定性。发行与运作机制• USDC由Circle等机构发行，发行过程中需要严格的资产储备支持。每发行1个USDC，都会有1美元的资产存放在储备账户中，这些储备资产会定期接受审计，以确保透明度和稳定性。• USDC主要运行在以太坊等区块链网络上，基于智能合约技术实现发行、流通和交易等功能，交易双方可以在区块链上快速、低成本地进行USDC的转账和交易。应用场景• 加密货币交易：在加密货币交易所中，用户常使用USDC作为交易媒介，方便在不同加密货币之间进行兑换，避免频繁地与法币进行兑换操作，降低交易成本和风险。• 跨境支付：由于其基于区块链网络，能快速完成跨境转账，降低了跨境支付的手续费和时间成本，尤其适用于对汇款速度和成本敏感的个人和企业。• 数字资产存储：一些投资者将USDC作为数字资产的一种存储形式，在加密市场行情不稳定时，将其他加密货币转换为USDC，以保值并等待投资机会。市场地位• USDC是目前市场上最主要的稳定币之一，在加密货币生态系统中占据重要地位，拥有较高的市场份额和广泛的用户基础，被众多加密货币项目、金融机构和投资者所接受和使用。" }, { "title": "AI系列10:AI对话工具排行", "url": "/posts/ai-10/", "categories": "AI系列", "tags": "AI系列", "date": "2025-01-20 05:00:00 +0800", "snippet": "国内的有百度文心一言，讯飞星火大模型，阿里通义千问，天工，清华智谱清言，以及Kimi Chat；国外的有ChatGPT，谷歌Gemini，Claude，微软Copilot，以及像字节Coze这种专注于AI Agent智能体创建的AI工具Kimi主持20万文字的上下文微软的提供免费的GPT-4ChatGPT和微软Copilot位列前两位数据来源：AI产品榜 aicpb.com参考https://blog.csdn.net/weixin_40774379/article/details/136550326" }, { "title": "网络系列1:阿里云安全组配置", "url": "/posts/net-1/", "categories": "网络系列", "tags": "网络系列", "date": "2025-01-10 13:15:00 +0800", "snippet": "入方向：外网访问服务器，一般配置这个。出方向：服务器上网测试时，可以先全部放开：即协议类型选择“全部”，授权对象填“0.0.0.0/0”（表示所有IP地址）。参考https://help.aliyun.com/document_detail/25471.html" }, { "title": "艺搜周刊第一期", "url": "/posts/weekly-1/", "categories": "艺搜周刊", "tags": "艺搜周刊", "date": "2024-11-03 19:50:00 +0800", "snippet": "10.28苹果推出iMac M410.29推出mac mini m4和m4 prohttps://www.apple.com/tw/newsroom/11.1日，银行将可以调整贷款重定价日，大部分存量房贷要到重定价日才能享受LPR下调带来的好处，一般是一年，现在可以按季调整当前lpr为3.6字节跳动张一鸣成为中国首富，宗馥莉为中国女首富" }, { "title": "财经系列1:常用术语", "url": "/posts/finance-1/", "categories": "财经系列", "tags": "财经系列", "date": "2024-10-04 05:00:00 +0800", "snippet": "同比增长与环比增长同比去年3月增长8%，意思就是今年3月份比去年三月份增长8%。环比增长，就是指相邻单位内的增长。3月份环比增长3%，就是比2月份增长3%。2016年环比增长2%，就是指比2015年增长2%。融资融资轮次的划分为种子轮、天使轮、A轮、B轮、C轮、D轮、E轮等，但根据实际情况，有些项目也会进行PreA轮、A+轮、C+轮。基金抱团公募基金集体重仓了某些板块和个股，从而推高了股价，进而造成了“赚钱效应”，又吸引资金进一步追捧这些抱团板块和个股的现象。北向资金是什么意思在股市中以香港为界，南就代表香港，北则代表大陆。 北向资金或北上资金就是指从香港往北买入深市跟沪市的资金，反之南向资金就是指从沪深两地买入香港股票的资金。个体工商户，公司，和工作室的区别注册流程为工商登记、办营业执照、公安局备案刻章、质量技术监督局办理组织机构代码证书、银行开户、国地税登记。首先去工商局要表添写，为工作室取名字，如果预先取好了则只需交查名费，执照工本费，无需注册资金。名字需取五个，把你最喜欢的那个放前面以此类推，工商局按顺序核对，如全有重名的还需要重新起。个体工商户和有限公司最大的区别在于税务方面，个体是估税，不用按月申报税务报表，有限公司每月必须到税务局申报。个体的注册费用约几百元。有限公司的注册费用是按照注册资金收取的，比如10万元的公司得1000多元注册费。贷款 年利率与日利率年利率（%）=日利率（%）×360而不是乘以365天或366天（闰年）。腾讯微粒贷日利率万5即日利率0.05%，换算成年利率为0.05%360=18%。假如借款10000，一天的利息是100000.05%=5元，一年的利息是1000018%=1800元。借呗：万3.5为0.035%，年利率为12.6%，一天3.5，一年1260元。余额宝中七日年化收益率是什么意思：七日年化收益率指的是最近七天（从昨天起往前推七天）的平均收益水平，假设七日年化收益率为3.784%，而且一直保持这个水平，那么投资1万，一年有378.4元，当然收益会有波动，只能作为短期参考。储蓄存款产品推荐网商银行随意存，保本，可实时支取。但现在基本上一早上就售罄了。无法购买了此博客从手机上发布" }, { "title": "一天一个Qt类系列6:图片处理类", "url": "/posts/qt-class-6/", "categories": "一天一个Qt类", "tags": "一天一个Qt类", "date": "2024-10-03 05:00:00 +0800", "snippet": "QPixmap pixmap = QPixmap::fromImage(image); 适用于在屏幕上显示图像,label-&amp;gt;setPixmap转QImage： finalPixmap.toImage() 适用于需要直接访问像素数据的场景，如scaledQBitmap 是 QPixmap 的子类,通常用于掩码操作,如窗口的形状和透明区域。QPicture：用于记录和重放绘图命令欢迎评论交流" }, { "title": "windows常见问题系列5:AI PC", "url": "/posts/win-skills-5/", "categories": "windows常见问题", "tags": "windows常见问题", "date": "2024-10-02 05:05:00 +0800", "snippet": "微软的AI PC有surface pro 11，是一个平板Snapdragon 高通骁龙 X Elite 和 Plus 处理器NPU: Qualcomm高通 Hexagon六边形 每秒执行 45 万亿次运算目前暂无相关的台式机PC" }, { "title": "一天一个Qt类系列5:QPointer与QSharedPointer", "url": "/posts/qt-class-5/", "categories": "一天一个Qt类", "tags": "一天一个Qt类", "date": "2024-10-01 05:00:00 +0800", "snippet": "QPointer //T必须是QObject的子类if you have a QPointer, you can pass it to a function that requires a QWidget *,不需要将函数的 参数声明为QPointer类型的QSharedPointer： strong reference to a shared pointer， 可以通过 QWeakPointer创建。多个 QSharedPointer 可以共享同一个对象，当最后一个 QSharedPointer 被销毁时，对象会被自动删除。QWeakPointer 是一个弱引用智能指针，用于解决 QSharedPointer 的循环引用问题。它不能直接访问对象，需要通过 QSharedPointer 转换。QScopedPointer QScopedPointer 是一个独占智能指针，用于在作用域结束时自动删除对象。它不能共享或复制。欢迎评论交流" }, { "title": "路由器系列2:OpenWrt包管理器Opkg", "url": "/posts/router-2/", "categories": "路由器系列", "tags": "路由器系列", "date": "2024-09-16 07:30:00 +0800", "snippet": "https://openwrt.org/docs/guide-user/additional-software/opkgopkg updateopkg install shadowsocks-libev配置:/etc/opkg.conf也可以页面安装 system-&amp;gt;software在filter里面输入“tftpd”，点击“find package”，在下面的框中就显示出当前openwrt支持的软件包，找到需要的，点击install即可。欢迎评论交流此博客从手机上发布" }, { "title": "路由器系列1:小米路由器刷openwrt", "url": "/posts/router-1/", "categories": "路由器系列", "tags": "路由器系列", "date": "2024-09-16 07:00:00 +0800", "snippet": "本文已验证成功。Current Stable Release - OpenWrt 18.06.1，released on August, 18th 2018.there is also a PandoraBox (http://downloads.openwrt.org.cn/PandoraBox/Xiaomi-Mini-R1CM/stable/)firmware for Xiaomi Mini router. 我们暂时不用这个固件。前提步骤：1，保证有外网2，电脑连上lan口The next few steps involve first loading the development version of the firmware, 首先需要加载开发版固件then loading a firmware version which provides SSH access with the last step being loading the OpenWRT firmware onto the router 然后加载提供了ssh的固件，最后要用它去加载openwrt固件。小米路由器MINI(R1CM) can see this in web, MiWiFi 稳定版 2.22.9开启小米路由器的SSH功能之后用户可以获得root权限小结https://openwrt.org/toh/xiaomi/mini 页面打不开了，最新的不知是不是 https://openwrt.org/toh/xiaomi/miwifi_miniu盘先格式成fat32，里面不要放任何文件1，http://www1.miwifi.com/miwifi_download.html下载开发固件miwifi.bin ，因为稳定版不能刷ssh固件断开小米路由器的电源，将U盘插入USB接口；按住reset按钮之后重新接入电源，指示灯变为黄色闪烁状态即可松开reset键；等待3-5秒安装完成之后，小米路由器会自动重启U盘记得及时拔出来！！！2，再格式化下u盘，用手机app连上刷了开发固件的路由器，http://d.miwifi.com/rom/ssh（或者通过http://www1.miwifi.com/miwifi_open.html的开启ssh工具）下载ssh固件miwifi_ssh.bin断开小米路由器的电源，将U盘插入USB接口；按住reset按钮之后重新接入电源，指示灯变为黄色闪烁状态即可松开reset键；等待3-5秒后安装完成之后，小米路由器会自动重启wait a whileroot@192.168.31.1U盘记得及时拔出来！！！BusyBox v1.19.4 (2018-06-21 09:07:05 UTC) built-in shell (ash)Enter &#39;help&#39; for a list of built-in commands. ----------------------------------------------------- Welcome to XiaoQiang! ----------------------------------------------------- $$$$$$\\ $$$$$$$\\ $$$$$$$$\\ $$\\ $$\\ $$$$$$\\ $$\\ $$\\ $$ __$$\\ $$ __$$\\ $$ _____| $$ | $$ | $$ __$$\\ $$ | $$ | $$ / $$ |$$ | $$ |$$ | $$ | $$ | $$ / $$ |$$ |$$ / $$$$$$$$ |$$$$$$$ |$$$$$\\ $$ | $$ | $$ | $$ |$$$$$ / $$ __$$ |$$ __$$&amp;lt; $$ __| $$ | $$ | $$ | $$ |$$ $$&amp;lt; $$ | $$ |$$ | $$ |$$ | $$ | $$ | $$ | $$ |$$ |\\$$\\ $$ | $$ |$$ | $$ |$$$$$$$$\\ $$$$$$$$$ | $$$$$$ |$$ | \\$$\\ \\__| \\__|\\__| \\__|\\________| \\_________/ \\______/ \\__| \\__|are u okuname -aLinux XiaoQiang 2.6.36 #1 MiWiFi-R1CM-2.21.109 Thu Jun 21 09:31:24 UTC 2018 mips GNU/Linux最后刷openwrtGet the latest firmware, eg: # cd /tmp; wget wget http://downloads.openwrt.org/releases/18.06.1/targets/ramips/mt7620/openwrt-18.06.1-ramips-mt7620-miwifi-mini-squashfs-sysupgrade.binCheck the MTD layout: # cat /proc/mtdIf you find a line “OS1” go ahead with flashing:# mtd -r write &amp;lt;firmware-image you downloaded&amp;gt; OS1 mtd -r write /tmp/openwrt-18.06.1-ramips-mt7620-miwifi-mini-squashfs-sysupgrade.bin OS1Unlocking OS1 ...Writing from /tmp/openwrt-18.06.1-ramips-mt7620-miwifi-mini-squashfs-sysupgrade.bin to OS1 ... Rebooting ...After flashing is complete, the router will reboot. When finished you can login using telnet or web-interface on a LAN-connected client（就是pc） to host 192.168.1.1. User: root, no password.SSH will be enabled after you set a password (using passwd or LuCI web interface), telnet will be disabled.Please note that the OpenWrt binary defaults to the red color of the led 默认亮红灯是正常的 instead of the orange/blue during and after finishing the boot.如果ping 不通192.168.1.1 等路由器一直红灯时再重启下即可参考http://en.miui.com/thread-64391-1-1.html 已404了欢迎评论交流此博客从手机上发布" }, { "title": "股票系列3:怎么买港股和美股", "url": "/posts/stock-3/", "categories": "股票系列", "tags": "股票系列", "date": "2024-09-16 06:00:00 +0800", "snippet": "购买港股主要有以下几种方式：1. 通过港股通购买：● 开户条件：● 投资者需要先开通内地券商账户。● 证券账户和资金账户的资产在申请权限开通前20个交易日日均不低于人民币50万元。● 投资者需要有至少24个月的证券交易经验。● 完成风险评估问卷，并且测试结果为积极型或激进型。● 持有可正常交易的深A、沪A股东卡。● 优点：交易便捷，资金安全有保障，无需换汇；是内地投资者购买港股的较为正规的渠道。● 缺点：可投资的股票有限，只能交易纳入港股通标的范围内的港股，不能参与新股申购。2. 通过香港券商直接开户：● 线上开户方式：部分香港券商提供线上开户服务● 优点：可投资的股票范围广，能参与新股申购。● 缺点：资金出入境可能较为复杂，需要换汇；投资者需要自行管理资金。3. 通过互联网券商开户：● 投资者选择一家合适的互联网券商，在其官方网站上完成开户申请。互联网券商通常提供便捷的在线开户服务港股通是指上海证券交易所、深圳证券交易所和香港联合交易所允许两地投资者通过当地证券公司（或经纪商）买卖规定范围内的对方交易所上市的股票。投资者通过当地证券公司买卖港股通股票，采用人民币进行交易和结算。交易指令由投资者所在的本地证券公司传递至香港联合交易所，完成交易后，资金和股票的清算交收则通过中国证券登记结算有限责任公司和香港中央结算有限公司进行。港股通实行“T+0”回转交易在港股中，股票名称后面的“W”和“SW”具有特定含义：一、“W”含义：表示同股不同权架构二、“SW”含义：“S”代表二次上市（Secondary Listing），“W”同样代表同股不同权架构。怎么买美股呢？选择一家可靠的在线美股券商平台，如老虎证券、富途牛牛等。" }, { "title": "股票系列2:开通创业板与科创板", "url": "/posts/stock-2/", "categories": "股票系列", "tags": "股票系列", "date": "2024-09-16 05:00:00 +0800", "snippet": "开通创业板需要满足以下条件： 证券账户状态正常。 有两年以上的证券交易经验。从你首次进行证券交易的时间开始计算，以中登公司的数据为准。 申请开通前 20 个交易日日均资产不低于 10 万元。这里的资产可以包括现金、股票、基金、债券等，但不包括融资融券融入的资金和证券。开通科创板需要具备以下条件：1.资产要求： 在申请开通科创板权限前的20个交易日，投资者的证券账户及资金账户内的日均资产不得低于人民币50万元。这里的资产包括A股账户、B股账户、封闭基金账户、开放式基金账户、OTC理财账户、衍生品合约账户、信用账户等账户内的资产净值，但不包括信用账户融入的资金及证券。 如果资产大于等于50万的天数不足5个交易日且无法通过线上自助方式开户，可通过线下提供资产证明方式开户。2.交易经验：投资者需要具有至少两年的证券交易经验，从投资者第一个股票账户的第一笔交易开始计算。模拟账户的交易经验不被纳入计算。3.风险评估与知识测评： 个人风险评估等级需要为R4（积极型）及以上，风险承受能力为C4（积极型）及以上。 需要对科创板基础知识、业务规则及风险事项有所了解，并完成相应的知识测评，测评分数不低于85分。不过也有部分说法是科创板投资者知识测试问卷成绩需达到80分以上。" }, { "title": "股票系列1:佣金，交易市场与股票名", "url": "/posts/stock-1/", "categories": "股票系列", "tags": "股票系列", "date": "2024-09-15 05:00:00 +0800", "snippet": "股票交易一般哪些地方会收费？股票交易主要有以下几个地方会收费：一、佣金 这是证券公司为投资者提供证券买卖服务收取的费用。佣金收费标准通常不超过成交金额的千分之三，具体比例可以和证券公司协商确定。目前市场上常见的佣金费率在万分之二到万分之三左右。每笔交易佣金不足 5 元的，按 5 元收取。二、印花税 由国家税务部门收取，只在卖出股票时按成交金额的千分之一收取。三、过户费 由中国证券登记结算有限责任公司收取，在买卖上海市场的股票时会产生，按成交金额的十万分之二收取。深圳市场的股票目前不收取过户费。国内有几个股市 上海证券交易所： 成立于1990年11月26日，1990年12月19日正式开业。它是中国大陆最早的证券交易所，主要负责主板市场的运作。 上交所的主板市场主要服务于大型成熟企业，这些企业通常具有稳定的盈利能力和较高的市场知名度。 上交所也有科创板，科创板于2019年开板，主要服务于符合国家战略、突破关键核心技术、市场认可度高的科技创新企业。 深圳证券交易所： 成立于1990年12月1日。它除了运营主板市场外，还设立了中小板和创业板。 中小板专注于中小型企业，这些企业虽然规模较小，但成长潜力巨大；创业板则是为那些具有高成长性和创新能力的企业提供服务，这些企业往往处于发展的初期阶段，需要更多的资金支持来推动其技术和产品的研发。 北京证券交易所： 于2021年11月15日正式开市，以“新三板”精选层为基础。 北交所主要服务于创新型中小企业，是中国多层次资本市场体系的重要组成部分。 香港交易所： 香港交易所成立时间较早（其前身可追溯至1891年），虽然香港是中国的一部分，但由于历史和法律的原因，具有一定的独立性。 香港交易所不仅服务于香港本地企业，也吸引了众多国际企业在此上市，是全球重要的股票市场之一。 A股，即人民币普通股票。是指在中国境内注册、在中国股票市场上市，以人民币标明面值，供境内机构、组织或个人（2013年4月1日起，境内港澳台居民可开立A股账户）以人民币认购和交易的普通股股票。中国供A股交易的交易所主要有上海证券交易所、深圳证券交易所、北京证券交易所哪些股票市场是T+0的交易规则 美国股票市场：作为全球最具影响力的股票市场之一，美国的纽约证券交易所（NYSE）、纳斯达克证券交易所（NASDAQ）等主要证券交易场所均采用 T+0 交易制度。投资者在当天买入的股票可以在当天卖出，且没有特殊限制，这种交易制度有助于提高市场的流动性和交易活跃度。 日本股票市场：日本的证券市场也实行 T+0 交易制度，但日本监管方面采取了一些措施来防止过度投机，例如限制交易次数，单支股票一天只允许回转一次。 香港股票市场：香港交易所的主板市场和 GEM 市场的普通股票交易实行 T+0 规则。投资者在交易日内可以自由地进行股票的买卖操作，但需要遵守一些特定的限制和要求，比如必须在同一交易日内完成买卖操作，不能跨交易日。怎么查具体某只股票在哪个交易所才能交易？● 沪市股票：上海证券交易所的股票代码主要以“60”开头，比如贵州茅台（600519）、中国平安（601318）等；科创板的股票代码以“688”开头，像中芯国际（688981）。● 深市股票：深圳证券交易所的股票代码以“00”开头，例如万科A（000002）、五粮液（000858）；中小板的股票代码以“002”开头，比如海康威视（002415）；创业板的股票代码以“300”开头，比如宁德时代（300750）。欢迎评论交流此博客从手机上发布" }, { "title": "Scrapy爬虫系列4:爬取ai bot新闻", "url": "/posts/scrapy-4/", "categories": "Scrapy爬虫系列", "tags": "Scrapy爬虫系列", "date": "2024-09-04 05:10:00 +0800", "snippet": "$x(‘//div[contains(@class, “news-list”)][1]’) 在控制台输入，外层用单引号让ai先学习我一会要基于scrapy写一个爬虫，请你先学习下要爬取网页的结构，我已经了解了一些：view-source_https___ai-bot.cn_daily-ai-news_.html 文件是要爬取的网页的源码要爬取的内容都在 class=”news-list” 里面。但class=”news-list” 里面又内嵌了 class=”news-list”每个 class=”news-date” 都有一个class=”news-date”表示日期，还有多个class=”news-item”class=”news-item” 里面的class=”news-content” 就是要提取的内容，里面的h2标签里面有要提取的链接和标题，然后p标签里面有具体的内容，最后还有一个span标签保存的是来源，这个span不需要提取。你自己再学习下。看看这个html的详细结构。最后成功爬取了数据" }, { "title": "C++系列22:decay_t", "url": "/posts/cpp-22/", "categories": "C++系列", "tags": "C++系列", "date": "2024-08-28 05:30:00 +0800", "snippet": "每天学点C++类型转换工具，用于移除类型的引用和 cv（const 和 volatile） 限定符，并将数组或函数类型转换为指针类型。得到衰减后的类型#include &amp;lt;iostream&amp;gt;#include &amp;lt;type_traits&amp;gt;template &amp;lt;typename T&amp;gt;void printType() { // 使用 std::decay_t 获取衰减后的类型 using DecayType = std::decay_t&amp;lt;T&amp;gt;; std::cout &amp;lt;&amp;lt; &quot;Original type: &quot; &amp;lt;&amp;lt; typeid(T).name() &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; &quot;Decayed type: &quot; &amp;lt;&amp;lt; typeid(DecayType).name() &amp;lt;&amp;lt; std::endl;}int main() { printType&amp;lt;int&amp;gt;(); // 原始类型是 int，衰减后的类型也是 int printType&amp;lt;int&amp;amp;&amp;gt;(); // 原始类型是 int&amp;amp;，衰减后的类型是 int printType&amp;lt;const int[]&amp;gt;(); // 原始类型是 const int[]，衰减后的类型是 const int* printType&amp;lt;void(int)&amp;gt;(); // 原始类型是 void(int)，衰减后的类型是 void(*)(int) return 0;}数组转指针： 如果输入类型是数组，std::decay_t 会将数组转换为指向数组元素类型的指针。函数转函数指针： 如果输入类型是函数类型，std::decay_t 会将其转换为相应的函数指针类型。#include &amp;lt;iostream&amp;gt;#include &amp;lt;type_traits&amp;gt;using namespace std;typedef decay&amp;lt;int&amp;gt;::type A; // A is inttypedef decay&amp;lt;int &amp;amp;&amp;gt;::type B; // B is inttypedef decay&amp;lt;int &amp;amp;&amp;amp;&amp;gt;::type C; // C is inttypedef decay&amp;lt;const int &amp;amp;&amp;gt;::type D; // D is inttypedef decay&amp;lt;int[2]&amp;gt;::type E; // E is int *typedef decay&amp;lt;int(int)&amp;gt;::type F; // F is int(*)(int)int main(){ cout &amp;lt;&amp;lt; boolalpha; cout &amp;lt;&amp;lt; is_same&amp;lt;int, A&amp;gt;::value &amp;lt;&amp;lt; endl; // true cout &amp;lt;&amp;lt; is_same&amp;lt;int, B&amp;gt;::value &amp;lt;&amp;lt; endl; // true cout &amp;lt;&amp;lt; is_same&amp;lt;int, C&amp;gt;::value &amp;lt;&amp;lt; endl; // true cout &amp;lt;&amp;lt; is_same&amp;lt;int, D&amp;gt;::value &amp;lt;&amp;lt; endl; // true cout &amp;lt;&amp;lt; is_same&amp;lt;int *, E&amp;gt;::value &amp;lt;&amp;lt; endl; // true cout &amp;lt;&amp;lt; is_same&amp;lt;int(int), F&amp;gt;::value &amp;lt;&amp;lt; endl; // false cout &amp;lt;&amp;lt; is_same&amp;lt;int(*)(int), F&amp;gt;::value &amp;lt;&amp;lt; endl; // true return 1;}#include &amp;lt;iostream&amp;gt;#include &amp;lt;type_traits&amp;gt;using namespace std;class MyClass {};typedef decay&amp;lt;MyClass&amp;gt;::type A; // A is MyClasstypedef decay&amp;lt;MyClass &amp;amp;&amp;gt;::type B; // B is MyClasstypedef decay&amp;lt;MyClass &amp;amp;&amp;amp;&amp;gt;::type C; // C is MyClasstypedef decay&amp;lt;const MyClass &amp;amp;&amp;gt;::type D; // D is MyClasstypedef decay&amp;lt;MyClass[2]&amp;gt;::type E; // E is MyClass *typedef decay&amp;lt;MyClass *&amp;gt;::type F; // E is MyClass *typedef decay&amp;lt;MyClass *[2]&amp;gt;::type G; // G is MyClass **typedef decay&amp;lt;MyClass **&amp;gt;::type H; // H is MyClass **int main(){ cout &amp;lt;&amp;lt; boolalpha; cout &amp;lt;&amp;lt; is_same&amp;lt;MyClass, A&amp;gt;::value &amp;lt;&amp;lt; endl; // true cout &amp;lt;&amp;lt; is_same&amp;lt;MyClass, B&amp;gt;::value &amp;lt;&amp;lt; endl; // true cout &amp;lt;&amp;lt; is_same&amp;lt;MyClass, C&amp;gt;::value &amp;lt;&amp;lt; endl; // true cout &amp;lt;&amp;lt; is_same&amp;lt;MyClass, D&amp;gt;::value &amp;lt;&amp;lt; endl; // true cout &amp;lt;&amp;lt; is_same&amp;lt;MyClass *, E&amp;gt;::value &amp;lt;&amp;lt; endl; // true cout &amp;lt;&amp;lt; is_same&amp;lt;MyClass *, F&amp;gt;::value &amp;lt;&amp;lt; endl; // true cout &amp;lt;&amp;lt; is_same&amp;lt;MyClass **, G&amp;gt;::value &amp;lt;&amp;lt; endl; // true cout &amp;lt;&amp;lt; is_same&amp;lt;MyClass **, H&amp;gt;::value &amp;lt;&amp;lt; endl; // true return 1;}参考https://www.cnblogs.com/heartchord/p/5039894.html欢迎评论交流" }, { "title": "Scrapy爬虫系列3:爬取百度热搜榜单", "url": "/posts/scrapy-3/", "categories": "Scrapy爬虫系列", "tags": "Scrapy爬虫系列", "date": "2024-08-28 05:10:00 +0800", "snippet": "起始地址 https://top.baidu.com/board?tab=realtime提取器categories = response.xpath(&#39;//*[contains(@class, &quot;category-wrap_iQLoo horizontal_1eKyQ&quot;)]&#39;)for category in categories: item = DoubanbooksItem() # 在每次循环中创建一个新的 item 对象 item[&#39;url&#39;] = response.url # 提取 `c-single-text-ellipsis` 类中的文本 text = category.xpath(&#39;.//*[contains(@class, &quot;c-single-text-ellipsis&quot;)]/text()&#39;).get() # 提取 `img-wrapper_29V76` 类中的链接 link = category.xpath(&#39;.//*[contains(@class, &quot;img-wrapper_29V76&quot;)]/@href&#39;).get()管道使用 text = item[&#39;text&#39;].strip() link = item[&#39;link&#39;] 接收即可。欢迎评论交流此博客从手机上发布" }, { "title": "Scrapy爬虫系列2:爬取豆瓣书籍排行榜", "url": "/posts/scrapy-2/", "categories": "Scrapy爬虫系列", "tags": "Scrapy爬虫系列", "date": "2024-08-28 05:00:00 +0800", "snippet": "爬取网站 http://book.douban.com/起始地址：https://book.douban.com/subject/25862578/要将代码从使用MySQL数据库改为使用本地的SQLite数据库• MySQL使用%s作为占位符，而SQLite使用?作为占位符。self.dbpool = adbapi.ConnectionPool(‘sqlite3’, database=’doubanbooks.db’, check_same_thread=False)使用选择器sel = Selector(response)# use response.xpathitem[&#39;name&#39;] = sel.xpath(&#39;//*[@id=&quot;wrapper&quot;]/h1/span/text()&#39;).extract()year = sel.xpath(u&#39;//*[@id=&quot;info&quot;]//span[@class=&quot;pl&quot; and contains(./text(), &quot;出版年:&quot;)]/following::text()[1]&#39;).extract()item[&#39;year&#39;] = year[0].strip()item[&#39;score&#39;] = sel.xpath(&#39;//*[@id=&quot;interest_sectl&quot;]/div/div[2]/strong/text()&#39;).extract()item[&#39;vote&#39;] = sel.xpath(&#39;//*[@id=&quot;interest_sectl&quot;]/div/div[2]/div/div[2]/span/a/span/text()&#39;).re(r&#39;\\d+&#39;) rules = [ Rule(LinkExtractor(allow=(r&#39;https://book.douban.com/subject/\\d+&#39;), restrict_xpaths=&#39;//*[@id=&quot;db-rec-section&quot;]/div&#39;), callback=&quot;parse_item&quot;, follow=True), ]欢迎评论交流" }, { "title": "C++系列21:forward", "url": "/posts/cpp-21/", "categories": "C++系列", "tags": "C++系列", "date": "2024-08-27 05:00:00 +0800", "snippet": "每天学点C++用于转发，通常与模板函数和右值引用一起使用完美转发函数参数：在模板函数中，将参数转发给另一个函数，同时保持其值类别（左值或右值）。语法：template &amp;lt;class T&amp;gt;T&amp;amp;&amp;amp; forward(typename std::remove_reference&amp;lt;T&amp;gt;::type&amp;amp; t) noexcept;示例#include &amp;lt;iostream&amp;gt;#include &amp;lt;utility&amp;gt;void process(int&amp;amp; x) {std::cout &amp;lt;&amp;lt; &quot;Lvalue reference: &quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;}void process(int&amp;amp;&amp;amp; x) {std::cout &amp;lt;&amp;lt; &quot;Rvalue reference: &quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;}template &amp;lt;typename T&amp;gt;void forwarder(T&amp;amp;&amp;amp; arg) {process(std::forward&amp;lt;T&amp;gt;(arg));}int main() {int a = 10;forwarder(a); // 调用 process(int&amp;amp;)forwarder(20); // 调用 process(int&amp;amp;&amp;amp;)return 0;}T&amp;amp;&amp;amp; 是一种特殊的类型称为 转发引用（forwarding reference），也称为 万能引用（universal reference）。它允许模板函数能够接受左值和右值，并保持它们的值类别。也就是说即可以接受左值，也可以接受右值。欢迎评论交流" }, { "title": "C++系列20:index_sequence_for与index_sequence和make_index_sequence", "url": "/posts/cpp-20/", "categories": "C++系列", "tags": "C++系列", "date": "2024-08-26 05:50:00 +0800", "snippet": "每天学点C++生成一个包含从 0 到 N-1 的整数序列的 std::index_sequence在处理可变参数模板时，可以使用 std::index_sequence_for 来生成索引序列，从而展开参数包。#include &amp;lt;iostream&amp;gt;#include &amp;lt;tuple&amp;gt;#include &amp;lt;utility&amp;gt;// 打印 tuple 的辅助函数template &amp;lt;typename Tuple, std::size_t... Is&amp;gt;void printTuple(const Tuple&amp;amp; t, std::index_sequence&amp;lt;Is...&amp;gt;) { ((std::cout &amp;lt;&amp;lt; (Is == 0 ? &quot;&quot; : &quot;, &quot;) &amp;lt;&amp;lt; std::get&amp;lt;Is&amp;gt;(t)), ...); std::cout &amp;lt;&amp;lt; std::endl;}// 打印 tuple 的函数template &amp;lt;typename... Args&amp;gt;void printTuple(const std::tuple&amp;lt;Args...&amp;gt;&amp;amp; t) { printTuple(t, std::index_sequence_for&amp;lt;Args...&amp;gt;{});}int main() { auto t = std::make_tuple(1, 2.5, &quot;Hello&quot;); printTuple(t); // 输出: 1, 2.5, Hello return 0;}调用带有多个参数的函数#include &amp;lt;iostream&amp;gt;#include &amp;lt;tuple&amp;gt;#include &amp;lt;utility&amp;gt;// 调用函数的辅助函数template &amp;lt;typename Func, typename Tuple, std::size_t... Is&amp;gt;auto callFunc(Func func, const Tuple&amp;amp; t, std::index_sequence&amp;lt;Is...&amp;gt;) { return func(std::get&amp;lt;Is&amp;gt;(t)...);}// 调用函数的函数template &amp;lt;typename Func, typename... Args&amp;gt;auto callFunc(Func func, const std::tuple&amp;lt;Args...&amp;gt;&amp;amp; t) { return callFunc(func, t, std::index_sequence_for&amp;lt;Args...&amp;gt;{});}// 示例函数int add(int a, int b, int c) { return a + b + c;}int main() { auto t = std::make_tuple(1, 2, 3); int result = callFunc(add, t); // 调用 add(1, 2, 3) std::cout &amp;lt;&amp;lt; &quot;Result: &quot; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; std::endl; // 输出: Result: 6 return 0;}生成索引序列，用于访问数组或其他容器中的元素。#include &amp;lt;iostream&amp;gt;#include &amp;lt;utility&amp;gt;// 打印数组的辅助函数template &amp;lt;typename T, std::size_t... Is&amp;gt;void printArray(const T&amp;amp; arr, std::index_sequence&amp;lt;Is...&amp;gt;) { ((std::cout &amp;lt;&amp;lt; (Is == 0 ? &quot;&quot; : &quot;, &quot;) &amp;lt;&amp;lt; arr[Is]), ...); std::cout &amp;lt;&amp;lt; std::endl;}// 打印数组的函数template &amp;lt;typename T, std::size_t N&amp;gt;void printArray(const T(&amp;amp;arr)[N]) { printArray(arr, std::make_index_sequence&amp;lt;N&amp;gt;{});}int main() { int arr[] = {1, 2, 3, 4, 5}; printArray(arr); // 输出: 1, 2, 3, 4, 5 return 0;}其中：std::cout &amp;lt;&amp;lt; (Is == 0 ? &quot;&quot; : &quot;, &quot;) &amp;lt;&amp;lt; arr[Is] 将元素输出到标准输出流。((std::cout &amp;lt;&amp;lt; (Is == 0 ? &quot;&quot; : &quot;, &quot;) &amp;lt;&amp;lt; arr[Is]), ...) 是一个逗号折叠表达式，它会对参数包 Is... 中的每个元素执行上述操作。欢迎评论交流" }, { "title": "C++系列19:tuple与tie", "url": "/posts/cpp-19/", "categories": "C++系列", "tags": "C++系列", "date": "2024-08-26 05:30:00 +0800", "snippet": "用于存储多个不同类型的值。它常用于需要将多个值组合在一起传递或返回的场景。#include &amp;lt;iostream&amp;gt;#include &amp;lt;tuple&amp;gt;#include &amp;lt;string&amp;gt;// 返回多个值的函数std::tuple&amp;lt;int, double, std::string&amp;gt; getPersonInfo() {return std::make_tuple(25, 180.5, &quot;John Doe&quot;);}int main() {auto personInfo = getPersonInfo();int age;double height;std::string name;// 解构 tuplestd::tie(age, height, name) = personInfo;std::cout &amp;lt;&amp;lt; &quot;Age: &quot; &amp;lt;&amp;lt; age &amp;lt;&amp;lt; &quot;, Height: &quot; &amp;lt;&amp;lt; height &amp;lt;&amp;lt; &quot;, Name: &quot; &amp;lt;&amp;lt; name &amp;lt;&amp;lt; std::endl;return 0;}void printTuple(const std::tuple&amp;lt;int, double, std::string&amp;gt;&amp;amp; t) { std::cout &amp;lt;&amp;lt; &quot;Age: &quot; &amp;lt;&amp;lt; std::get&amp;lt;0&amp;gt;(t) &amp;lt;&amp;lt; &quot;, Height: &quot; &amp;lt;&amp;lt; std::get&amp;lt;1&amp;gt;(t) &amp;lt;&amp;lt; &quot;, Name: &quot; &amp;lt;&amp;lt; std::get&amp;lt;2&amp;gt;(t) &amp;lt;&amp;lt; std::endl;}欢迎评论交流" }, { "title": "vs系列5:如何快速查看某行代码被谁修改了", "url": "/posts/vs-5/", "categories": "vs系列", "tags": "vs系列", "date": "2024-08-26 05:00:00 +0800", "snippet": "工具-外部工具-添加：标题：MyBlame(&amp;amp;B)命令：C:\\Program Files\\TortoiseGit\\bin\\TortoiseGitBlame.exe 工具定位到这个exe参数:$(ItemPath) /Line:$(CurLine)这样会多一个：工具-MyBlame(&amp;amp;B)以后就可以按住Alt,再按T,B就可以打开Blame对话框了。" }, { "title": "Scrapy爬虫系列1:安装", "url": "/posts/scrapy-1/", "categories": "Scrapy爬虫系列", "tags": "Scrapy爬虫系列", "date": "2024-08-19 05:05:00 +0800", "snippet": "需要Python 2.7或3.4及以上需要安装pip依赖lxml, an efficient XML and HTML parserparsel, an HTML/XML data extraction library written on top of lxml,w3lib, a multi-purpose helper for dealing with URLs and web page encodingstwisted, an asynchronous networking frameworkcryptography and pyOpenSSL, to deal with various network-level security needs安装依赖lxml requires libxml2 and libxslt，不然可能会报 AttributeError: ‘module’ object has no attribute ‘HTTPSConnection’ 错误yum install -y libxml2 libxml2-devel libxslt libxslt-devel libffi-devel python-devel openssl-develpip install lxmlpip install parsel #如果报 Couldn&#39;t find index page for &#39;pytest-runner&#39;，需要更新下pip setuptoolspip install twistedpip install cryptographypip install pyopenssl安装Scrapypip install Scrapyscrapy安装ipythonhttp://ipython.org/install.htmlpip install ipython问题报错：Traceback (most recent call last): File &quot;/usr/local/bin/scrapy&quot;, line 5, in &amp;lt;module&amp;gt; from pkg_resources import load_entry_point File &quot;/usr/local/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg/pkg_resources.py&quot;, line 2607, in &amp;lt;module&amp;gt; File &quot;/usr/local/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg/pkg_resources.py&quot;, line 565, in resolvepkg_resources.DistributionNotFound: setuptools&amp;gt;=1.0解决pip install --upgrade scrapy参考http://doc.scrapy.org/en/latest/intro/install.html" }, { "title": "AI系列9:科大讯飞发布星火大模型4.0：整体超越GPT-4 Turbo", "url": "/posts/ai-9/", "categories": "AI系列", "tags": "AI系列", "date": "2024-06-27 05:00:00 +0800", "snippet": "在文本生成、语音理解、知识问答、逻辑推理和数学能力这五大日常体验较深的领域，星火大模型V4.0全面超越了GPT-4 Turbo科大讯飞CEO刘庆峰还宣布，讯飞星火App在安卓端的下载量已超过1.31亿次。" }, { "title": "vs系列4:clang与LLVM", "url": "/posts/vs-4/", "categories": "vs系列", "tags": "vs系列", "date": "2024-06-26 05:20:00 +0800", "snippet": "传统的编译器通常分为三个部分，前端(frontEnd)，优化器(Optimizer)和后端(backEnd)。在编译过程中，前端主要负责词法和语法分析，将源代码转化为抽象语法树；优化器则是在前端的基础上，对得到的中间代码进行优化，使代码更加高效；后端则是将已经优化的中间代码转化为针对各自平台的机器代码。cl.exe是msvc里面的clang-cl.exe是LLVM项目的一部分，是Clang编译器的一个特殊版本，设计用来兼容cl.exe的命令行参数。这使得它可以作为cl.exe的替代品，在Visual Studio等环境中使用。它能够接受cl.exe的大多数命令行参数。Clang在LLVM架构中是作为C家族语言（C、C++、Objective-C） 的默认前端。它采用了LLVM作为其后端，是gcc替代器LLVM：Low Level Virtual Machine，a collection of modular and reusable compiler and toolchain technologiescmake中设置 cmake -T “ClangCl”To enable clang-cl to find system headers, libraries, and the linker when run from the command-line, it should be executed inside a Visual Studio Native Tools Command PromptWoA64 是windows on arm64平台mingw是为了使用gcc" }, { "title": "vs系列3:win11安装msvc环境", "url": "/posts/vs-3/", "categories": "vs系列", "tags": "vs系列", "date": "2024-06-26 05:10:00 +0800", "snippet": "不需要下载完整的vs，下载Visual Studio 2022生成工具vs_buildTool.exe，https://learn.microsoft.com/zh-cn/cpp/build/building-on-the-command-line?view=msvc-170参考https://blog.csdn.net/b1049112625/article/details/134524652" }, { "title": "三方库编译系列7:quazip", "url": "/posts/3rd-7/", "categories": "三方库编译系列", "tags": "三方库编译系列", "date": "2024-06-26 05:05:00 +0800", "snippet": "下载 https://github.com/stachenov/quazipquazip可以使用QIODevice读压缩包里面的内容依赖zlib,Qt5使用cmake-gui，可以Add Entry下面的key-valDCMAKE_PREFIX_PATH=”/usr/local/Qt-6.6.2”;zlib_path默认会安装到C:/Program Files (x86)/QuaZip，要修改下，因为一般没权限还有设置QT_DIR 这个Key可以取消掉QUAZIP_BZIP2选项arm64的版本需要在arm机上编译" }, { "title": "三方库编译系列6:Qt5.15.2", "url": "/posts/3rd-6/", "categories": "三方库编译系列", "tags": "三方库编译系列", "date": "2024-06-26 05:00:00 +0800", "snippet": "下载压缩包https://mirrors.ustc.edu.cn/qtproject/archive/qt/依赖项1，openssl:-openssl-runtime OPENSSL_PREFIX=”openssl_path”2，ICU(可选)支持unicode和国际化，它的头文件和库文件需要设置到 INCLUDE and LIB环境变量里面。需要传递 -icu 选项3，ANGLE (libEGL.dll and libGLESv2.dll) ,会将openGL ES的api转成DX,就不需要安装驱动了,需要安装DX SDK(一般Windows SDK已经包含了）,需要定义 ANGLE_DIR 环境变量。也可以不用ANGLE,而是OpenGL: -opengl dynamic(openGL找不到才会用angle)需要安装perl,python(应用商店安装)，如果使用ANGLE ，还需要安装GPerf和Bison,Flex,这些可以在 GnuWin32 and Win flex-bison 里面下载到。然后加到PATH变量里面，还需要重命名下win_bison and win_flex 成bison and flex，放在gnuwin32\\bin目录另外QDoc还需要安装Clangvs 专业版本在arm64机器上安装不上，可以安装社区版本（家庭版安装不了vs）vcvarsall.bat amd64 //设置环境变量mkdir qt-armcd qt-armSET _ROOT=C:\\Qt\\Qt-5SET PATH=%_ROOT%\\qtbase\\bin;%_ROOT%\\gnuwin32\\bin;%PATH%nmake distclean //如果重新configure需要执行这个../qt-everywhere-src-5.15.2/configure -openssl-runtime OPENSSL_PREFIX=&quot;C:/devel/compile/build/openssl&quot;-opengl dynamic-platform win32-msvc //最好不要传这个，在arm64机器上让它自己检测-xplatform win32-arm64-msvc2017 //交叉编译才用-release -force-debug-info -separate-debug-info -skip qtdoc -skip qt3d -skip qtquick3d -no-feature-assistant-nomake examples -nomake tests -skip qtwebengine -opensource -skip qtxmlpatterns-prefix &quot;C:/devel/compile/build/qt&quot;注意如果是在vcvarsall.bat amd64环境下，可以-platform win32-msvc -xplatform win32-arm64-msvc2017如果在vcvarsamd64_arm64下应该就不需要xplatform 跨平台编译选项了。Checking for target architecture... arm64Checking for host architecture... x86_64Mode ................................... release (with debug info)如果要调试版本：-debug 编译jom或nmakenmake install 或jom install //nmake是vs开发环境里面的，类似make其它编译选项用-skip排除模块，如-skip qtconnectivity会禁用Qt NFC和Bluetooth 用-feature-&amp;lt;feature&amp;gt; and -no-feature-&amp;lt;feature&amp;gt; 打开或关闭特性 -list-features3方库：可以使用qt源码包里面的或者是系统的，比如-qt-zlib或-system-zlib，也可以直接禁用，使用-no前缀，如-no-zlib跨平台选项：-xplatform 目标平台。更多可以查看 qtbase/mkspecs链接tracegen.exe时报错LNK1112: module machine type &#39;x64&#39; conflicts with target machine type &#39;ARM64&#39;这个是生成 Qt 追踪文件的工具，用于性能分析 其它：-extprefix，-hostprefix，-external-hosstbindir 交叉编译相关-make-tool &amp;lt;tool&amp;gt; 使用指定tool编译qmake，默认是nmake ， Windows Onlyvcvarsamd64_arm64.bat与vcvarsarm64_amd64.bat2个好像是反过来的，啥区别源架构 → 目标架构:amd64_arm64：从AMD64（x64）架构编译到ARM64架构的交叉编译。arm64_amd64 从ARM64架构编译到AMD64（x64）架构的交叉编译。应该使用vcvarsarm64.bat增量编译network模块进入compile临时编译目录cd 到network目录确保存在Makefile文件nmake 即可参考https://doc.qt.io/qt-5/windows-building.htmlhttps://doc.qt.io/qt-5/configure-options.html" }, { "title": "三方库编译系列5:aliyun oss", "url": "/posts/3rd-5/", "categories": "三方库编译系列", "tags": "三方库编译系列", "date": "2024-06-20 05:55:00 +0800", "snippet": "用到libcurl、opensslmaccd &amp;lt;path/to/aliyun-oss-cpp-sdk&amp;gt;mkdir buildcd buildexport MACOSX_DEPLOYMENT_TARGET=10.13 &amp;amp;&amp;amp; cmake -DBUILD_SHARED_LIBS=ON -DOPENSSL_ROOT_DIR=/Users/xxx/OpenSSL/mac \\-DOPENSSL_LIBRARIES=/Users/xxx/OpenSSL/mac/lib \\-DOPENSSL_INCLUDE_DIRS=/Users/xxx/OpenSSL/mac/include/ ..make -j8 //上一个命令里面有cmakeWin 修改了里面的CmakeLists.txt，（写死OpenSSL和curl的路径）如下修改CmakeLists.txt:BUILD_SHARED_LIBS =onBUILD_TESTS=on。。。用cmake-gui选64位（等同于cmake -A x64）然后打开slnhttps://github.com/aliyun/aliyun-oss-cpp-sdk" }, { "title": "三方库编译系列4:libzip", "url": "/posts/3rd-4/", "categories": "三方库编译系列", "tags": "三方库编译系列", "date": "2024-06-20 05:45:00 +0800", "snippet": "win是一个zip.dll，mac是libzip.5.1.dyliblibzip 依赖libz(zlib)mac编译CMakeLists.txt将下面的全部关掉OPTION(ENABLE_COMMONCRYPTO &quot;Enable use of CommonCrypto&quot; ON)OPTION(ENABLE_GNUTLS &quot;Enable use of GnuTLS&quot; ON)OPTION(ENABLE_MBEDTLS &quot;Enable use of mbed TLS&quot; ON)OPTION(ENABLE_OPENSSL &quot;Enable use of OpenSSL&quot; ON)OPTION(ENABLE_WINDOWS_CRYPTO &quot;Enable use of Windows cryptography libraries&quot; ON)OPTION(ENABLE_BZIP2 &quot;Enable use of BZip2&quot; ON)OPTION(ENABLE_LZMA &quot;Enable use of LZMA&quot; ON)OPTION(BUILD_TOOLS &quot;Build tools in the src directory (zipcmp, zipmerge, ziptool)&quot; ON)OPTION(BUILD_REGRESS &quot;Build regression tests&quot; ON)OPTION(BUILD_EXAMPLES &quot;Build examples&quot; ON)OPTION(BUILD_DOC &quot;Build documentation&quot; ON)export MACOSX_DEPLOYMENT_TARGET=10.13 &amp;amp;&amp;amp; cmake .. -DCMAKE_PREFIX_PATH=&quot;/Users/xxx/libz/mac&quot; -DCMAKE_MODULE_PATH=&quot;/Users/xxx/libz/mac&quot; -DCMAKE_INSTALL_PREFIX=&quot;/Users/xxx/libzip/install&quot;目前找不到自己的zlibmakemake installArm64cmake .. -DCMAKE_PREFIX_PATH=&quot;/Users/xxx/libz/arm64&quot; -DCMAKE_MODULE_PATH=&quot;/Users/xxx/libz/arm64&quot; -DCMAKE_INSTALL_PREFIX=&quot;/Users/xxx/libzip/install&quot;makemake installwin需要zlib install里面的头文件，不能与mac共用头文件。cmake .. -G &quot;Visual Studio 15 2017 Win64&quot; -DCMAKE_PREFIX_PATH=&quot;D:\\xxx\\libz\\win&quot;然后用vs编译" }, { "title": "商品选购系列12:多抓鱼与孔夫子旧书网", "url": "/posts/shopping-12/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2024-06-20 05:35:00 +0800", "snippet": "发现孔网的图书价格普遍比多抓鱼低一些，多抓鱼的价格并不具备什么竞争力多抓鱼2017 年 成立于北京,获得了经纬中国、腾讯等投资人的青睐孔夫子旧书网成立于2002年，主打各类型的旧书交易。在孔夫子旧书网里面能找到一些年代很久远的已经停止出版很多年的旧书。七八十年代的书都能找到,孔夫子是二手书电商市场无法忽视的存在。这家比淘宝还早一年成立的C2C平台，将全国各地数万家旧书店、书摊搬到了网上多抓鱼更类似自营。" }, { "title": "三方库编译系列3:libcurl", "url": "/posts/3rd-3/", "categories": "三方库编译系列", "tags": "三方库编译系列", "date": "2024-06-20 05:25:00 +0800", "snippet": "libz要用zlib压缩包编译依赖libz，opensslintel编译选项./configure –prefix=/Users/xx/build/curl –with-ssl=/Users/xx/OpenSSL/mac –with-zlib=/Users/xx/libz/mac –disable-static有可能需要修改openssl的pc文件中路径ca cert bundle: /etc/ssl/cert.pemSSL: enabled (OpenSSL)zlib: enabledIPv6: enabledProtocols: DICT FILE FTP FTPS GOPHER HTTP HTTPS IMAP IMAPS LDAP LDAPS POP3 POP3S RTSP SMB SMBS SMTP SMTPS TELNET TFTParm64 for mac./configure –prefix=/Users/xx/build –with-ssl=/Users/xx/OpenSSL/arm64 –with-zlib=/Users/xx/libz/arm64 –disable-staticwin 上编译 winbuild目录下nmake /f Makefile.vc mode=dll ZLIB_PATH=D:\\libz\\win SSL_PATH=D:\\OpenSSL\\win ENABLE_WINSSL=no WITH_SSL=dll WITH_ZLIB=dll MACHINE=x64重命名libcurl.lib为curl.libwin curl https如果请求失败：在https://curl.se/docs/caextract.html 下载cacert.pemSome programs will expect this file to be named ca-bundle.crt (in the correct path). curl on windows has a system to find it if named curl-ca-bundle.crt. Rename the cacert.pem file into curl-ca-bundle.crtnmake /f Makefile.vc mode=dll ZLIB_PATH=D:\\libz\\win SSL_PATH=D:\\OpenSSL\\win ENABLE_WINSSL=no WITH_SSL=dll WITH_ZLIB=dll MACHINE=x64 ENABLE_UNICODE=yes GEN_PDB=yes ENABLE_IDN=nodebug版本nmake /f Makefile.vc mode=dll ZLIB_PATH=D:\\libz\\win SSL_PATH=D:\\OpenSSL\\win ENABLE_WINSSL=no WITH_SSL=dll WITH_ZLIB=dll MACHINE=x64 ENABLE_UNICODE=yes GEN_PDB=yes DEBUG=yes//#define USE_SOCKETPAIR 1arm windows版本cmake -G”Visual Studio 17 2022” -A ARM64 -DCURL_ZLIB=ON -DCMAKE_USE_OPENSSL=ON -DCMAKE_INSTALL_PREFIX=”C:\\devel\\compile\\build\\curl” -DBUILD_SHARED_LIBS=ON -DCMAKE_PREFIX_PATH=”C:\\devel\\compile\\build\\openssl;C:\\devel\\compile\\build\\libz”有输出：Enabled SSL backends: OpenSSL Enabled protocols:里面有 HTTPS打开CURL.sln后对左侧的Install执行all rebuild" }, { "title": "三方库编译系列2:zlib", "url": "/posts/3rd-2/", "categories": "三方库编译系列", "tags": "三方库编译系列", "date": "2024-06-20 05:15:00 +0800", "snippet": "libz要用zlib压缩包编译win上有zlib.dll,mac上是libz.dylibwin用cmake生成vs然后编译Release静态库（如果需要静态库的话）arm widows版本也一样，平台选ARM64mac编译export MACOSX_DEPLOYMENT_TARGET=10.13 &amp;amp;&amp;amp; ./configure --prefix=/Users/xx/zlib/build" }, { "title": "三方库编译系列1:openssl", "url": "/posts/3rd-1/", "categories": "三方库编译系列", "tags": "三方库编译系列", "date": "2024-06-20 05:05:00 +0800", "snippet": "libcurl依赖opensslthe second generation abandons the monolithic庞大的 Configureand places individual单个 configurations in the Configurations directory.you should always perform a make test to ensure the library performs as expectedunder its self tests.If you are building OpenSSL 1.1.0 and above, then you will also need PERL 5.10 or higher (see README.PERL for details).using Configure and config. 最好用ConfigureYou can run Configure LIST to see a list of available platforms.You can also configure on Darwin by exporting KERNEL_BITS: $ export KERNEL_BITS=64./config shared no-ssl2 no-ssl3 enable-ec_nistp_64_gcc_128 --openssldir=/usr/local/ssl/macosx-x64/you should perform a make clean to ensure the list of objects files is accurate after a reconfiguration.when building a shared object, both the static archive and shared objects are built. You do not need to do anything special to build both when shared is specified.当编译动态库时，会同时编译出静态库。--prefix=XXX --openssldir shared no-ssl2 Using RPATHs./config -Wl,-rpath=/usr/local/ssl/lib -Wl,--enable-new-dtagsverify the settings stuck:$ readelf -d ./libssl.so | grep -i -E &#39;rpath|runpath&#39;$ ldd /usr/local/ssl/lib/libssl.so linux-vdso.so.1 =&amp;gt; (0x00007ffceff6c000)ibcrypto.so.1.0.0 =&amp;gt; /usr/local/ssl/lib/libcrypto.so.1.0.0 (0x00007ff5eff96000)makemake testsudo make installOS X./Configure darwin64-x86_64-cc shared enable-ec_nistp_64_gcc_128 no-ssl2 no-ssl3 no-comp –openssldir=/usr/local/ssl/macos-x86_64 make depend sudo make install./Configure darwin64-x86_64-cc shared no-ssl2 --prefix=/Users/ws/Downloads/openssl_build --openssldir=/Users/ws/Downloads/openssl_build -Wl,-rpath=/usr/local/myssl/lib -Wl,--enable-new-dtags./config shared no-ssl2 --prefix=/Users/ws/Downloads/openssl_build --openssldir=/Users/ws/Downloads/openssl_build -Wl,-rpath=/usr/local/myssl/lib -Wl,--enable-new-dtags &#39;-Wl,--enable-new-dtags,-rpath,$(LIBRPATH)&#39;如果不识别 RPATHunknown option: -rpath=hard coding the RPATH into a configure line. For example, on Debian x86_64 open the file Configure in an editor, copy linux-x86_64, name it linux-x86_64-rpath, and make the following change to add the -rpath option. Notice the addition of -Wl,-rpath=… in two places.&quot;linux-x86_64-rpath&quot;, &quot;gcc:-m64 -DL_ENDIAN -O3 -Wall -Wl,-rpath=/usr/local/ssl/lib:: -D_REENTRANT::-Wl,-rpath=/usr/local/ssl/lib -ldl:SIXTY_FOUR_BIT_LONG RC4_CHUNK DES_INT DES_UNROLL: ${x86_64_asm}:elf:dlfcn:linux-shared:-fPIC:-m64:.so.\\$(SHLIB_MAJOR).\\$(SHLIB_MINOR):::64&quot;,Above, fields 2 and 6 were changed. They correspond to $cflag and $ldflag in OpenSSL’s builds system. Then, Configure with the new configuration:$ ./Configure linux-x86_64-rpath小结：export MACOSX_DEPLOYMENT_TARGET=10.13 &amp;amp;&amp;amp; ./Configure darwin64-x86_64-cc shared --prefix=xxx --openssldir=xxx 2个目录一般设置一样make -j8make install查看版本/usr/include/openssl/opensslv.hopenssl version -awindows下编译需要安装perl编译出来的库有2个libcrypto和libssl（依赖crypto）perl ./Configure查一下cpu平台，看见有个VC-WIN64-ARM进入openssl根目录，配置一下arm64的vs环境变量vcvarsamd64_arm64.bat，在C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\VC\\Auxiliary\\Build目录下Environment initialized for: &#39;x64_arm64&#39;perl ./Configure VC-WIN64-ARM no-asm shared --prefix=C:\\devel\\compile\\build\\openssl --openssldir=C:\\devel\\compile\\build\\openssl 路径要用/反斜杆编译nmakenmake install参考https://wiki.openssl.org/index.php/Compilation_and_Installationhttps://github.com/openssl/openssl/blob/master/INSTALL.mdhttps://www.openssl.org/docs/faq.html" }, { "title": "商品选购系列11:高性价比扫地机器人选购攻略", "url": "/posts/shopping-11/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2024-06-19 05:30:00 +0800", "snippet": "**科沃斯T30 Pro，到手价3799****石头P10S Pro，到手价3999****追觅S30 Pro Ultra，到手价4299**扫地机器人的高度越低越好，高度仅有48cm的科沃斯T30 Pro显然优势明显，最为关键的是它的水箱采用了模块化设计，几乎不用抬升高度就可以取出清水箱补水或者倒污水石头纯胶滚刷对于地板缝隙中的粉尘清洁效果不如胶毛一体滚刷T30 Pro在应对顽固污渍的清洁效果肯定最强，因为在清洁时托盘的下压力越强拖布摩擦力才会越强，摩擦污渍效果更好，这个时候科沃斯T30 Pro 6N的下压力就是一个优势。而且为了提高拖布与地面的摩擦力科沃斯和石头都采用了大颗粒凸起毛圈拖布，在这一点上追觅的拖布过于光滑。边角拖地效果：科沃斯T30 Pro的下压力电机在外扩的时候是会跟着托盘一起带出去的，所以6N的下压力不变，拖地效果很好很少有人关注扫地机器人的集尘吸力，但是这个数据却很重要，因为集尘吸力不足，尘盒内的垃圾就有可能排空不彻底，从而产生异味、滋生细菌。追觅S30 Pro Ultra的集尘吸力为18000Pa，科沃斯T30 Pro的集尘吸力高达28000Pa，石头P10S Pro没有公开立集尘数据。基站整洁度三款扫地机器人都采用了可拆卸清洁盘/刮洗臂设计。把追觅S30 Pro Ultra的清水箱装满水（标称4.5L），然后倒入科沃斯T30 Pro的清水箱，甚至还没有到科沃斯T30 Pro的清水MAX线（标称是4L）。科沃斯的“YIKO”语音控制系统开创了扫地机器人声控的先河，目前仍旧是最好用的语音交互系统没有之一。科沃斯T30 Pro新增了三个非常有趣且实用性极高的操控方式，当扫地机器人在基站里待机的时候，我们只需要用脚轻轻踢一下机器人的缓冲防撞板就可以开启全屋清洁。综上选科沃斯" }, { "title": "商品选购系列10:2024年科沃斯、石头、追觅高端旗舰扫地机器人选购攻略", "url": "/posts/shopping-10/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2024-06-19 05:20:00 +0800", "snippet": "基站尺寸科沃斯X5 Pro为52.72x39.4x44.3（高宽深），石头G20S为47x40.9x41.9（高宽深），追觅X40 Pro Ultra为59.05x34x45.67（高宽深）科沃斯X5 Pro采用的是全嵌入前置式dToF雷达，机身高度9.5cm；石头G20S采用的是顶部LDS激光雷达，机身高度为10.3cm；追觅X40 Pro Ultra采用的是可升降式LDS激光雷达，雷达沉入状态时机身高度为8.8cm。科沃斯X5 Pro采用的是固定边刷，但是“D”型机身可以完美贴合室内的各种死角，可以说既没有故障率又能完美破解死角拢扫难题。目前的扫地机器人拖布类型有两种：平板震动拖布和旋转拖布，在真实使用体验上旋转拖布处理顽固污渍效果更好一些。科沃斯X5 Pro的下压力电机在外扩的时候是会跟着托盘一起带出去的，6N的下压力不变，所以贴边拖地效果很好目前扫地机器人的导航方式主要有3种，dToF激光雷达导航&amp;gt;LDS激光导航＞视觉导航，其中科沃斯X5 Pro采用的是成本更高的全嵌入式dToF激光雷达导航，石头G20S采用的是LDS激光导航，追觅X40 Pro Ultra则采用的是可升降LDS激光导航。尘袋的大小决定了我们更换尘袋的频率，当然这里还牵扯到耗材成本。科沃斯X5 Pro科沃斯T30 Pro采用的是抑菌尘袋，尘袋容量3L，可以分段式压缩灰尘（标称90天免倒垃圾）；追觅X40 Pro Ultra的除臭尘袋容量为3.2L（标称100天免倒垃圾）；综上，我选x5pro" }, { "title": "windows常见问题系列4:安装Perl", "url": "/posts/win-skills-4/", "categories": "windows常见问题", "tags": "windows常见问题", "date": "2024-06-19 05:15:00 +0800", "snippet": "https://www.perl.org/get.htmlPerl 在 Window 平台上有 ActiveStatePerl 和 Strawberry Perl 编译器。Strawberry Perl 里面有多包含一些 CPAN 里的模块， 所以Strawberry Perl 下载的安装文件有 80多M, 而ActiveState Perl 只有20M 左右。下载Strawberry Perl后双击安装perl -v" }, { "title": "商品选购系列9:智能音箱", "url": "/posts/shopping-9/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2024-06-19 05:10:00 +0800", "snippet": "智能音箱跟蓝牙音箱有什么区别智能音箱内置了语音助手，可以进行语音交互，而蓝牙音箱仅能作为播放设备使用。此外，由于智能音箱支持多种连接方式，在使用WiFi连接时能获得更高的传输速率，相比蓝牙能够输出更高码率，音质相对好一些。各主流智能音箱品牌有什么特点？市面上常见的智能音箱品牌主要有小度、天猫精灵、小爱音箱等，功能都能满足大部分消费者的需求。其中，小度的智能音箱在语音交互上体验更好，语音识别准确；天猫精灵依托阿里旗下的产品，可以完成网上购物、收取蚂蚁森林能量等特色功能；小爱音箱则依托米家庞大的iot生态，在智能设备控制上更有优势。小爱同学可控制的设备近2000款，智能设备连接数超1.96亿台，可以控制小米生态链下大量智能家居产品，包括智能插座、小米电视、扫地机器人等，主要控制小米以及小米生态链的产品，对于其他品牌的家电，需要万能遥控器搭配使用，或购买带有红外遥控功能的版本。天猫精灵连接的家电设备数量非常庞大，超过2.35亿台，可控设备型号超过3600种，可连接品类超过60种。品牌包括美的、海尔、格力、科沃斯、格兰仕、飞利浦、博世、九阳等，许多种类的家电都能囊括其中。但对于这些品牌，连接的只是部分产品，在选购智能家居电器前，最好查询是否支持与天猫精灵连接。百度智能音箱接入了200多个品牌，7000万台可控设备，支持百度智能、涂鸦智能、海尔优家、创维智能、大鱼管家等25家品牌，品类有空调、插座、灯、冰箱、电视等；总的来说还有可以进步的空间。1，百度2018年才推出国内第一款带屏幕的智能音箱，但凭着AI智能交互挤进了趋近饱和的市场，2022年第一季度全球范围内智能音箱市场份额的六强中中国品牌占据三席，分别是阿里巴巴（12.3%）、百度（11.4%）和小米（6.2%）。现阶段的智能音箱“智能”之处就在于语音识别+搜索引擎，百度在这方面的优势明显，依托自家在搜索技术上的积淀，共享百度搜索结果，小度助手有着比小米小爱更丰富的知识量，在“极客模式”下甚至可以实现多轮对话免唤醒体验，用户能够真正体验与人工智能对话的未来感。除此之外，智能音箱核心功能还有控制家电和播放内容节目，小度智能音箱在这方面表现不赖。首先背靠百度自家的“百度知道”、网盘这些比较优质的内容源，影视资源上还整合了爱腾芒三大视频平台，音频上有QQ音乐、喜马拉雅FM、蜻蜓FM等，内容相当够看。智能家居方面，百度智能音箱接入了300多个品牌、电视空调灯具窗帘等近40个品类，大多是一线电器品牌，基本上追平米家生态链，而且因为是开放平台，对第三方开发者扶持力度也比较高，支持的设备数量稳步增长，因此在智能家居这块也无需担心。当前百度的智能音箱产品可以分为基础款的小度智能音箱系列和外观质感升级版的小度智能音箱大金刚，还有主打小巧便携的小度智能音箱随身版。在其他的一些细分领域，百度推出了小度Sound音箱标准版和小度Sound音箱灵动版，是智能音箱产品中主打音质的系列。此外百度还是目前比较坚持推出智能屏新品的品牌之一，有小度智能屏X8 X9 X10、小度智能屏T10、小度智能屏1S等。如只想要一款能识别语音命令、简单播放歌曲、电台或听书的智能音箱，则可以选择小度智能音箱2或小度智能音箱旗舰版，两款都带家电红外遥控功能，小度Sound音箱音质会更好一些，Sound灵动版的前面罩加入了可以发光的LED点阵，点阵灯光可以组合出数字用作时间显示，放在床头、电视柜上可以当闹钟使用。如果想追求更好的音质和外观质感，可以考虑小度智能音箱的大金刚版本。它和普通版相比主要增加了炫彩灯带、冷轧金属外壳，喇叭也升级了。智能屏1S不支持网关、家居控制功能，X8的屏幕更大功能众多，有人声克隆，X9在X8的基础上带有可用于视频通话的独立前置摄像头，X10的屏幕使用了AG类纸屏，整体做工质感更加高档，旗舰款的智能屏T10功能齐全，加入了K歌功能作为主要卖点目前百度的智能屏主要有添添和小度两个系列，内容资源和家居控制功能比较接近，但添添系列内置电池，可随意摆放。此外，添添系列还拥有更多的外设配件，如麦克风、蓝牙手柄等，可实现KTV和云游戏等娱乐功能，更适合家庭聚会使用x9Pro有文心一言大模型买旗舰版105或大金刚165，不过可以先买小爱或天猫，百度没有底线2，小米2017年9月正式发布了智能音箱小爱，从现状来看，控制智能家居、智能语音交互、音乐和文字内容播放，是智能音箱使用频率最高的几个功能，米家目前是全球最成熟的智能硬件IoT平台之一，小米IoT平台支持超过2000款设备，小米并非开放平台，与第三方厂商是有限合作的关系，支持设备的数量很难快速增长。语音技术来自猎户星空、思必驰、搜狗和nuance多家厂商，在语音技术领域均为第一梯队，配合自研的小米大脑，唤醒成功率高小爱的触屏智能音箱的视频内容丰富，“爱腾优芒”俱全，其他热门直播平台则是标配，音乐主要链接了QQ音乐、虾米音乐和酷我音乐（不同型号内容库可能不完全相同）几款小爱智能音箱的基础功能差别不大。触屏音箱基本是为三口之家设计，小爱触屏音箱主打便捷操控，触控设计即便是老年人或儿童都能快速上手。可以可视化控制智能家居和实现语音通话，，称为多功能的智能网关更贴切。当前主推的产品有小米小爱触屏音箱、红米小爱触屏音箱8、小米触屏音箱Pro8、红米触屏音箱Pro8、小米智能家庭屏10、小米小爱触屏音箱8、小米智能家庭屏6等。小米的智能屏产品命名逻辑比较好理解，基础的小米小爱触屏音箱屏幕尺寸为3.97英寸，其余的后面带数字8、数字10的则分别对应产品拥有8英寸屏幕、10（10.1）英寸屏幕。消费者通常容易迷惑的是，Pro 8触屏音箱有小米和红米两个品牌，实际上除了产品形态不同外，音箱的具体功能大同小异，价格也基本一致对于一般家庭，小爱音箱第二代、小爱音箱 Play/Play 增强版、小爱音箱Pro都能满足需求，这三者外观、体积也非常相近。其中小爱音箱Pro定位最高，功能最全面，音质还行，支持蓝牙/wifi/红外遥控、蓝牙mesh、立体声组合等功能，小爱音箱升级第二代后也增加了蓝牙Mesh功能，相比小爱音箱Pro只少了红外遥控家电，性价比很高。至于小爱音箱Play体积更小，Play增强版多加了红外遥控支持，音质稍差。小爱随身音箱、小爱音箱Art的身型较小，适合中小户型，如果对产品的外观颜值有较高的要求，则可以重点关注一下小爱音箱 Art，它加入了名为“极光灯带”的装饰条，可实现RGB灯光效果，机身也采用了全金属设计，更具设计感。和百度一样小米也有被称为Sound的智能音箱产品：小米Sound、小米Sound Move和小米Sound Pro。Sound系列在小米的智能音箱中定位高端，比较舍得堆料，特别是发声单元部分，音质要比普通的小米智能音箱好很多。即便是入门的小米Sound售价也接近400元，Sound Move则侧重于户外便携，Pro侧重于高端音质，两者的售价接近千元。买了小爱play增强版3，天猫精灵2017年即发布天猫精灵，率先在智能音箱行业打起了价格战，促销力度比较强，一度成为国内销量最高的智能音箱。相比小米的智能家居、百度的内容服务与语音交互，阿里天猫精灵则是在新零售体系上打造自己的“护城河”，陆续整合进了饿了么外卖服务以及淘宝、天猫网购在智能家居整合方面其实也不弱，阿里AliGenie平台虽然不如百度开放，但也比小米的开放程度高，因此其智能家居设备也不局限于单一品牌，支持设备类别、数量甚至比小米还多。但是天猫精灵的问题在于智能家居设备太多太乱，不成体系，没有统一品牌，给购买带来了一定麻烦，不像小米，只要是米家能买到的，就一定会支持小爱智能音箱，闭着眼买都行。天猫精灵在智能交互上也有一些小毛病，不少人反映天猫精灵存在唤醒不够灵敏、误读率略高、声音机械感较强的问题，这是因为其语音技术由阿里巴巴自研，技术和经验上与专研AI人工智能的百度相比还有一定差距。对于注重功能平实、性价比的用户而言，天猫精灵方糖系列/天猫精灵IN糖都能很好满足日常需求。它们拥有语音命令、点播、多平台支持和家电控制等基础功能，天猫精灵IN糖的表面还使用了一块LED灯光显示屏，可以显示音乐律动和音箱的表情，IN糖3 Pro的LED显示屏则升级成了信息可视化的夜景面板，可以组合成时间、表情符号等信息，音箱的外观也改为复古的外观设计，十分像80年代的收音机。考虑到智能音箱的主要作用依然是听歌，天猫精灵也提供了音质升级、聆听效果更好的天猫精灵X5，扬声器的单位功率可达12W，和天猫精灵方糖2、天猫精灵IN糖等小尺寸产品相比声音更加洪亮，挑选一款高音质的产品，天猫精灵X5毫无疑问是首选。在天猫精灵X5的基础上更进一步、专注于听歌的智能音箱是新推出的天猫精灵Sound系列，共有Sound和Sound Pro两款，定位和百度、小米的Sound 音箱类似天猫精灵的智能屏产品数量颇多，和小米一样，型号中带数字10的是10.1英寸屏幕的产品，带数字7的则是7英寸屏幕产品。当前天猫精灵V10是智能屏的旗舰产品，不过日常售价仅在700元左右，要比百度和小米的产品便宜。功能方面V10有2GB内存和10.1英寸全贴合屏幕，前置摄像头为800万像素，支持2.4G和5G双频WiFi，这些配置都要比SE版本更加出众，且价格只贵了约50元。天猫精灵CC10是过去的旗舰智能屏，整体参数和天猫精灵V10 SE相差无几，此外还有屏幕更小的入门产品天猫精灵7S，支持基础的手势控制、多设备操控和视频通话，300元出头的价格性价比不错。x6只有基础的通义千问功能，相较以前的音箱现在可以解答您更多关于百科生活类的问题呢。但sound系列有通义千问的大部分功能，如精灵大模型由通义千问提供大模型服务，包含四大板块：1、全双工连续对话~更愉悦（一次唤醒，连续对话）2、AIGC创作~更聪明（为你写诗、文章创作、英文创作、祝福速递）3、开放域对话~更懂你（模糊搜歌、时尚总监、饭搭子、健身私教）4、TTS情感表达~更灵性（聊情感、聊运动、趣吐槽、聊星座）并包含以下功能 文学创作【诗词创作、散文创作（抒情）、小说创作（叙事】等；百科知识【人文历史、生活常识、天文地理、影视音乐、美术建筑、体育运动】等；情感推理【思维推理、科学推理、生活推理】等；私人助理【机器翻译、生活建议、儿童陪伴】等；示例：诗词创作：“用白居易的风格，写一首关于6月的诗”天文地理：“距离我们最近的星系是哪个”生活技能：“西红柿炒鸡蛋怎么做”生活推理：“我买了新的玩具是一个小丑，你喜欢小丑吗？生活建议：“推荐一下适合夏天吃的菜”X12017年7月，是第一款产品，5米范围语音识别，圆柱形, 6麦克风，内存256MB，约169元X52020年5月20日，首发售价299元。2024年5月23日，发布x6曲奇（M1）5米，圆柱式，侧面为一圈灰白色可拆卸布网，4麦克风CC2019年4月18日，首款带屏音箱，7英寸CCL2019年9月25日，CC MINI2020年9月17日，4英寸CC1010英寸方糖国民级智能音箱2018年5月，3米，更小的造型，长方体，更高的性价比，正面是横条状的扬声器开孔。2麦克风，128MB，方糖R2019年4月18日，方糖的升级版，199元，打折109元方糖22020年5月20日，天猫精灵方糖2正式上市，首发售价89元IN糖专为年轻潮流人群量身定制的智能时钟音箱2019年9月25日IN糖22020年9月17日https://baike.baidu.com/item/%E5%A4%A9%E7%8C%AB%E7%B2%BE%E7%81%B5/55863322最终买了In糖3，比方糖3多个时间显示4，苹果自苹果HomePod停产退市之后，苹果公司在售的智能音箱产品一度只有HomePod Mini。与其说苹果HomePod Mini是智能音箱，不如说是一款搭载Siri助手的蓝牙音箱，2023年HomePod（第二代）。二代首发价相比第一代降低了500元，仅售2299元，但也从一代的WiFi5减配为WiFi4，6麦克风缩减为4麦克风，在智能家居方面，HomePod二代支持HomeKit，能连接米家智能家居、海尔空调部分产品，但总的来说支持设备数量不多，这并非HomePod的强项。另外二代新增了U1传感器，可以通过AirPlay与iPhone12及后续机型同步音乐。二代还新增了温湿度传感，其它还有华为，广东徳仕，美国jbl杰宝。个人认为，音箱就音箱，别买带屏的了。也别纠结是否接入大模型了，还不如用手机使用大模型另外自己也可以集成大模型到音箱里面，github有教程。" }, { "title": "CMake系列5:生成调试符号", "url": "/posts/cmake-5/", "categories": "CMake系列", "tags": "CMake系列", "date": "2024-06-18 05:10:00 +0800", "snippet": "if(APPLE)set(CMAKE_XCODE_ATTRIBUTE_DEBUG_INFORMATION_FORMAT[variant=Release] &quot;dwarf-with-dsym&quot;)SET(CMAKE_CXX_FLAGS_RELEASE &quot;${CMAKE_CXX_FLAGS_RELEASE} -O3 -g&quot;)set_target_properties(${PROJECT_NAME} PROPERTIES XCODE_ATTRIBUTE_GCC_GENERATE_DEBUGGING_SYMBOLS &quot;YES&quot;)endif()会生成dsym文件" }, { "title": "vs系列2:基于ARM的Windows系统", "url": "/posts/vs-2/", "categories": "vs系列", "tags": "vs系列", "date": "2024-06-18 05:00:00 +0800", "snippet": "今年高通的芯片，听说性能很猛，超越苹果M3ARM上有用于AI的神经网络处理器单元 (NPU)Arm 版本的 Windows 10 包含仿真技术，使未经修改的现有 x86 应用能够在 Arm 设备上运行。 Windows 11 扩展了该仿真技术，以便在由 Arm 提供支持的设备上运行未经修改的 x64 Windows 应用。在 Azure 上，可以使用基于 Ampere Altra Arm 的处理器创建和部署 Windows 11 Arm64 VM，可以使用mstsc远程桌面工具连接。vs开发工具：vs2022 17.4可以在win11 arm64上运行vscode也支持armArm64 MSVC所在目录 \\VC\\Tools\\MSVC&amp;lt;version&amp;gt;\\bin\\HostARM64\\ARM64LLVM(Clang) v12+版本也支持armVcpkg 也在 Arm64 上本机运行Arm64EC（“仿真兼容”）使你能够逐步生成新应用或移植现有应用，以尽可能利用本机 Arm 性能，同时在实现完全迁移前利用现有的 x64 代码和库。Arm64EC 是一个新的应用程序二进制接口 (ABI)可以任务管理器中看到软件的架构，如果显示ARM64(x64 兼容)就是转换过的。或使用dumpbin /HEADERS xxx.exe看看 FILE HEADER VALUES 部分第一行是否输出 AA64 machine (ARM64)也可以在非arm架构的电脑上编译arm程序：运行vs installer，安装上MSVC xxx ARM生成工具、还有ATL(ARM64)，找不到就在单个组件里面找，安装完成后，打开vs配置管理器，新建一个ARM64的配置判断当前系统架构：SYSTEM_INFO si;GetNativeSystemInfo(&amp;amp;si);switch (si.wProcessorArchitecture)判断是不是PROCESSOR_ARCHITECTURE_ARM参考https://learn.microsoft.com/zh-cn/visualstudio/install/visual-studio-on-arm-devices?view=vs-2022https://learn.microsoft.com/zh-cn/windows/arm/add-arm-support" }, { "title": "CMake系列4:找不到CMAKE_C_COMPILER", "url": "/posts/cmake-4/", "categories": "CMake系列", "tags": "CMake系列", "date": "2024-06-17 05:10:00 +0800", "snippet": "vs重新配置个arm64编译器后，报错 No CMAKE_C_COMPILER could be found.fatal error LNK1112: module machine type ‘x86’ conflicts with target machine type ‘ARM64’vs配置问题，要把x64与arm64的版本对齐，要安装:MSVC最新C++/CLI支持，多勾选些就行验证arm64程序VC\\Tools\\MSVC\\14.38.33130\\bin\\Hostx64\\arm64&amp;gt; .\\dumpbin.exe /HEADERS C:\\devel\\test\\Temp3\\ARM64\\Debug\\Temp3.exe是否输出 AA64 machine (ARM64)" }, { "title": "windows常见问题系列3:网络不通", "url": "/posts/win-skills-3/", "categories": "windows常见问题", "tags": "windows常见问题", "date": "2024-06-14 05:00:00 +0800", "snippet": "ipconfig /flushdns 需要管理员身份ping iptracert -d ipmac上是traceroute ip" }, { "title": "网络协议系列2:智能家居选WiFi、蓝牙还是Zigbee", "url": "/posts/protocol-2/", "categories": "网络协议系列", "tags": "网络协议系列", "date": "2024-06-13 05:15:00 +0800", "snippet": "蓝牙Mesh和Zigbee都支持Mesh网络(即网状拓扑),蓝牙Mesh网络拥有更远的传输距离目前市场上看Zigbee比蓝牙mesh用户要多,主要原因也是由于基于BLE5.0的蓝牙Mesh网络近两年才被大规模的商用。蓝牙：适用于低功耗、短距离的无线通信，通常不超过30米。连接数量有限ZigBee：适用于低速、低功率、低数据传输且通信距离短的应用，通常在10到100米范围内。ZigBee比蓝牙和WiFi功耗低，ZigBee设备一般需要通过网关连接互联网稳定性：Zigbee＞WiFi＞蓝牙功耗性：WiFi＞蓝牙＞Zigbee穿透性：WiFi＞Zigbee＞蓝牙传输距离：ZigBee＞WiFi＞蓝牙成本：Zigbee＞蓝牙＞WiFi安全性：ZigBee＞WiFi≈蓝牙米家-我的-蓝牙网关中查看你的设备是否是mesh网关。显示为可控制设备就是mesh设备，显示为可查看设备就是普通蓝牙设备。" }, { "title": "商品选购系列8:智能家居平台", "url": "/posts/shopping-8/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2024-06-10 05:10:00 +0800", "snippet": "许多消费者对于智能的认知，主要来源于可通过音箱和手机控制的家电商品，其实这仅是智能家居的冰山一角。智能家居发展的终极目标，是实现成熟的家庭自动化（Home automation）：用户不需要开口发令，系统就会自动检测需求并行动，还可执行更复杂的条件判断无线智能家居市场依然很不成熟。一方面，AI技术尚未投放到大众市场，智能产品无法“自主思考”，仍停留在传感器感应、设备执行的发展阶段；另一方面，厂商为了利益争建品牌壁垒，不同品牌智能设备间无法互通智能家居的运作都建基于智能家居平台。市面上主要有两种智能家居平台：一种是以苹果HomeKit、小米米家为代表的非定制平台，只要选择兼容此平台的智能产品即可，不用担心不同品牌之间产品的兼容性。另一种是类似欧瑞博、云起等厂商使用的定制化平台，能按照个人喜好对系统及产品的方方面面进行调整，局限在于只能选购该平台厂商提供的设备。ZigBee和蓝牙mesh版都需要另外购入网关，通过网关形成自组网，断网也能用，其中ZigBee的造价成本要高于蓝牙mesh，但稳定性和传播速度更好。两者的信号穿墙能力都一般，需要多个分布式网关才能覆盖全屋，且安装便捷性不及WIFI。如果家里的智能设备比较多，更推荐多搭配一些网关或者自带网关功能的设备，分区域管理子设备，这样连接的稳定性、体验感会更好。1，美国苹果以门窗传感器为例，常见的智家系统在执行“开门亮灯”时，首先传感器感应到开门，将信息发往外网云端平台，接着云端平台下达指令，灯具收到指令开启。而苹果设置了一个本地家庭中枢，传感器收到讯息后直接联系中枢，由中枢指挥灯具亮起。2，广东绿米前身绿拓科技成立于2009年，最初是一家向B端提供楼宇控制方案的企业。2014年接受小米注资后，转型为C端智能家居公司。截至2021年，绿米线下店已覆盖中国300余个城市，门锁年出货量超百万，并于10月底完成10亿C轮融资。目前市面主流的通讯协议有Wi-Fi、蓝牙、蓝牙Mesh和Zigbee，Zigbee是其中综合性能最好的，稳定性高、功耗低，需要买网关网关m1s智能家庭总管家只支持米家APP，直连32个设备，zigbee，有小夜灯，收集信号，发送指令，子设添加时，要选择绑定网关3，北京小米米家已成为全球最大的智能硬件IOT平台。选择小米平台，最大的优势就是产品极全面，上到灯具窗帘锁具等主流智能产品，下到烤箱榨汁机等相对边缘的小电2018年小米曾短暂推出Zigbee产品，但由于成本高、推广难等问题，已被正式放弃，目前被力推的是蓝牙Mesh方案。蓝牙Mesh拓扑结构与Zigbee相似，稳定性却远不如Zigbee4，广东欧瑞博最大的弱点就是对其他生态兼容度低5，浙江涂鸦智能涂鸦智能是一家完全为B端提供开发服务的企业，在C端基本没有品牌露出。6，广东华为2015年，华为首发无线智家平台HiLink，在智能家居赛道上已属于后入场者。7，上海UIOT超级智慧家直营店多设立于红星美凯龙、居然之家等大型卖场中全屋联动只能在自家APP内执行。8，浙江天猫精灵虽然很多设备都宣称可接入天猫精灵，但不少设备支持的是第三方接入，而非常见的云对云（即在APP内直接添加）接入。通过第三方接入后也可用语音和APP控制设备开关，但无法和其他设备进行自动化联动，控制效果大打折扣，所以在购买前必须咨询清楚。现阶段，天猫精灵智能音箱和它背后的生态链，更适合作为一个点缀生活的科技玩具9，北京百度首创智能音箱的亚马逊Echo引领起一阵无屏设备潮流，而2018年的小度在家带屏音箱又让屏幕回归，将流量入口从听觉扩展到视觉，再一次改变了中国用户的习惯。2019年第一季度，小度跃居中国智能音箱市场占有率第一，并蝉联至今。提供的内容远多于天猫、小爱。10，广东美的https://sspai.com/post/63158" }, { "title": "商品选购系列7:智能窗帘与窗帘", "url": "/posts/shopping-7/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2024-06-09 05:10:00 +0800", "snippet": "传统的电动窗帘与智能窗帘最大差别在于不能联动。传统电动窗帘只能通过遥控或者开关，实现简单的开合、调节等控制功能。而智能化打破了产品间的界限，当智能窗帘接入系统后，除了可以语音控制和手机APP遥控，还会根据人体、光照、湿度温度等智能感应器采集的数据，执行全自动调节，与此同时，其他智能家居设备也会协同工作。1，法国尚飞现常见的管状窗帘电机，就是尚飞在1969年的发明。与此同时，尚飞也是高端智能化方案的供应商，拥有完善的光、温、风、雨传感器矩阵，提升自动化遮光体验2，浙江杜亚在2010年被尚飞收购70%的股权，杜亚窗帘电机的的销量常年稳居国内第一，市场占有率超过50%。全线窗帘电机产品的工作噪音均控制在30dB以下。杜亚以70%的份额独占鳌头，技术水平行业领先，杜亚智能窗帘m5，其使用的无刷电机一般用于高端产品，较其他窗帘使用的有刷电机，无刷电机在性能、静音、耐用性上有更好的表现。配合杜亚专利斜齿减速机技术，在静音上做到如风吹落叶般26分贝的水平。m5通过WiFi接入米家平台，在折扣期3米轨道套装800元左右的价格，比其他品牌贵一点，但不止好一点。剩下的M7、X7、V7、M7Li、i3Plus、V5 MAX等可以看作是杜亚中低端产品。其中M7、X7、V7均采用高品质的直流无刷马达，工作噪音降至26dB以下，只比微风吹落叶声（20dB）稍大一些，静音效果是所有上榜品牌产品中最佳的。窗帘采用WiFi直连模式，搭配米家或天猫精灵平台，无需网关就能实现远程智能化操作。V7接入天猫精灵，M7接入米家，v6天猫精灵M7Li和i3Plus都是锂电智能窗帘，没有预留插座也能正常使用。电机采用低耗能的蓝牙Mesh协议，充电一次可续航6个月以上。V5 MAX采用大功率无刷马达，最大承重可达100kg，是其他普通窗帘电机的两倍。在生态系统上，针对米家、小度、天猫精灵、华为HiLink等国内主流平台，杜亚都“有品可选”，但每个型号通常只支持某一平台，选购时要多留心，以免家中设备无法适配。最后决定买杜亚m7，4米约666元3，广东绿米Aqara最具性价比的莫过于电机E1。电机搭配3米轨道的测量、定制和安装，日常活动就能蹲到650元以内好价，实在让人惊喜。接入米家平台，可实现APP操作、语音控制、定时、开合比设定等操作；搭配网关，还能与其他设备智能联动。a1带遥控器，百分比开合，定时开合，不需要网关e1也是WiFi直连，不需要网关，不到500元，不支持小度和天猫精灵还有充电的b1，不需要插电，半年一充，价格贵些1139元左右，是zigbee协议，需要搭配网关，需单独购买无线开关，无线开关也需要网关e1，m1s网关不支持b1，可搭配无线蓝牙遥控器梦幻帘电机H1可以横着安装窗帘伴侣E1让传统窗帘变智能，支持罗马杆zigbee版窗帘支持天猫精灵，小度，4，广东欧瑞博虽然欧瑞博的部分智能窗帘已加入第三方生态平台，但要体验完整全屋智能设备联动功能，还是要做全屋使用欧瑞博智能设备的打算。5，浙江云起购买云起的产品后，需要搭配购买同品牌支持CoSS协议的网关，才能接入使用。同时云起的网关也支持其他的通信协议6，广东创明推荐哈弗180 Wi-Fi版，电机+3米轨道+遥控器的组合，日常价只要700元左右；即能接入米家、天猫精灵、小度等多个智能生态平台，窗帘品牌1，浙江金蝉隶属于浙江金蝉布艺股份有限公司，该公司创立于1988年，是国内现代窗帘行业的第一批生产制造商，拥有69000平方米的生产基地，制造水平位列行业第一梯队。可以额外增加窗纱、窗幔等配饰，花边则只有少部分贵价款式才有提供。2，瑞典宜家分为遮光、半遮光和滤光三类，售价几十到千元不等。其中，占比最大的是布艺窗帘，基本上采用棉质材料，例如迪巴思、桑尼拉系列等，售价都在200元以上。要注意的是，宜家窗帘大都是固定尺寸的，选购之前要注意尺寸是否匹配。除此之外，宜家还推出了聚酯材质制成的窗帘，这种材质的价格相当实惠，适用于出租房、卧室、学生宿舍等。其中本格塔系列销量最高也最便宜，只需99元。窗帘表面触感光滑，且具备出色的遮光效果除了家用窗帘，宜家还有电动卷帘和百叶卷帘。宜家的这两类卷帘以白、灰、宝蓝色调为主，设计都非常简约，多用于办公区、会议室等地。若是办公区域阳光充足，需要调节光线效果，也可以选用遮光卷帘，例如福里当斯、特普弗斯等系列。3，浙江如鱼得水4，江苏罗莱家纺价格方面，罗莱窗帘约100元一米，比金蝉、如鱼得水这类传统窗帘品牌的产品便宜一些。5，上海水星家纺制造实力与市场占有率比罗莱家纺稍差一些" }, { "title": "商品选购系列6:扫地机器人", "url": "/posts/shopping-6/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2024-06-07 05:10:00 +0800", "snippet": "1，江苏科沃斯ECOVACS更加推荐规划式扫地机器人。目前有旗舰款X、次旗舰T及N系列，多为规划式扫地机X1就首次将自动洗拖布与自动集尘功能合为一体，品牌同类型机型要比科沃斯晚半年左右。而X2则致力于解决边清洁的难题，将机身改为方形设计，比传统圆形机身覆盖面积更广，并将滚刷长度扩大至200mm，能有效提高清洁效率；新旗舰X2S更是少见的在双拖布基础上增加第三款小拖布，同时升级恒贴边技术，可使拖布持续伸出贴边，清洁不易遗漏。X2还把雷达创新性地嵌入机器内部，将整机厚度压缩至9.5cm，这是科沃斯最薄的机器科沃斯新推出的X2S，是其方型旗舰X2的升级版，进一步将吸力提升至行业天花板级别的11500Pa，缝隙、死角的灰尘也能快速吸走。值得一提的是，X2S在常规双拖布的基础上增加了第三块小拖布，配合恒贴边技术，清洁墙边污渍更到位。此外，机器热水洗温度也由60°C提升至70°C，更易去除油渍、咖啡渍，还有智能识污复拖功能，清洁效果没得挑，价格比仅X2贵了百元x5Pro 5199元返200，24年4月上市x2s是24年三月份2，北京石头米家扫地机器人就是石头的处女作，之后石头推出自有品牌和产品，目前在中国市场的占有率稳居前三，仅次于科沃斯，石头扫地机主要为T、G、P、V四大系列。T7可以说是一个分水岭，之前产品的核心算法和清扫能力彼此间差距不大，只是性能稍有不同；T7之后的机型在避障能力和扫拖功能上提升较大，部分产品能够实现3D避障，对于细小杂物，甚至是令铲屎官头疼的宠物便便，都可以精准识别并且避开G系列是石头高端旗舰款，其中G10S的性能配置和同价位科沃斯X系列差不多，甚至还多了加装自动上下水配件的选择，可最大程度解放双手。不同点在于G10S采用平板拖布，单点覆盖率比科沃斯的更高，但是在清理重度污渍时稍显乏力。为了解决这一问题，石头在最新款G20S升级了四区双震擦地，频率达4000次/分钟，清洁效果有明显提升，同时基站内还多加了双刮洗条，可有效减少脏污残留，价格在5000元以上，适合预算充足的用户。P系列是全能机型中的性价比系列，售价在2800-4000元内，在传统双旋拖布的基础上增加了“扫拖双机械臂”，实际上就是让拖布和边刷都能自动外扩，方便清洁墙边、桌角等卫生死角，比旋转拖地的贴边效果更好，还有60℃热水洗、脏污复洗等功能，追求实用性选它就足够。如果是杂物多的养宠家庭，V系列是更好的选择，石头在其避障技术上实现新突破，在机器正面和背面都集成了一颗3D ToF固态雷达，可快速完成三维建图，加上RGB摄像头，避障能力更精准，由于少了顶部的凸起雷达，机身厚度也能压缩至8.2cm，是目前市面上最薄的机器，可深入鞋柜等低矮空间清洁。还有双动态机械臂、双胶刷等旗舰配置，配合11000Pa大吸力，各种缝隙死角灰尘都能清理干净，售价4800元左右。3，天津追觅追觅科技的前身是清华大学天空工场，在2017年底加入小米生态链，石头稳定发展后便开始着手“去小米化”，为小米代工的业务占比逐渐下降，追觅顺其自然成为米家扫地机器人的主要代工厂商，也为自主研发扫地机器人积累生产经验。按型号可分为10系、20系、30系和40系，其中10系和20系都是推出较久的机型，价格在2000-4000元内，性能表现比较均衡，如果是预算有限或尝鲜使用的用户，建议从S10和S20等基础全能型机器人入手，集尘洗烘上下水多功能一体，同时产品的吸力也达到了5300Pa以上，足够多数家庭使用；旗舰技术都集中在30系和40系，比如X30首创了仿生机械臂技术，使拖布可外扩对边角进行清洁，同时将吸力提高至8300Pa，像缝隙灰尘、大颗粒垃圾等都能吸走。该系列另一大亮点是开创了“主动式”自清洁模式，在基站内增加了双刮洗臂，就像汽车雨刮器一样，能对清洁盘进行刮洗，有效减少基站内部的脏污残留，进一步解放双手。而X40系列更是做到了极致堆料，在X30的基础上升级成“双臂”外扩，除了拖布，连边刷都能伸出清洁死角，贴边更极致，吸力也达到了12000Pa天花板级别，清洁效果没得挑。此外，该款还升级了70℃热水洗，配合双刮洗臂，拖布和底盘都能清洗干净，同时内部污水箱还加了除臭模块，可有效减少异味产生，自清洁更到位，当然售价也去到了6000元。4，北京米家在2016年规划式扫地机还不多的市场中，米家推出带有激光导航的扫地机器人，价格仅为1699元，直接腰斩行业均价，如今这款产品的性能在千元出头的机型中仍能保持足够的竞争力。米家扫地机器人前期主要由石头代工生产，目前主要由追觅、深圳市杉川机器人有限公司代工，米家和这些品牌的扫地机器人有各自的生产线，在造型设计上也有所区别。与主流机型一样，米家采用胶毛一体的V型主刷，配有单边刷辅助清扫，清洁能力较强，但容易缠绕毛发，使用后清理时较麻烦。米家产品命名比较混乱，按功能可以分为纯扫地机系列、扫拖一体系列及全能扫拖机器人。米家扫拖一体系列选择非常多，1000-2000元的机型采用视觉或激光导航技术，若是家中杂物并不多，这些机型已经足够用。2000元以上的机型，除了视觉或激光导航，添加ToF技术辅助，提高对小物件的识别与避障能力，使用时无需提前收拾杂物。米家扫拖一体机采用高频震擦技术，其频率高达10000次/min，拖地能力较强，但比起以拖地著称的云鲸还是稍显逊色。其中米家扫拖机器人2 Pro采用dToF的导航方式，清扫时产生的碰撞较少，但其避障算法较为保守，绕行距离较远，牺牲了部分清洁精准度，这款产品日常价格仅为2500元左右，是不错的大牌平替。全能扫拖机器人是米家的高端机型，米家的专利技术均在其中体现，比如M30 Pro就首次在基站内增加了不锈钢切割组件，一定程度上能减少毛发缠绕；而M30S则升级了动态机械臂技术，通过拖布外扩实现贴边，清洁更到位。时下流行的热水洗、自动集尘、热风烘干等功能也一应俱全，配置上不输科沃斯和石头，价格也更为便宜，但规划和清洁能力比起两者稍有不足，非性能党可以考虑入手5，广东云鲸如今扫地机器人市场竞争激烈，前有iRobot、科沃斯等先行者，后有小米、石头等互联网企业强势搅局，在这种情况下，云鲸凭借一款小白鲸扫拖机器人进入市场，在线上取得不错的成绩，后推出小鲸灵系列完善产品线，实力不容小觑。美的、海尔等传统家电巨头涉足扫地机器人，大多是为了分一杯羹，在研发上投入很少。而云鲸的团队60%都是研发人员，其中不少人士在智能领域累积多年经验，可见云鲸更注重研发与技术创新，定位明显有别于传统家电品牌。有技术、有实力的品牌，往往热衷于宣扬产品的高科技，如iRobot、科沃斯等头部品牌，将营销重点放在扫地机的核心算法、避障技术上，但消费者往往感知不强。云鲸则不同，其宣传重点在扫地机器人的实用功能上，推广内容注重展示实际使用的过程，使产品更接地气、更容易被消费者记住。云鲸定位更倾向于拖地机器人，旗下产品不多，分别是以J1、J2为代表的小白鲸系列和小鲸灵系列J3、J4，其中J1引用电动拖把的拖地方式，首创自动洗拖布功能，既解决了主流扫拖一体机无法处理粘稠、干燥污渍的问题，也解决了人工换洗拖布的痛点。云鲸J2还首创了“自动上下水”模块，解决人工换水问题；小鲸灵J3、J4则是进一步往智能方向发展，增加了脏污感应、路径规划等实用功能，进一步解放双手。云鲸不缺技术创新点，但以往几款机型的吸力都比较小，扫地能力较为欠缺，针对这一问题，J4全新升级了风机和风道，最大吸力真空度可达7800Pa，同时还研发了导流式滚刷，能有效吸走地板缝隙毛发、灰尘等，配合智能脏污感应系统和扭边清洁，墙边等死角也能比较好地覆盖，提升清洁效果。除了基础款J1，云鲸其余几款机型都支持选配上下水模块，安装后无需手动换水，但是该功能也有局限性，扫地机一旦加入上下水模块，则基站无法再移动云鲸至今仍只有两大系列产品，更新迭代速度较慢，仅提供2年质保服务6，美国iRobot扫地机器人历史上具有里程碑式的意义，正是其家用扫地机器人Roomba开启了智能扫地机器人时代。iRobot一直以技术强悍著称，直到今天，我们仍然可以说它是技术最强的扫地机器人公司，但iRobot产品的中国本土化表现一般。大多中国家庭偏好扫拖一体机，这也是本土扫地机器人的主要迭代方向，iRobot则把扫、拖两个需求完全分开，再加上较为高昂的价格，容易给人“性价比不高”的印象。不过，扫拖功能分开避免了垃圾被拖布打湿的问题，因此iRobot对于对扫地效果要求高的用户是更为理想的选择。iRobot到目前为止推出了经典入门的5系和6系，进阶款的8系、9系，还有旗舰型号的s系和i系，以及专为宠物设计的e系列，但国内在售的型号主要为9系、i系列和s系列，其中入门级6系列采用一胶刷一毛刷的设计，8系列之后的产品采用双胶刷设计，清洁能力增强，防毛发缠绕表现也更好。" }, { "title": "商品选购系列5:投影仪，激光电视", "url": "/posts/shopping-5/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2024-06-05 05:00:00 +0800", "snippet": "家用投影机和商用投影机之间有什么区别商用机的流明比家用机高。这是因为商用场合环境都很明亮，如果投影机画面亮度不够的话，很容易看不清投影画面。商用机的对比度要比家用机差很多。商用投影机主要是用来做PPT演示之类的展示，用来工作的，重点在投影画面的亮度上，不在画质和色彩的呈现上。激光电视，它和激光投影是什么关系？激光电视：亮度更高家用投影仪：家用投影仪可分为传统灯泡机、LED投影仪和激光电视三种。传统灯泡这种明基和爱普生这类老牌投影仪厂商推出的大多是此类产品。市面上大部分家用投影仪都是LED投影仪，它采用LED光源，亮度通常在1000流明之下。LED投影仪虽然亮度不及灯泡机，也存在发热问题激光电视采用激光光源，主打超近距离投影，离墻20cm左右就能投出上百英寸的画面，画面色彩、亮度是所有投影仪中最好的，不过激光投影仪售价高昂，一般要万元起步要看什么参数：1，分辦率决定了清晰程度2，流明亮度按测量方式不同，可以分为ANSI流明和光源流明，前者测的是投影画面的实际亮度，后者则是发光源的亮度，同一款产品测出的光源流明会比ANSI流明高出不少，在选购时注意区分家用投影产品的亮度一般在2500流明以下，不少厂家的投影产品亮度不足1000流明，却宣称拥有3000光源流明亮度。光源流明是指投影机光源的亮度，而非投影画面的亮度，画面的亮度才是最影响观感的指标。当光源投射到屏幕上时，屏幕距光源越远，亮度损失越大。一般来说，光源亮度高达3000流明的投影机，其实际画面亮度也就在750流明左右3，对比度，对比度越高，画面色彩越鲜艳有FOFO对比度和ANSI对比度两种，这两种对比度的测量方法不同，FOFO对比度采用全开/全关（Full ON/Full OFF）对比度测试方式，即测试投影机输出的全白屏幕与全黑屏幕亮度比值。ANSI对比度采用ANSI标准测试方法测试，16点黑白相间色块——8个白色区域亮度平均值与8个黑色区域亮度平均值的比值，即为ANSI对比度。在日常播放PPT或是电影的过程中，用户更多的时候是看到色彩斑斓的画面，此时ANSI对比度具有参考意义。有时，一些电影或者游戏当初也会出现一些明暗场景的变化，这时，FOFO对比度具有参考意义。注意事项真4K和假4K投影仪怎么辨别？市面上有些自称拥有4K分辨率的投影仪，实际输出分辨率并不能达到4K级别，只是能够播放4K片源，只有无损地输出4K画面的投影仪才可以被称为真4K投影仪。4K DLP只有415（2716x1528）万微镜，并不是原生4K的3840x2160显示所需要的830万。不过它的细节解析与纯原生4K也无法区分。因此，将使用4K DLP芯片的投影仪归类为原生4K没有任何异议。但采用4K增强3LCD芯片的投影机不能算原生4K，不过观看视频内容时效果很难区别。白墙和幕布的投影效果有什么不同？直接投在家里的白墙上，画面细节会有所丢失，亮度也不太够，白天投影时劣势更明显。最好选择幕布投影，幕布有壁挂式和落地式两种，有抗光处理即使是投影仪中最高端的激光电视，它的画面素质也无法与同价位的液晶电视相比，单是画面亮度和对比度这一点，液晶电视就有压倒性的优势，下面看看有哪些品牌1，日本索尼索尼的画质技术可谓登峰造极，无论是显示器、相机传感器、还是投影机高端画质芯片，凡涉及到影像领域的数码产品，索尼几乎都是顶尖的代名词。依照投影技术原理，市面上的投影机可分为3LCD、DLP以及LCOS投影机。3LCD投影机内部采用3片LCD液晶面板，其发展时间最长，技术成熟，综合表现较好，尤其是色彩效果相当出众，但存在分辨率低，且长时间使用容易出现画面发黄的情况。DLP技术则比较尴尬，一方面它的高端形态三片式DLP表现极为出色，但体积巨大，多用于商业市场，而单片式DLP虽然具有高对比度、尺寸小、封闭式光路（防尘）等优点，但色彩表现不佳，其“彩虹效应”更是令用户饱受困扰。而LCOS堪称是凌驾于3LCD和DLP的新型投影技术，它是以3LCD为基础研发，相比3LCD和DLP，LCOS投影机具有超高分辨率的特点，可实现效果不俗的原生4K画质。另外，LCOS投影机还具备超高亮度和对比度的特点。索尼的LCOS元件命名为“SXRD”，JVC厂商的命名为“D-ILA”。在原生4K之外，市面上还有一种“伪4K”投影机，它采用更低分辨率芯片，在图像的顺序刷新中通过像素偏移技术使像素沿光学对角线偏移，在第二次刷新时，像素的一部分被重叠，投影机输出的每一帧图片都包含了原始图像和偏移图像，可寻址像素达到了830万像素，符合4K标准。通过像素偏移技术实现4K画质的投影机采用了更低分辨率芯片，成本大大降低，真正实现了4K平民化，但画质的极端测试下，与索尼原生4K仍存在较大差距。另外，索尼基于LCOS技术研发的SXRD芯片还具备独特的画面过渡优势，在使用索尼4K投影仪时，不会产生典型的“拖影现象”，观众可以看清画面中的每一个细节和特写。立足于技术实力的索尼向来不以“性价比”抢占市场，在家用投影机领域，索尼设立了4K和1080P两条产品线，均为中高端机型，VW、XW开头的型号为4K，具备灯泡光源和激光光源两种，VZ为短焦4K产品，可实现超短距离投射，而HW开头的型号则为1080P产品。索尼4K投影机采用3片0.74英寸SXRD芯片，具有4096x2160原生像素，而VW768、VW798、VW878、VW898、VW5000ES和VZ1000等高端4K机型配备了激光投射灯，售价在10万元以上售价在3.5-10万元之间的产品采用低一档次的高压汞灯，使用寿命在6000小时左右，需要用户定期更换。对于追求顶级画质的发烧友，目前仅有索尼和JVC的原生4K产品可满足需求如今投影市场越来越成熟，索尼新XW系列相比于以往3.5-10W的VW系列配置更高，将旗舰级4K配置价格下探到12W以内，XW5000和XW7000这两款投影使用激光光源，用上了以往70W级投影GTZ380上的的旗舰级X1 Ultimate 芯片，在1080P领域，索尼产品不多，仅有HW79、HW49、HW69、HW48和HW68五款，均采用3片0.61英寸SXRD芯片，具备1920x1080原生像素，画质表现不及4K，但售价下探至1-2万元，更显实惠。如果缩小投射面积，索尼1080P产品同样能让消费者体验到极致的画面效果。2，日本JVC杰伟世旗下4K产品线可细分为原生4K以及像素偏移4K两种JVC采用原生4K芯片的有DLA-N7X系列，主推N70、N77、N78等几款产品，机型最末尾的数字代表其原生对比度、亮度的高低，数字越大则售价越高，N78亮度为2000流明，原生对比度为60000:1，N77次之（1900流明，50000:1），N5最低（1800流明，40000:1）还推出了一款入门级4K投影机LX-N59W。这款投影机采用德州仪器的芯片，通过像素偏移实现4K，售价下探到40000元内。3，台湾奥图码仅有JVC的“e-shift”和德州仪器的XPR技术能获得人眼无法分辨的4K画质在权威测评机构Projector Central10000美金以下最佳家用投影机排名中，奥图码UHZ65甚至击败了索尼VPL-VW295ES，获得首位推荐。在知名媒体CNET评选的2019年度最佳家用投影机中，售价分别为1800美金和800美金的奥图码UHD60、HD142X，分别获得8.1和8.0分佳绩，荣获冠亚军。JVC旗下的“伪4K”投影机售价在4-9万元，而采用德州仪器XPR技术的DMD芯片的奥图码，其“伪4K”产品售价普遍不到4万元。4，台湾明基虽然0.66英寸和0.47英寸芯片都被称为4K DLP芯片，但是确是两个不同档次的产品，0.66英寸在显示精度上非常接近真4K，除非通过极端测试，否则在日常使用中根本无法区分，而0.49英寸4K在显示精度上则比真4K差了一大截。明基旗下的4K投影机囊括了0.66和0.49两种尺寸芯片，在价格上，采用0.66英寸芯片的机型售价在15000元以上，画质虽好但是售价偏高；而0.49英寸的机型售价在15000元以内，更具性价比5，日本爱普生爱普生推出了TW8300、TW8300W、TW9300、LS10500和LS10000等多款极具竞争力的“4K增强”投影机。除了采用激光光源的LS10500和LS10000，其余三款投影机都采用250W灯泡，亮度可达到2500流明流明亮度，灯泡常规使用寿命为3500小时。价格方面，爱普生“4K增强”机的售价在4-15万元之间。6，美国优派7，四川极米连续四年占据出货量、销售额冠军宝座。家用娱乐系列主要采用LED光源，这种光源虽然使用寿命长（30000小时），但也存在亮度低的缺点，在环境光源（如白天、晚上开灯）的干扰下，投影画质较差极米家用娱乐系列提供720P、1080P和4K三种分辨率，主要对应入门Z系列、中端H系列和旗舰RS系列。H系列定位最高的是H6，虽然名叫4K版，但依旧采用0.47英寸DMD芯片，属于1080P抖4K产品相比于H6，同样是4K分辨率的RS PRO 3定位要更高，其售价在9000元左右，采用4LED+1红色激光的混光方案，利用激光光源突破了LED光源的亮度瓶颈，亮度高达2500CVIA流明，同时也避开了三色激光带来的散斑、彩边问题，但色域、对比度表现不及同价位三色激光投影仪。升级旗舰MT9679芯片RS 10 Ultra搭载MT9669芯片，对比同为旗舰的RS PRO 3反有退步，但亮度却是实打实的进步，高达3200CVIA流明（另有3500CVIA流明的典藏版）极米神灯则是一款新形态投影，前两代产品曾在日本畅销多年，极米中国区上架的则为第三代产品，集吸顶灯、智能投影和家庭音响于一体，，距离房间1.5m即可投射百寸大屏，小房间也适用8，广东坚果家用投影机亮度一般在2500流明以下，可在明亮的条件下观看，但国产投影机为了压缩成本，往往采用亮度最低的LED光源，其亮度普遍不足1000流明，可分为两类，采用激光投影仪和LED光源投影仪。坚果将三色激光技术下放到自家N1系列投影仪上，将三色激光投影仪的价格压到了万元以内。首批产品为N1、N1 Pro和N1 Ultra，定位依次提升9000元左右的N1 Ultra亮度高达2200CVIA流明，DMD芯片与Pro一致为0.47英寸dmd芯片，但为抖4K画质，激光模组也升级到3个。还对N1 Pro和Ultra进行升级，推出N1S Pro和N1S Ultra，前者得到了N1 Ultra的抖4K画质下放，亮度升级到2000CVIA流明，N1S Ultra则用上了新一代MT9679芯片，接口从USB2.0升级为3.0，散斑也进一步优化，亮度还达到了3000CVIA流明，如果房子空间有限，想做到贴墙投影，则可以选择坚果智慧墙O系列。老产品O1 Pro搭载0.33英寸DMD芯片，亮度为600CVIA流明，投射比达到了0.21：1，距离墙面23cm即可实现百寸投射，售价4000元左右。新产品O2和N系列一样用上了三色激光技术，色彩相比O1系列有所提升，亮度升级为700CVIA流明，投射比来到了0.18：1，投射出百寸大屏只需要22cm。不过，O2搭载的是0.23英寸DMD芯片，画质终究比不上同价位中搭载0.33英寸DMD芯片的长焦投影仪N1。9，浙江当贝分四个系列，X系列为激光投影仪，F系列更注重色彩调校，D系列为入门性价比产品，C系列则为便携投影仪该品牌的X5、X5 Pro就是单色激光光源产品，相比于LED光源亮度更高，可以达到2450CVIA流明，处于业内领先水平，高光表现很好，即使在白天也能看清楚画面。7000元左右的X5 Pro则支持抖4K画质。在X5 Ultra上，当贝尝试了全新的光源方案——ALPD5.0超级全色激光，即在三色激光的基础上加入全色LED光源，得到三色激光色彩优势的同时，杜绝了散斑问题。然而该方案也并非十全十美，代价就是牺牲了画面对比度，除非对散斑极度敏感，否则还是三色激光模式画面表现力更好。抖4K画质、2500CVIA流明、MT9670芯片、6GB+128GB、当贝X5 Ultra没有自带云台10，山东海信子品牌ViddaC1、C1S、C1 Pro均采用MT9669处理器和0.47英寸DMD芯片，为抖4K画质，主要差异在于亮度表现，C1为1350CVIA流明，C1S为1600CVIA流明，C1 Pro为2350CVIA流明Vidda还有一款LED光源投影仪M1，支持630CVIA流明和1080P画质，色彩表现一般般，性价比不如C1系列，主要卖点是轻薄小巧，体积接近书本，可直接放入背包11，台湾宏碁12，北京小米可分为3类——米家LED投影仪、小米激光投影仪和Redmi单LCD投影仪米家投影仪2 PRO的亮度在1300流明，价格在4000元左右。激光系列的代表产品是小米激光投影仪1S，得益于ALPD激光显示技术，亮度来到了2400流明，相比于LED投影优势明显，并且支持1080P抖4K画质，但2G+16G的内存配置在长期使用下难以保障流畅度，售价6000元左右。北京峰米峰米科技是光峰科技与小米联合成立的公司，旗下所有投影设备均使用激光光源，看看激光电视：1，山东海信2021年海信拿下了中国大陆激光电视市场46%份额，没有三色激光显示不了的颜色。红色、绿色的激光器良品率低，成本分别达到蓝色激光的5倍和10倍。的激光电视产品型号以L/J为系列，以100L5G为例，中间5/7/9分别代表应用了单色/双色/三色光源激光技术，末尾字母通常代表产品的设计年份，H/G/F代表2022/2021/2020年。海信的激光电视只出售激光投影机+定制抗光幕的套装，而不提供仅购买投影机的选项，100L5G就代表其提供100英寸的定制抗光幕建议搭配专用的菲涅尔抗光幕或黑栅抗光幕，菲涅尔屏属于硬幕，100英寸的硬幕需要电梯及户门对角线、楼道宽度均达到2.6米以上方可通过。电视采用定焦设计，这就意味着其只能投射出厂设定的画面大小，也就没有了更换更大抗光幕的需求。2，北京峰米峰米激光电视主要有：Cinema 2、Cinema Pro、T1、Max四款。亮度是它们的最主要区分点，最高档的Max亮度达到4500 ANSI流明，处于行业的第一梯队，可以说非常接近传统电视的亮度。3，四川长虹其线上款为D系列，大多为单色光源激光电视，D300是长虹D系列唯一一款三色激光产品，定位旗舰级别。线下主打CHiQ系列，定位和档次全面高于D系列。高端产品中，首发了三色光源激光技术的C7UT/C8UT，以及搭载了0.66英寸DMD芯片的C7UG4，台湾明基i962L/i967L是明基激光电视代表作，其100英寸硬幕套餐售价约3.8万/4万元，其亮度高达3000 ANSI流明，支持HDR 105，日本爱普生绝大多数激光电视采用的单片式DLP投影，需要旋转的滤光色轮来过滤产生颜色，LS300搭载腾讯极光系统，支持AI智能语音、无线投屏和3D功能。100英寸硬幕套装售价约2.3万元，性价比非常高。EH-LS500B/W拥有LS300的全部配置，并且支持4K增强技术，亮度也提升至4000 ISO流明，这个亮度处于激光电视的高端水准。没有虚标6，韩国三星LSP7T使用单色激光光源，0.47DMD芯片4K分辨率，亮度2200ANSI流明，硬件上基本是常规方案。LSP9T亮度提升到2800 ANSI流明，并采用了更先进的三色光源技术，没有虚标LSP7T的100英寸硬幕套餐售价3.5万元左右，LSP9T的100英寸硬屏套装则为6万元左右不支持安装第三方APP，7，日本索尼索尼不将“激光超短焦投影”称为“激光电视8，韩国LG主推产品只有一两款LG的85、915两款激光电视的投射比为仅0.19，基本是行业里投射距离最短的之一。0.19的投射比在投射120英寸的画面时，仅需要50cm的投影距离，这使得它们可以放置在宽度60cm的电视柜上使用。市面上多数激光电视的投射比在0.23左右，如果想投射120英寸画面需要61.1cm的距离9，广东坚果坚果先于极米推出旗下首款激光电视S1。4K分辨率的S3、SU、U1，以及三色光源的U2和U2 PRO，全系支持主动式3D技术，对3D电影有很好的兼容。这其中比较推荐入门级的U1和高端款U2 PRO。激光电视U1的100英寸硬幕套装的售价在1.3万元左右，采用了0.47英寸DLP DMD实现4K分辨率，亮度2400 ANSI流明，是性价比不错的尝鲜之作。U2 PRO含硬幕套餐价约4万元，同样为0.47英寸DMD，亮度提升到了3600ANSI流明，白天观看画面也相当透彻。其使用三色光源激光技术10，四川极米2017年极米才真正推出激光电视产品极米激光电视并不是其主打品类，产量较小，经常遇到缺货现象，在一个周期内主打的产品通常也只有一两款。其产品也主要以行业的成熟方案为主，没有太鲜明的品牌特色。目前极米在售的激光电视主要为A2/A2 PRO、A3/A3PRO这两个系列。幕布抗光幕、3D幕布，菲涅尔1，美国斯图尔特Stewart幕布大多万元起步2，日本奥爱斯osOS幕布大多万元起步3，日本菊地尚未在国内电商平台开通官方购买渠道4，美国亿立5，广东美视对投影画面的色彩、亮度要求不高，预算在2000元以下的入门级用户，可以考虑晶影系列电动幕、莎芭系列手动幕；如果用户预算充裕，追求较好的试听体验和流畅的操作感，则可选择帝雅斯系列的大纯平画框幕，莎芭系列的智能遥控电动拉线幕，以及纤影系列的画框透声幕6，香港经科7，江苏红叶吸顶幕，超短焦菲涅尔抗光幕8，北京白雪市面上中低端幕布采用的白塑材料一般是较普通的PVC材质，做工粗糙，表面有纹路，投影效果不如白玻纤清晰9，广东坚果除了菲涅尔硬屏、黑栅抗光幕这类中高端幕布售价在4999到6999元之外，像常见的电动幕、支架幕、手拉幕等产品的售价均在500元以内，性价比高追求画质的消费者，还是选择中高端的黑栅抗光幕PJM101-B01、菲涅尔硬屏PJM102-F01比较妥当10，四川极米价位在5999到7999元的产品以抗光幕为主，幕面平整，有效降低环境光对投影画面的影响，出来的色彩艳丽，观感舒适。其中，适配超短焦投影仪的菲涅尔抗光硬幕的幕面厚度仅有12mm，搭配超窄金属边框，能提升家装的颜值，" }, { "title": "汽车知识系列3:玻璃水选购", "url": "/posts/car-3/", "categories": "汽车知识系列", "tags": "汽车知识系列", "date": "2024-06-03 07:00:00 +0800", "snippet": "有哪些知名品牌一是美国龟牌，它是世界上最大的汽车美容养护用品制造商，硬壳系列是龟牌的经典产品线，G-4082是非浓缩型玻璃水，冰点为-25°C，大部分地区冬季可正常使用，严寒地区可选择-42°C款，防冻性能更好。一般20元以内，G-4081是硬壳系列的一款非浓缩夏季玻璃水，无防冻性能。单瓶约15元二是美国百适通，它的AS257款不错，不含甲醇此外还有德国索纳克斯，日本速特99，中国的蓝星，固特威，车仆等品牌。玻璃水里面如果添加了甲醇会有刺激性气味，对人体有害，使用时需要特别注意。另外乙二醇成分，对雨刷胶条有一定的养护效果，会提高润滑性。" }, { "title": "商品选购系列4:封窗，铝材与玻璃", "url": "/posts/shopping-4/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2024-06-03 06:40:00 +0800", "snippet": "1，重庆西南铝业西南铝业隶属于中铝集团的铝加工事业部2，辽宁忠旺集团3，山东南山铝业4，广东兴发铝材5，山东华建6，广东凤铝7，广东坚美8，广东豪美新材玻璃胶品牌：1，美国陶熙2，德国瓦克3，瑞士西卡4，德国汉高百得5，四川硅宝6，广东白云7，美国通用电气8，浙江金鼠9，福建三棵树玻璃品牌：1，广东南玻Low-E玻璃是一种表面镀膜的节能玻璃，在保证可见光高透过率的同时，对红外线的反射率极高，因此具有优异的隔热性能2，香港信义超过汽车玻璃龙头福耀玻璃，成为了当前中国营收最高的玻璃企业。通过将Low-E玻璃、钢化玻璃、夹层玻璃、彩釉玻璃等不同玻璃组合搭配，制成具备吸热、保温、遮阳、隔音、装饰等不同功能3，湖南旗滨旗滨的建筑玻璃也以节能玻璃为主要发展方向，涵盖镀膜玻璃、中空玻璃、钢化玻璃等品类。4，台湾台玻5，上海耀皮6，山东金晶已研发出可见光透过率接近92%的“至纯”系列超白玻璃，透光率比普通玻璃高约6%7，河南北玻2008年北玻为苹果上海旗舰店提供了高达12米的曲面钢化玻璃8，山东中航三鑫" }, { "title": "商品选购系列3:衣柜，板材与五金", "url": "/posts/shopping-3/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2024-06-03 06:30:00 +0800", "snippet": "板材很重要，板材由基材、饰面、封边组成，饰面、封边主要服务于外观，基材是决定使用性能的核心。主流基材可分为以下几类：刨花板、纤维板、胶合板，还有相对小众的指接板、细木工板。商家宣传时常提到的烤漆板、生态板、吸塑板等五花八门的名字，基本都是由这些基材经过不同的饰面加工而成。饰面有三聚氰胺饰面、PVC覆膜饰面、烤漆饰面、PET饰面、实木贴皮饰面等激光封边最好，PUR封边性价比高，EVA封边尽量不要考虑。万华mdi胶比较好以下几家生态板不错1，浙江兔宝宝在兔宝宝的众多板材系列中，生态TRUE感系列家具板表现不错，在用胶方面则使用了更加环保的MDI胶或大豆胶，达到降低有害物质释放的目的。2，浙江莫干山3，浙江千年舟用胶和兔宝宝类似，以MDI胶和大豆胶为主，甲醛释放量能达到E0级别。定制衣柜品牌品牌门店主要分为两大类，一是最常见的经销商加盟店，二是品牌直营店。还有销售经理的负责程度。此外还要问问灯带，门的拉直器是否需要收费。玻璃门多少钱。抽屉怎么收费。衣柜是否设计一门到顶，衣柜圆角设计是否收费，衣柜背板有多厚，是不是卡槽式安装与墙壁有没有间距。1，广东欧派毫无疑问的领头羊企业，它的市值断崖式领先，甚至远超第2名至第9名的市值总和欧派在2020年推出了无醛爱芯板，本质上是三聚氰胺贴面的刨花板，无醛的秘诀是使用无甲醛添加的MDI胶水无醛爱芯板基材不仅获得了加州空气资源委员会（CARB）的NAF无醛豁免认证，还获得美国环保署（EPA）NAF无醛豁免认证，是定制家居行业中少数获得NAF双认证的环保板材。2021年欧派推出升级版“净醛抗菌爱芯板”，这款板材不仅甲醛含量低，在特定实验条件下还具备净醛、防霉抗菌的功效，但在非实验室环境，其具体效果难以落实，需要消费者理性看待。铰链、导轨等重要五金部件均采用百隆、海蒂诗等顶级五金品牌卡槽式背板，无需现场打钉，安装更加便捷，卡槽式背板略微内嵌，不直接接触墙体，能有效防止墙体湿气侵蚀衣柜必要时可提出更换设计师。提供柜体5年，功能配件1年的保修期将板材环保等级、五金件型号品牌、安装质量、质保、货期以及违约赔偿等信息写入合同订金可以退，定金一般不退胡歌代言2，广东索菲亚衣柜大多选用大亚和露水河等大品牌出品的颗粒板或中纤板，甲醛释放量可达国标E1等级以上，质量有保证。若对环保有较高的要求，索菲亚还提供“康纯板”供消费者选购，康纯板本质上还是刨花板，在制造过程中使用无醛的MDI胶，从源头上减少板材的甲醛释放五金件对使用体验和衣柜寿命影响较大，这笔预算并不建议节省中务必要签署合同，内容应包括板材型号规格、环保要求、五金件品牌、货期、质保年限以及违约赔偿条例等等3，安徽志邦4，广东好莱客它的原态板并不神秘，本质上还是颗粒板，只是使用了无醛的MDI粘合剂代替传统的粘合剂，虽然原态板生产过程实现无醛添加，但成品板材并非零甲醛，因为板材的饰面和封边会释放少量的有机污染物5，江苏我乐家居6，福建金牌基材和大多数企业一样，采用刨花板，配合无醛添加的MDI粘合剂7，广东尚品宅配其衣柜板材选用威华中纤板或颗粒板8，广东皮阿诺“松冠板”，基材采用定向结构刨花板，握钉力和抗弯能力更强，使用无醛的MDI粘合剂粘合，更环保。除了松冠板之外，皮阿诺的衣柜还有普通的密度板可选，甲醛释放量均达到国标E1等级，日常使用是达标的。9，广东顶固五金被誉为家具的灵魂，E0级中纤板或密度板10，广东百得胜百得胜入门级衣柜已是E0级颗粒板或中纤板。对于甲醛指标有苛刻要求的消费者，可重点关注百得胜旗下的“无醛实木多层板”，这类板材使用无醛胶水和无醛饰面，11，广东诗尼曼衣柜板材以中纤板和颗粒板为主，甲醛释放量达到国标E1级，基本可以在室内放心使用，这种板材也是目前一二线品牌的主流原料还提供游离甲醛释放量极低的禾香板供消费者选购，禾香板由万华公司出品，使用秸秆纤维和MDI无醛胶水压制而成12，广东玛格对环保要求较高的话，可关注玛格推出的颗粒免漆板和“林醛板”，这两种板材本质上都是颗粒板13，广东科凡科凡使用的板材为E0级颗粒板14，广东劳卡定制衣柜行业其实门槛并不高，生产设备和原料几乎都是上游供应商提供，只要严选板材和五金件，积极引进高精度生产设备，生产出中等层次的定制衣柜并非难事原木微粒板”是劳卡的衣柜板材，本质上是颗粒板，近年来“无醛”概念盛行，行业内大量企业开始使用MDI粘合剂，劳卡也不落后，推出无醛添加颗粒板，命名为“清新板15，香港红苹果16，广东联邦高登联邦高登主要的合作伙伴为东泰DTC，东泰DTC出品的五金件制作精良，一直是国产五金品牌中的质量担当，基本不会成为衣柜寿命生涯中的短板，但比起百隆和海蒂诗仍有一些差距，主要体现在长时间开合后的整体顺滑度。五金相关铰链（合页）上：铰链又称合页，但为了方便区分，民间习惯将用于大门的书页形连接构件称为合页，将用于衣橱柜的烟斗形连接构件称为铰链1，德国海蒂诗全球铰链市场的龙头，目前只在海蒂诗和百隆之间有争议。分为Sensys灵动阻尼铰链，约32元一个、SlideOn隐藏式插尾铰链和Intermat快装脱卸铰链三大系列。灵动阻尼铰链既是高端旗舰，也是海蒂诗的销量之王2，奥地利百隆铰链分类方法和海蒂诗一致，共有CLIP top BLUMOTION 快装集成阻尼系列，二段力铰链、CLIP top快装系列和最基础的MODUL 插装铰链三个主系列，销量同样由阻尼铰链主导。3，广东东泰DTC铰链有PIVOT-STAR一扇牵、PIVOT-PRO柔顺牵和普通铰链三种4，意大利萨郦奇抽屉滑轨前三也跟上面一样钢珠式结构滑轨在承重能力和顺滑程度上都远胜滚轮式结构，板材相关常见的衣柜板材类型分为颗粒板、多层实木板、大芯板、生态板、指接板颗粒板（刨花板）将木材或者一些边材打碎，加入胶黏剂压制而成。优点：成本低，好加工，较好的防变形和防开裂作用，握钉力不错。缺点：如果加入的胶不好，环保性能堪忧，同时防潮能力较弱；密度板是一种由粉末状木材和胶混合而成的板材。不环保欧松板，一般是使用木材的薄片，也称之为刨花片，然后加上一定的比例的胶，之后使用高温压制制造而成的板材。购买时要让他们提供检测报告多层实木板：其实是胶合板，通过将木头切成薄片，通过胶粘剂叠在一起，层数一般都是单数优点：结构稳定变形小，防潮防湿，内在质量好、平整度好重量轻，容易搬动，还能二次拆装，衣柜板材选材很不错。缺点：表面损坏了不可以修复，而且长时间日晒容易变形，尽量放在阴凉位置。工艺要求很高，步骤多碰到不好的胶黏剂，环保性能并不比颗粒板好。大芯板又称为细木工板，是一种特殊的胶合板，两片单板中间用木方条拼接出来的，可以算得上是厚板材，木工打柜子建议选择这种。优点：强度非常高，握钉力好，有很好的隔音和绝热效果，含水率不高。建议选择E1级的板材表面2层单板厚度不能低于3mm缺点：内部普遍存在空洞，由于内部使用了胶，环保性也要考虑。很怕潮湿，不建议放在厨房和卫生间。内部木条拼接是纵向的，抗弯强度较差，长时间用会变形。板芯的宽度不能超过厚度的2.5倍，否则容易变形；价格也贵。生态板又叫“免漆板”和“三聚氰胺板”，一般用松木、杨木、杉木、桉木等速生材，中间的基材一般用大芯板和多层板，也有用颗粒板的，表面贴上一层仿制木材纹理纸。优点：用途很广，主要用在家具、橱柜、衣柜、卫浴柜，表面色彩和花纹非常多。由于不用刷漆，减少了油漆的工序，环保性能不错。容易加工不容易变色，加工后能形成个性化非常强的家具，受力能力不错，买得好10年不变形，不吃亏！缺点：表面贴的木纹纸，破了不能修补；整块板胶水痕迹明显，看起来档次比较低，封边的时候容易崩边，一般只能采用直封边。5、指接板属于环保板材，由很多木块锯齿口拼接起来，像两只手交叉相握，不用粘贴表层板，应用广泛。优点：环保性能优越，纹理自然，板材多数是杉木，属于实木板。想要防虫，还可以选择樟木指接板，不用买樟脑丸了。有良好的吸湿和透气性，用胶比大芯板小，表面可以直接封漆，相对而言更环保，而且价格非常优惠。缺点：容易变形、开裂，不能横向受力，不太适合做衣柜，只能做柜子两边的侧板。变形力：大芯板=生态板＜多层实木板＜颗粒板＜指接板强度：大芯板=生态板＞多层实木板＞颗粒板＞指接板握钉力：大芯板=生态板＞颗粒板＞多层实木板＞指接板美观：生态板＞指接板＞多层实木＞大芯板＞颗粒板价格：生态板＞多层实木＞大芯板＞颗粒板＞指接板环保：指接板＞大芯板＞生态板＞多层实木＞颗粒板不过现在大多定制衣柜都用的是颗粒板，只是各家名字不一样。" }, { "title": "商品选购系列2:家具品牌", "url": "/posts/shopping-2/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2024-06-01 06:30:00 +0800", "snippet": "怎么选，先看喜欢什么风格，比如北欧风，简洁明亮具有设计感，轻奢风讲究精致和质感国内品牌1，浙江顾家家居成立41年，不但在国内家居市场遥遥领先，还通过收购欧美家具品牌，布局国外家具市场，如意大利Natuzzi，德国ROLFBENZ等。以软体家具闻名沙发是其最主要的业务，顾家以此起家。皮料从美国、澳大利亚、加拿大等进口，专门设置了实验室，对皮料色牢度、抗撕裂强度、感光度等进行专业测试，使沙发拥有更长的使用寿命。坐包和靠垫的海绵则来自亚洲最大的海绵生产商“东亚海绵”除此之外，皮床、布艺床等软床是顾家第二大热销品类。2，广东联邦家私专注于床、柜架桌几等实木家具除了实木家具外，联邦另有旗下联邦米尼等多个子品牌，涵盖软体沙发、床垫、全屋定制等品类。3，四川全友实木的质感固然让人喜欢，但价格较高。而人造板价格更便宜，还能通过不同的实木贴皮给家具带来原木风质感，因此，板式家具凭借高性价比的优势占有一定的市场。线上销量仅次于电商家具龙头林氏家居，人造板的环保性是板式家具的痛点之一，全友与国际顶级供应商合作，采用拜耳环保水性漆，在生产制作初期就实现了对安全环保的牢牢把控，板材能达到E0级及以上环保标准。不同于顾家、联邦各有专攻，全友生产全品类家具，4，新疆美克美家最先打入美国松木家具市场2016年推出实木家具成品定制品牌恣在家，主打性价比，美克美家的产品是经典美式风格5，北京曲美6，广东林氏家居家具电商销量大王当属林氏家居。7，上海源氏木语和林氏木业类似，源氏木语是一个成长于电商平台的实木家具品牌。一张实木床，售价甚至不到2000元。8，香港红苹果9，黑龙江光明家具光明专注于实木家具，精选FAS级进口木材，稀世阁、光明印橡、光明致尚分别代表了光明三个档位的家具。稀世阁用料和款式最为高档，采用红斑马木，光明印橡使用FAS级红橡木为主，光明致尚则系列比较老气，榆木的材质也较前两种稍差。10，香港皇朝家私品牌的定位高端还有几个比较高端的是1，北京锐驰2，山东德驰与锐驰相比，德驰的定位稍低一点，价格也更实惠。不过德驰旗下有四大子品牌，高端线Felice（菲利奇）就对标锐驰，此外还有偏古典风的BOB（宝泊）、以及MAX（麦可斯）。其中MAX（麦可斯）主打年轻市场3，HC28相比起德驰和锐驰，HC28的规模相对小一些，还有就是上面说的新疆美克美家。国外品牌1，意大利B&amp;amp;B世界公认的现代室内装饰领域领导者，Louis Vuitton、Bentley等大牌的店铺装饰均由B&amp;amp;B Italia完成。2，意大利Cassina意大利国宝级家具品牌，早在1760年，其前身就从事教堂木器家具的制作，1927年，Cassina公司正式成立。Cassina目前有LC Collection、I Maestri、I Contemporanei和Simon等四个主要的产品系列，其中最经典的莫过于LC Collection系列。。而I Maestri系列是其“大师系列”，云集了二十世纪最伟大设计师的重要经典作品；I Contemporanei为“现代大师系列”，Simon系列则是收购Simon品牌而来3，美国Baker诞生于1890年，美国白宫御用品牌，一件书桌柜即使卖到80万也不足为奇4，意大利Kartell5，丹麦HAY6，美国爱室丽美国第一大家具零售商，以美式风格为主，最为严格的环保标准，同时由于拥有集约化的优势，一套餐桌椅约2700元、三人皮沙发不到6000元即可入手，是性价比较高的美式家具品牌。7，日本宜得利日本第三大零售商，在日本的销售额高出宜家近7倍，被誉为“精华版的宜家”和“平价版的无印良品”，自主开发的商品约占80%。他家的德约克sk青皮，电动沙发我比较喜欢。2个电动位平时13990，加一个中间位3999，618一起可以14800左右搞定8，瑞典宜家在过去的5年中，宜家牢牢占据着全球家具行业第一的宝座。9，日本MUJI无印良品创立于1980年，无印良品的REAL FURNITURE系列家具备受推崇，严选橡木等优质木材作为原材料。不过REAL FURNITURE系列产品种类较少，价格较高，椅子约1900元起售。此外还有一些设计品牌也不错：1，北京造作2，北京梵几实木家具，家具颇有中西结合的韵味，整体风格是在北欧家具基础上的延伸，但许多节点都采用了中国传统的榫卯结构，同时格外注重圆角和弧度等的细节打磨，比起木墨、木智工坊等其他实木家具品牌，梵几的禅意更浓，细节处颇显东方韵味与哲思。3，上海吱音产品价格大多在260-3000元之间不等4，北京失物招领大多都是实木制作5，浙江木墨6，上海宜氧7，浙江二黑木作8，北京厌式房间9，浙江PIY10，浙江木智工坊此外还有几个比较高端的设计品牌：1，上海半木其产品多选取美国FAS级的黑胡桃木和白蜡木2，上海多少moreless3，上海璞素家具多选用红木为主材，包括缅甸花梨木、紫光檀等4，北京素元多选用北美FAS级的黑胡桃木、樱桃木和枫木。还有一个上面提到的梵几，定位消费级别的高端木作最后了解下红木家具1，江苏永琦紫檀品牌主营小叶紫檀（学名：檀香紫檀）和紫光檀（学名：东非黑黄檀）家具2，浙江中信红木3，山东巧夺天工4，北京太和木作“京作”家具技艺代表品牌，“京作”与“广作”“苏作”并称为中国硬木家具的三大流派5，浙江年年红它的金典事业部用材主要以大红酸枝、红酸枝、大叶紫檀、小叶紫檀、缅甸花梨木等高档红木。6，浙江明堂用材主要为红酸枝、大红酸枝、小叶紫檀、紫光檀、缅甸花梨木等7，广东国寿红木专注于制作以大果紫檀为主的缅甸花梨木家具。8，广东伍氏兴隆9，广东红古轩坐落在全国最大的红木家具生产基地中山大涌10，广东友联为家，简称友联" }, { "title": "windows软件推荐系列6:安卓模拟器", "url": "/posts/windows-softs-6/", "categories": "windows软件推荐", "tags": "windows软件推荐", "date": "2024-05-30 06:00:00 +0800", "snippet": "BlueStacks https://www.bluestacks.com/tw/index.html网易 MuMu https://mumu.163.com/mac/index.html夜神 广告较多 https://www.yeshen.com/参考https://blog.csdn.net/zz00008888/article/details/122604233" }, { "title": "商品选购系列1:激光测距仪", "url": "/posts/shopping-1/", "categories": "商品选购系列", "tags": "商品选购系列", "date": "2024-05-28 06:30:00 +0800", "snippet": "蓝牙功能可以将数据传到手机知户型APP绘制平面及3D户型图1，瑞士徕卡徕卡测量系统Leica Geosystems已有近200年的历史，1993年，徕卡研制出世界上第一台手持激光测距仪。徕卡的手持产品中，从入门到高配有DISTO one、D1、D110、D2和DISTOTM×3可选，450到2500元不等，不推荐±2mm属于行业平均水平，但在徕卡只是入门。DISTO one和D1精度达到±2mm，功能也是最简单的，只能测距，最大测程分别为20m和40m。其中DISTO one是徕卡室内手持产品中唯一没有蓝牙和存储功能的，必须手记。D110算是D1的性能进阶，精度达±1.5mm，最大测程60m，多了面积计算功能，价格来到千元，推荐度一般。三款都只能以仪器底部为基准测量距离，不可调节。D2则能实现前后双基准测量，功能还倍增，可以测量距离、最大/小值、面积、体积及进行勾股、加减计算，蓝牙也有了，最大测距100米，相当均衡，价格比D110高约500元。DISTO X3最大测程150m，精度做到了±1mm，是徕卡室内手持测距仪的顶配。额外购买DST360适配器，还能测空间任意两点的距离。2，喜利得成立于1941年，它的手持激光测距仪性能好，±1.5mm这一行业高精度，在喜利得产品中只是标配，但其高价位也让很多消费者望而却步，PD-S、PD-I和PD-E价格分别在900、1900、6300元左右。不推荐PD-S最大测程60m，可测量长度及面积，但只可以记录2个最后的测量值。PD-I是三款中唯一一个可以连接蓝牙的，对比PD-S，它的最大测程增大到100m，增加了角度测量、体积及加减计算功能。PD-E具备PD-I的计算功能，最大测程达到200m，测量精度做到了±1mm3，德国博世是全球第一大汽车技术供应商，博世的室内激光测距仪有GLM和GLMC两个系列，规格从25m到150m的都有。除了GLM系列中测程50m以下的几款，精度为±2mm，其他产品精度都做到了±1.5mm。GLMC系列可以通过蓝牙连接，将测量数据传送到手机、平板设备。博世旗舰店有GLM30、GLM4000、GLM500、GLM50-23G几款在售，价格在300到900元左右。不推荐，比起徕卡和喜利得，博世的价格算是比较亲民的了。测程30m的GLM30只能测长度，且没有储存数据的功能，需要人工记录。GLM 4000测程增大到40m，可以进行面积、体积以及勾股计算，还增加了储存最后10组测量数据的功能测程50m的GLM 500精度提高到了±1.5mm，可以储存20组测量数据，除测距外还有面积、体积、勾股计算功能。同样测程的GLM50-23G防护等级做到了IP65。4，广东深达威创立于2010年，深达威是中国少有的测距仪精度达到了±1.5mm的品牌之一，同时它的产品规格功能也比较齐全，除迷你款外的产品都能进行长度、面积、体积、勾股、加减、最大/小值测量，整体来说性价比高。SW-D系列包括SW-DA语音款和SW-DB蓝牙款两个型号，都能储存最后30组数据，此外还有语音播报功能，不看屏幕也能实时得知数据，最大测程有50m、70m、100m三个规格，价格都不超过350元。还可以，不同的是，SW-DB比SW-DA多了蓝牙连接功能，可将测量数据实时传输至手机并生成平面、3D户型图导出。推荐。sw-db，拼多多156元SW-B系列迷你测距仪机身只有10cm，大概掌心的长度，非常小巧。它的功能倒不少，能进行长度、面积、体积及勾股测量。有SW-B精准版和SW-BT蓝牙版两款可选，测程都有40、50、60m的规格，蓝牙版价格比精准版高30元左右，整个系列产品单价都不超过300元。5，浙江德力西德力西测距仪的测量精度高，部分产品达到了±1.5mm，DB系列精度达到±1.5mm，可以储存30组数据，可实现长度、面积、体积、最大/小值测量及勾股、加减计算。这系列最大测程包括50m、70m、100m和120m几个规格，价格在110到230元之间。DE50充电语音款在DB系列的基础上增加了语音播报功能，价格与DB系列相差不大。德力西本没有可连蓝牙的产品，2021年11月上新的DBS系列弥补了其产品线缺陷。这款除可连蓝牙外，还具备齐全的计算功能，也能语音播报。有50m、70m、100m三个测程可选，价格在230到290元之间。不过它的精度不如DB和DE系列，只有±2mm。不推荐6，广东迈测迈测测距仪产品很丰富，且功能齐全，除迷你款外都可以测量长度、面积、体积、最大/小值及进行加减、勾股计算，且可储存20组数据。测量精度±2mm，是行业内不错的水平。×5精准款系列最大测程有40m、50m、60m、80m、100m、120m可选择，价格都在200元以内，经济实惠。还可以，×5语音充电版精度增加了语音播报功能S2系列具有蓝牙连接功能，连接后可通过知户型APP绘制平面及3D户型图。市面上普遍的激光测距仪使用的是红光，S2系列中的语音蓝牙款激光为绿光，亮度比红光更高，在户外更易看清。这款最大测程有50m、70m和100m，价格在400元到600元左右。还行，不过价格有点贵。R2除了测量直线距离，还可进行曲面测量。这款也有语音播报功能，最大测程有40m、60m、80m和100m四个规格，价格在299到599元之间。不推荐。7，江苏莱赛莱赛室内手持激光测距仪精度都是±2mm，暂没有可连接蓝牙的产品。产品共有LS203-P、LS203、LSG203三款。不推荐LS203-40P和LS203-60P测程范围分别为40m和60m，40P可实现长度、面积、体积及加减计算，但不能储存测量数据，60P在40P的功能基础外还能进行勾股计算，并且可以储存最后10组测量数据。这两款价格分别为110元和140元左右。LS203系列、LSG203系列计算功能、可储存数据和LS203-60P一样，只是测程不一样，LS203系列有80m和100m两个最大测程，LSG203系列则有40m、60m、80m三个测程规格。其中LSG203系列较特别，它的激光是绿光，比红光更清晰。8，香港优利德优利德测距仪产品规格功能齐全，测量精度达到±2mm，产品价格实惠，性价比不错。LM系列有40m、50m、60m、80m、100m多个测程规格可选，价格在140到290元之间不等。都可进行长度、面积、体积、最大/小值测量及勾股、加减计算，可储存20组测量数据。LM50V系列在LM系列的基础上增加了语音播报功能，测程50m、70m和100m的LM50V、LM70V、LM100V价格在170到330元之间不等。有连接蓝牙功能需求的可以选择LM40B系列，测量的数据可以实时传输到手机知户型APP，方便记录及进行简易测绘。LM40B、LM50B、LM60B的最大测程分别为40m、50m和60m，价格均不超过300元。推荐。9，美国世达是美国艾沛克斯APEX工具集团在中国的子公司，世达产品的测量精度不一，测程30m的62709精度只做到±3mm，但其他产品精度都达到±2mm以上。05202迷你测距仪只有28g，非常轻巧，携带方便。虽然它体型小，但也能实现30m范围内的测量，而且精度也不错，达到了±2mm。不过它的功能比较少，只能测距。62712和62713测量精度也达到±2mm，测程比起迷你款也增大了，分别有60m和100m，还可以储存20组数据。除测距外，可实现最大/小值，面积、体积、勾股及加减计算功能。这两个的价格分别在470和650元左右。62704和62705计算功能和可储存数据与62712系列相同，但这系列精度更高，达到±1.5mm，最大测程也不同，62704和62705分别可测60m和80m，价格在580元和680元左右。不推荐10，北京小米不推荐，不想像手环一样，屏幕越来越暗，杜克DUKA和⼩猴HOTO均为小米生态链中的成员，杜克和小猴机身都轻巧迷你，但性能却不差，两款的精度都达到了±2mm。杜克LS-P激光测距仪只有28g重，小巧易携带。虽然外形小巧，但最大测程可达40m，而且功能也不少，能够实现前后基准测量、长度、面积、体积、勾股、最大/最小值及角度的测量。黑灰配色使其外观简约中带有科技感，获得19年德国IF和红点两项国际设计奖。价格也不高，单价在150元左右。小猴HOTO激光测距仪只有36g重，也是非常轻巧。它最大的特点是其专利“小黄圈”设计，方便手持，使用体验感好。小猴的最大测程比杜克短，只有30m，但也能满足家中室内测量的需求。跟杜克一样也可以前后双基准测量，但只能测距，如需计算，可通过蓝牙连接利用米家APP记录测量数据，在手机进行平面图测绘。小猴比起杜克价格稍高，单价190元左右。总体而言，杜克和小猴两款激光测距仪都轻巧易携带，外型设计时尚，精度也能达到行业分水岭水准。杜克的计算功能较全面，而小猴能实现蓝牙连接，可以说各有优势。京东旗舰店迈测s2https://u.jd.com/ksrOZxd 296元，推荐，送知户型黄金vip终身使用。绘制功能全部免费。拼多多只要246元和京东自营优利德https://u.jd.com/kirGzZC 213元深达威sw-db 拼多多156元sw-50bg既可以室外也可以支持知户型APP，约286元" }, { "title": "AI系列8:ChatGPT即将入驻iPhone", "url": "/posts/ai-8/", "categories": "AI系列", "tags": "AI系列", "date": "2024-05-28 06:00:00 +0800", "snippet": "苹果计划将ChatGPT这一热门聊天机器人功能融入即将面世的iOS 18操作系统中，不过苹果并不想“将所有鸡蛋放在一个篮子里”，该公司仍在与谷歌进行一系列谈判，试图将 Gemini 作为另一种可选的方案内置在 iOS 系统中。同时，苹果的语音助手Siri也将借助ChatGPT的能力获得显著增强。ChatGPT入驻iPhone，有望加速智能语音助理和移动AI应用的普及，为数亿苹果用户带来全新的人机交互方式。" }, { "title": "AI系列7:HeyGen介绍", "url": "/posts/ai-7/", "categories": "AI系列", "tags": "AI系列", "date": "2024-05-27 06:00:00 +0800", "snippet": "HeyGen背后的公司是国内的一家初创公司——诗云科技，创始人Joshua Xu曾在Snapchat担任工程师；数字人创建是HeyGen主推的功能；能让特朗普开口说中文，让郭德纲开口飙英文用户只需要用上传一段2分钟的小视频，就能制作一个和真人一样的数字人，即使是像手势、面容和口型这种“细微肢体语言”也能调整。两位创始人是徐卓和梁望，他们都毕业于同济大学，后来又一同前往卡内基梅隆大学攻读硕士学位。" }, { "title": "git系列7:服务器搭建", "url": "/posts/git-7/", "categories": "git系列", "tags": "git系列", "date": "2024-05-22 06:00:00 +0800", "snippet": "本地服务器git init --bare star.gitcd star.gitpwd/c/Users/elesos/laravel_code/aa/star.git然后git clone /c/Users/elesos/laravel_code/aa/star.git在Linux上搭建git服务器后面注释部分为Ubuntu平台yum install git #apt install git创建一个git用户，用来运行git服务useradd git #adduser gitpasswd git先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：git init --bare sample.git #Git会创建一个裸仓库，裸仓库没有工作区，并且服务器上的Git仓库通常都以.git结尾。chown -R git:git sample.git下面将你的id_rsa.pub上传到git服务器，然后用cat命令将内容拷贝到授权文件authorized_keys中。su git 如果.ssh目录不存在，可以运行ssh-keygen -t rsa -C “yourname”touch /home/git/.ssh/authorized_keys #注意authorized_keys文件权限为gitcat id_ras.pub &amp;gt;&amp;gt; authorized_keys #注意single &#39;&amp;gt;&#39; will overwrite all the contents of the second file you specify. A double &#39;&amp;gt;&#39; will append it。If you want to add others to your access list, they simply need to give you their id_rsa.pub key and you append it to the authorized keys file.一行一个打开RSA认证vim /etc/ssh/sshd_configRSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keysservice sshd restart现在，可以通过git clone命令克隆远程仓库了：git clone git@server:/srv/sample.gitgit clone git@192.168.8.34:/data/git/learngit.git如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，可以用Gitosis来管理公钥。管理权限有很多视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。这里不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。权限参考用户home目录755权限 rwx r-x r-x.ssh目录700权限 rwx — —authorized_keys 600权限 rx- — —参考https://github.com/elesos/progit/blob/master/zh/04-git-server/01-chapter4.markdown 有GitWeb的介绍https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BA-Git 在服务器上搭建Git" }, { "title": "git系列6:代码提交规范", "url": "/posts/git-6/", "categories": "git系列", "tags": "git系列", "date": "2024-05-16 06:00:00 +0800", "snippet": "提交时Commit message 包括三个部分：Header，Body 和 Footer。（一般只要Header部分）&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;// 空一行&amp;lt;body&amp;gt;// 空一行&amp;lt;footer&amp;gt;其中，Header 是必需的，Header里面：type（必需）、scope（可选）和subject（必需）type用于说明 commit 的类别，只允许使用下面8个标识。 feat：新功能（feature） fix：修补bug docs：文档（documentation） style： 格式（不影响代码运行的变动） refactor：重构（即不是新增功能，也不是修改bug的代码变动） test：增加测试 chore：构建过程或辅助工具的变动 revert: 如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟被撤销 Commit 的 完整Header。如： fix(控制层):修复 bug-1442 点击过检索框，再切换语言，检索框默认文字显示黑色revert:fix(控制层):修复 bug-1442 点击过检索框，再切换语言，检索框默认文字显示黑色scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同，比如使用模块名。win上使用TortoiseGit添加模板,创建文件git_commit.txt，内容如下：fix($scope): xxxx问题原因：xxx解决方法：xxx影响分析：xxx然后编辑.gitconfig文件，添加[commit] template = C:\\\\Users\\\\elesos\\\\git_commit.txtmac平台上可以使用sourceTree设置模板（在Commit tab页面设置）。sourceTree的win版本不支持设置参考https://www.ruanyifeng.com/blogimg/asset/2016/bg2016010604.pnghttps://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html欢迎评论交流" }, { "title": "git系列5:回车和换行", "url": "/posts/git-5/", "categories": "git系列", "tags": "git系列", "date": "2024-05-08 06:00:00 +0800", "snippet": "git经常提示 LF will be replaced by CRLF是什么原因Windows平台上： 使用回车（CR）和换行（LF）两个字符来结束一行，回车+换行(CR+LF)，即“\\r\\n”；Mac 和 Linux平台：只使用换行（LF）一个字符来结束一行，即“\\n”；许多 Windows 上的编辑器会悄悄把行尾的换行（LF）转换成回车（CR）和换行（LF），或在用户按下 Enter 键时，插入回车（CR）和换行（LF）两个字符。解决方法1(推荐)： Git 可以在你提交时自动地把回车（CR）和换行（LF）转换成换行（LF），而在检出代码时把换行（LF）转换成回车（CR）和换行（LF）。git config --global core.autocrlf true解决方法2：在提交时把回车和换行转换成换行，而在检出时不转换。git config --global core.autocrlf input解决方法3： 提交检出均不转换git config --global core.autocrlf false参考https://www.jianshu.com/p/450cd21b36a4欢迎评论交流" }, { "title": "排行榜系列4:新闻热点排行", "url": "/posts/rank-4/", "categories": "排行榜系列", "tags": "排行榜系列", "date": "2024-05-07 06:00:00 +0800", "snippet": "https://top.baidu.com/board?tab=realtime在页面右侧，还有民生榜和财经榜，以及本地的榜单，如长沙榜" }, { "title": "排行榜系列3:微信与头条热文排行", "url": "/posts/rank-3/", "categories": "排行榜系列", "tags": "排行榜系列", "date": "2024-04-29 06:00:00 +0800", "snippet": "http://www.gsdata.cn/rank/wxarc已关停" }, { "title": "汽车知识系列2:玻璃水介绍", "url": "/posts/car-2/", "categories": "汽车知识系列", "tags": "汽车知识系列", "date": "2024-04-06 06:00:00 +0800", "snippet": "首先我们看看玻璃水有几种？一般分为固体和液体玻璃水。常见的固体玻璃水为泡腾片，液体玻璃水则可分为浓缩型和非浓缩型，浓缩型需要兑水稀释，非浓缩型可直接使用。按照使用季节不同，可分为夏季玻璃水、冬季玻璃水和四季通用玻璃水。下面我们看看防冻玻璃水的冰点如何选？在亚热带地区通常不用考虑防冻性能，选择0°C的夏季玻璃水即可。在冬季气温通常低于0°C的地区，应该选择低于当地最低温度10°C以上的防冻玻璃水。挑选玻璃水看什么？玻璃水首先要看清洁效果和防冻性能，清洁效果需要查看成分中有没有添加除虫胶、去油膜等配方。防冻性能根据当地实际温度需要选择低于当地最低温度10°以上的防冻玻璃水，而无需追求最低温度。其次需要注意玻璃水的安全和防护性能。添加了缓蚀剂成分的玻璃水能更好地减缓材质腐蚀；乙二醇成分可以起到减少雨刮和玻璃表面摩擦力的效果；玻璃水的pH值最好在6.5—10.0，避免腐蚀汽车原件；建议选购知名品牌以防止劣质添加剂混入、偷工減料等问题，同时可确保防冻性能达到标注冰点。下面我们看看劣质玻璃水有什么危害？劣质玻璃水会有沉淀物、变色、变味等表现，沉淀物较多容易堵塞喷口，玻璃水的气味也会顺着空调进风口进入驾驶室内，含有有害的气体甚至会威胁车主健康。劣质玻璃水的酒精配比有可能过高，不仅会损坏车漆，而且会腐蚀橡胶塑料件，导致雨刮变硬、刮不干净、玻璃刮花等问题。那乱用玻璃水替代品有哪些危害？有些车主不太看重汽车保养，认为前挡玻璃清洁很简单，通常使用洗洁精、洗涤剂、洗衣粉兑水来替代玻璃水，这些替代品都存在安全隐患。使用自来水或自制玻璃水不仅清洗效果差，容易堵塞玻璃水喷口，而且会导致汽车挡风玻璃腐蚀损坏、雨刷橡胶硬化说了这么多，那汽车玻璃水到底怎么加？首先需要弄清楚玻璃水在发动机舱内的位置，玻璃水和防冻液要区分开，防冻液是大壶，玻璃水是小壶。因为防冻液的盖子比较难拧开，玻璃水一般只要揭开盖子就能加，所以很少会加错，除非是故意的。不同品牌、不同型号、冰点不同的玻璃水一般来说可以混用，因为玻璃水的主要成分挺普通的，不会有什么大问题，但是冰点不同的玻璃水混用会改变冰点温度，需要注意一下。不同品牌玻璃水能不能混用？可以混用的。因为玻璃水的主要成分很普通，无非是水、乙二醇、缓蚀剂，混用不会有什么大问题，但是冰点不同的玻璃水混用会改变冰点温度，需要注意一下。喷不出来玻璃水是为啥玻璃水的水位过低，不能达到标准高度所以就喷不出来，只需将玻璃水加满即可。喷水口被灰尘堵死也可能喷不出水，建议疏通一下喷水口。由于气温条件影响，水壶或者管线可能被冻住，可以先充分热车后看看能不能喷水，不行再尝试其他解冻方法。还可能是保险烧坏、玻璃水电机损坏了汽车玻璃水被冻住怎么办？可以把车子开到太阳下晒，或者往玻璃水壶里加温水，又或者充分热机，利用发动机热量融化玻璃水。当玻璃水解冻之后，首先需要检查玻璃水壶、管道有没有被冻裂，有问题的话需要尽快维修。玻璃水也要换成防冻玻璃水。下一期介绍下玻璃水的品牌和选购技巧。" }, { "title": "AI系列6:ChatGPT支持免登录", "url": "/posts/ai-6/", "categories": "AI系列", "tags": "AI系列", "date": "2024-04-01 06:00:00 +0800", "snippet": "OpenAI 于 4 月1 日宣布，用户后续无需注册、登录 OpenAI 账号也可以使用 ChatGPT，不过未登录时只能使用 GPT-3.5。需要说明的是，并非所有地区的用户都可以免登录直接使用 ChatGPT。" }, { "title": "Qt官方示例解析系列13:Chart饼图", "url": "/posts/qt-example-13/", "categories": "Qt官方示例解析", "tags": "Qt官方示例解析", "date": "2024-03-22 06:00:00 +0800", "snippet": "展示custom view for model/view 框架使用了QAbstractItemModel 和 QAbstractItemViewQStandardItemModel是一个可以包含任意数据的通用模型使用QSplitter作为中心控件splitter-&amp;gt;setStretchFactor(0, 0);splitter-&amp;gt;setStretchFactor(1, 1);当分割窗口大小改变时，表格视图的大小保持不变，饼图视图的大小会相应改变。例如，如果有两个窗口小部件，它们的拉伸因子分别为1和2，那么当分割窗口的大小增加时，第一个窗口小部件的大小会增加1/3，第二个窗口小部件的大小会增加2/3。当分割窗口的大小减小时，第一个窗口小部件的大小会减小1/3，第二个窗口小部件的大小会减小2/3。 headerView-&amp;gt;setStretchLastSection(true); 设置表格视图的最后一列在表格视图被拉伸或压缩时，会自动改变其宽度以填充剩余的空间。 程序启动后，会loadFile加载文件。 从文件中读取数据，并将数据填充到一个QStandardItemModel对象中。 QColor(#99e600)主要代码是自定义实现了QAbstractItemView，此示例有点复杂。rubberBand-&amp;gt;setGeometry(QRect(origin, QSize()));大小是0。这意味着初始时rubberBand是不可见的然后调用QRect.normalized方法，确保矩形的宽度和高度都是正数。需要实现 moveCursor统计行数：model()-&amp;gt;rowCount(model()-&amp;gt;parent(index));edit函数只允许编辑第一列的项目。如果用户尝试编辑其他列的项目，那么这个函数会直接返回false，表示不处理编辑事件。dataChanged函数：重新计算有效项目的数量和总值isIndexHidden：是否隐藏，可以控制一列是否隐藏scrollContentsBy 滚动条拖动时会执行scrollTo 当编辑一个项的时候，会执行。主要功能是调整滚动条的位置，以确保给定的模型索引的项目在视口中可见。setSelection 根据一个矩形选择模型中的项目QPainterPath.toFillPolygon().toPolygon() 绘制路径转换为填充多边形，然后转换为多边形QRegion 支持+=操作paintEvent 绘制一个饼图视图,drawPieQBrush background = option.palette.base();QColor color = QColor(model()-&amp;gt;data(colorIndex, Qt::DecorationRole).toString());QItemSelectionModel-&amp;gt;isSelected(index) 如果index是被选择的模型索引itemDelegate()-&amp;gt;paint(&amp;amp;painter, option, labelIndex);欢迎评论交流" }, { "title": "一天一个Qt类系列4:QCache与QPixmapCache", "url": "/posts/qt-class-4/", "categories": "一天一个Qt类", "tags": "一天一个Qt类", "date": "2024-03-21 06:00:00 +0800", "snippet": "QCache&amp;lt;QString, QString&amp;gt; m_Cache;m_Cache.insert(mediaId, new QString()); //注意使用时要用指针为何不用QMap,是因为QCache可以获取到对象的所有权，并在必要时删除它们。QPixmapCache：它创建了一个内部的QCache object for caching the pixmaps" }, { "title": "windows软件推荐系列5:弱网模拟Network Emulator for Windows Toolkit", "url": "/posts/windows-softs-5/", "categories": "windows软件推荐", "tags": "windows软件推荐", "date": "2024-03-19 06:10:00 +0800", "snippet": "配置方法：Configuaration-New Filter，先点击 Add 后点击Close然后 Configuaration-New Link，在创建的Link上右键可以设置上行和下行。上行是指用户电脑向网络发送信息时的数据传输，Downstream Property（Outgoing Traffic）下行是指网络向用户电脑发送信息时的传输速率。UpStream Property（Incoming Traffic）" }, { "title": "windows软件推荐系列4:文件夹解锁工具IObit Unlocker", "url": "/posts/windows-softs-4/", "categories": "windows软件推荐", "tags": "windows软件推荐", "date": "2024-03-19 06:00:00 +0800", "snippet": "文件夹解锁工具解决文件夹无法删除的问题参考https://www.ghxi.com/iobitunlocker.html" }, { "title": "vs系列1:使用GitHub Copilot Chat", "url": "/posts/vs-1/", "categories": "vs系列", "tags": "vs系列", "date": "2024-03-11 06:00:00 +0800", "snippet": "需要Visual Studio 2022安装后需要重启下vs2种方式使用，一种是独立的窗口：View &amp;gt; GitHub Copilot Chat.另一种是inline chat窗口，可以按Alt+/打开，按Esc关闭窗口。参考https://learn.microsoft.com/en-us/visualstudio/ide/visual-studio-github-copilot-chat?view=vs-2022欢迎评论交流" }, { "title": "vscode系列2:Mac下调试Qt工程", "url": "/posts/vscode-2/", "categories": "vscode系列", "tags": "vscode系列", "date": "2024-03-08 06:20:00 +0800", "snippet": "Ninja编译器安装/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; 安装Homebrew命令行工具安装成功后执行命令 brew install ninja 安装ninja编译器配置vscode安装插件：C/C++, C/C++ extension pack , C/C++ Themescmake， cmake toolsQt tools(可以不安装)clangdcodeLLDB进入代码目录，执行mkdir .vscode &amp;amp;&amp;amp; open .vscode命令，然后将launch.json,settings.json文件拷贝到目录里面。下载配置文件欢迎评论交流" }, { "title": "shell系列1:if判断", "url": "/posts/shell-1/", "categories": "shell系列", "tags": "shell系列", "date": "2024-03-08 06:00:00 +0800", "snippet": "-d 判断目录是否存在-f 判断文件是否存在-e 也可以检查是否存在，包含目录和文件-r 是否可读-w 是否可写-x 是否可执行-o 或 || 表示或运算，-a与运算， ！非运算参考https://www.runoob.com/note/47027欢迎评论交流" }, { "title": "vscode系列1:调试C++代码", "url": "/posts/vscode-1/", "categories": "vscode系列", "tags": "vscode系列", "date": "2024-03-06 06:00:00 +0800", "snippet": "所用的.vscode/launch.json如下：{ &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;type&quot;: &quot;lldb&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;name&quot;: &quot;Debug&quot;, &quot;program&quot;: &quot;${command:cmake.launchTargetPath}&quot;, &quot;args&quot;: [&quot;arg1&quot;,&quot;arg2&quot;, &quot;arg3&quot;, &quot;arg4&quot;], &quot;cwd&quot;: &quot;${workspaceFolder}&quot;, &quot;environment&quot;: [ { &quot;name&quot;: &quot;PATH&quot;, &quot;value&quot;: &quot;${env:PATH}:${command:cmake.getLaunchTargetDirectory}&quot; } ], //&quot;terminal&quot;: &quot;external&quot;, //控制输出是单独在终端窗口显示还是在vscode里面显示 } ]}" }, { "title": "js系列6:图标库选型", "url": "/posts/js-6/", "categories": "js系列", "tags": "js系列", "date": "2024-03-06 04:30:00 +0800", "snippet": "在React开发中，选择合适且热门的图标库能极大提升开发效率和界面美观度7：🧩 一、综合性图标库（多风格+多场景） Lineicons 特点：20,000+矢量图标，支持10种风格（圆角/描边/双色调等），提供React/Vue/Figma多格式导出，企业级视觉规范。 适用场景：中后台系统、设计系统开发，Netflix/Salesforce等企业选用。 集成方式： npm i lineicons import { HomeIcon } from &#39;lineicons/react&#39;;&amp;lt;HomeIcon style= /&amp;gt; IconPark（字节跳动出品） 特点：2,000+图标，单一SVG源文件生成多主题（线框/填充/双色），支持按需引入，深度集成UnoCSS优化性能。 适用场景：B端应用、动态主题切换需求。 React集成： npm install @icon-park/react import { CheckOne } from &#39;@icon-park/react&#39;;&amp;lt;CheckOne theme=&quot;filled&quot; size={32} fill=&quot;#17bd08&quot; /&amp;gt; Heroicons 特点：288+简约线条图标，官方提供React/Vue组件，完美兼容Tailwind CSS，MIT协议免费商用。 适用场景：轻量级项目、Tailwind技术栈。 示例代码： npm install @heroicons/react import { BeakerIcon } from &#39;@heroicons/react/24/solid&#39;;&amp;lt;BeakerIcon className=&quot;h-6 w-6 text-blue-500&quot; /&amp;gt; ⚡ 二、高性能轻量方案 OpenTiny Icons 特点：纯CSS图标库，基于UnoCSS实现按需加载，290+单色图标+240+多色图标，体积仅数KB。 优势：无组件运行时开销，支持服务图标、状态图标等分类。 使用方式： /* 引入样式 */@import &quot;@opentiny/icons/style/base.css&quot;; &amp;lt;i class=&quot;ci-home&quot; style=&quot;font-size: 24px; color: #333;&quot;&amp;gt;&amp;lt;/i&amp;gt; React Native Vector Icons 特点：专为React Native设计，集成Material Icons/FontAwesome等10+图标集，支持多色彩与热更新。 适用场景：跨平台移动应用开发。 安装： npm install react-native-vector-icons import Ionicons from &#39;react-native-vector-icons/Ionicons&#39;;&amp;lt;Ionicons name=&quot;heart&quot; size={30} color=&quot;red&quot; /&amp;gt; 🎨 三、设计工具友好型 Iconify 特点：聚合150+开源图标集（如Material Design、Boxicons），超20万图标统一接口调用，支持Figma插件。 集成方案：通过@iconify/react包调用： import { Icon } from &#39;@iconify/react&#39;;&amp;lt;Icon icon=&quot;mdi:home&quot; fontSize={24} /&amp;gt; Boxicons 特点：1,600+极简SVG图标，Solid/Outline双样式，MIT协议免授权费。 适用场景：网页/APP快速原型开发。 📊 四、图标库关键对比| 图标库 | 图标数量 | 技术特点 | React集成友好度 | 推荐场景 ||———————|————–|—————————|———————|—————————-|| Lineicons | 20,000+ | 多风格切换，企业级规范 | ⭐⭐⭐⭐ | 大型后台管理系统 || IconPark | 2,000+ | 多主题变换，UnoCSS按需加载 | ⭐⭐⭐⭐⭐ | 动态主题B端应用 || Heroicons | 288+ | Tailwind原生兼容 | ⭐⭐⭐⭐ | Tailwind技术栈项目 || OpenTiny Icons | 500+ | 纯CSS零运行时开销 | ⭐⭐⭐ | 性能敏感型应用 || React Native Vector | 3,000+ | 移动端优化，多图标集支持 | ⭐⭐⭐⭐ | React Native跨平台开发 |💎 五、选型建议 企业级后台系统 → Lineicons（风格统一 + 海量图标） 动态主题需求 → IconPark（一图标多主题 + 字节生态） Tailwind项目 → Heroicons（无缝样式集成） 极致性能优化 → OpenTiny Icons（CSS驱动 + 按需加载） React Native应用 → React Native Vector Icons（移动端专属支持）" }, { "title": "C++系列18:三方库回调函数", "url": "/posts/cpp-18/", "categories": "C++系列", "tags": "C++系列", "date": "2024-03-05 06:00:00 +0800", "snippet": "有个sdk提供了头文件sdk.h，然后我们在代码里面用namespace Test{ #inclhude &quot;sdk.h&quot;}引入了。sdk.h里面有个函数Trigger(Survey_StrCb cb, void* contex);其中cb是typedef void (*Survey_StrCb)(const char* jsonStr, void* contex);我现在在一个类中调用上面的Triggerusing SurveyCallback = std::function&amp;lt;void(const char*)&amp;gt;;Survey::triggerSurvey(SurveyCallback&amp;amp; cb){auto ret = Test::Trigger([](const char* jsonStr, void* contex) { (*static_cast&amp;lt;SurveyCallback*&amp;gt;(contex))(jsonStr);//取出回调函数 }, &amp;amp;cb); //将回调函数作为上下文 }外面怎么调这个类方法：Survey::SurveyCallback aCb = [&amp;amp;oEventLoop, &amp;amp;timer, &amp;amp;oUrl](const char* jsonStr) { oUrl = &quot;https://www.baidu.com/&quot;;//解析jsonStr timer.stop(); oEventLoop.quit(); };pSurvey-&amp;gt;triggerSurvey(aCb);//注意aCb不能用auto接收，因为隐式转换不了。timer.start(5 * 1000);oEventLoop.exec(); Dialog dlg(oUrl, pParentWidget);dlg.exec();欢迎评论交流" }, { "title": "js系列5:状态管理库选型", "url": "/posts/js-5/", "categories": "js系列", "tags": "js系列", "date": "2024-03-05 04:30:00 +0800", "snippet": "React 的状态管理库选择直接影响应用的可维护性、性能和开发体验：🔧 一、为什么需要状态管理库？ 解决组件间状态共享难题 当多个组件需访问同一状态（如用户登录信息、主题设置）时，通过 props 逐层传递会引发“Props Drilling”问题，代码冗余且难以维护。 状态管理库提供 全局状态中心，组件可直接订阅所需数据，避免传递链。 统一异步操作与副作用管理 数据请求、缓存更新、错误处理等逻辑分散在组件中会导致重复代码。库如 React Query 封装了数据加载状态（isLoading/isError）、重试机制和缓存策略，减少样板代码。 优化渲染性能 默认的 React 状态更新会触发组件树重渲染。库如 Zustand、Jotai 通过 细粒度订阅 确保组件仅在其依赖的状态变更时更新，减少无效渲染。 提升可维护性与调试能力 集中式状态（如 Redux）支持 时间旅行调试，可回溯状态变更历史。 类型安全（Zustand/Jotai 的 TypeScript 支持）降低维护成本。 适应复杂应用架构 大型应用需处理状态持久化（如本地存储）、中间件扩展（日志/监控）、跨组件通信。状态库提供标准化方案，避免自行实现复杂逻辑。 🧩 二、2025 年热门状态管理库推荐1️⃣ Zustand 特点：轻量（1KB）、API 简洁（create + set）、无 Provider 包裹、内置 Immer 支持不可变更新。 适用场景：中小型项目快速开发，替代 Redux 减少样板代码。 示例代码： import { create } from &#39;zustand&#39;;const useStore = create((set) =&amp;gt; ({ count: 0, increment: () =&amp;gt; set(state =&amp;gt; ({ count: state.count + 1 })),}));// 组件中使用const { count, increment } = useStore(); 2️⃣ Redux + Redux Toolkit (RTK) 特点：严格的单向数据流、强大的中间件生态（Thunk/Saga）、时间旅行调试。 适用场景：大型企业级应用，需强类型约束和复杂异步流程。 优化：RTK 简化了 Redux 配置，减少 70% 样板代码。3️⃣ Jotai 特点：原子化状态（类似 Recoil）、无 Key 依赖、自动渲染优化（仅更新订阅原子）。 适用场景：需高性能局部状态更新的场景（如表单、实时协作）。 优势：2.4KB 体积，API 类 useState，学习成本低。4️⃣ MobX 特点：响应式编程（自动追踪依赖）、可变状态（类似 Vue）。 适用场景：偏好 OOP 风格的团队，或需细粒度响应式 UI（如数据看板）。5️⃣ React Query / TanStack Query 定位：专管服务器状态（请求、缓存、同步），非 UI 状态。 核心能力：自动缓存失效、分页/无限滚动、请求竞态处理。 示例： const { data, isLoading } = useQuery(&#39;todos&#39;, fetchTodoList); 📊 三、主流库关键对比（2025 年）| 库名 | 状态范式 | 包大小 | 学习曲线 | 适用场景 | 性能 ||—————-|—————|————|————–|—————————-|———-|| Zustand | 可变 + Immer | 1 KB | ⭐⭐ | 全类型项目、快速迭代 | 高 || Redux (RTK) | 不可变 | 7 KB | ⭐⭐⭐⭐ | 大型应用、强类型要求 | 中 || Jotai | 原子化 | 2.4 KB | ⭐⭐ | 高频局部更新、无 Provider | 极高 || MobX | 响应式可变 | 15 KB | ⭐⭐⭐ | 数据驱动 UI、OOP 偏好 | 中高 || React Query | 服务器状态 | 5 KB | ⭐⭐ | 数据请求密集型应用 | 高 | 💡 选型建议： 新手/中小项目：选 Zustand 或 Jotai，简单高效。 大型复杂应用：Redux Toolkit 或 MobX，生态完善。 数据请求为主：React Query + Zustand 组合管理服务端/客户端状态。 💎 总结状态管理库的核心价值是 解决状态共享、性能优化与维护复杂度。2025 年趋势是轻量化（Zustand/Jotai）与场景专业化（React Query 管服务端状态）。选型应综合考量团队习惯、项目规模与性能要求，避免过度设计。" }, { "title": "js系列4:图表库选型", "url": "/posts/js-4/", "categories": "js系列", "tags": "js系列", "date": "2024-03-04 04:30:00 +0800", "snippet": "📊 一、综合型图表库（通用性强，社区活跃） Recharts 核心优势：纯React+SVG构建，声明式API与React组件模型深度契合；支持30+图表类型，文档详尽，中文社区活跃。 Next.js适配：完美支持SSR/SSG，开箱即用。 数据：GitHub Stars 22K+，周npm下载量超50万。 适用场景：中后台系统、快速原型开发。 React-chartjs-2 核心优势：Chart.js的React封装，提供折线图、饼图等基础图表；轻量（gzip后&amp;lt;60KB），配置简单，适合初学者。 交互特性：内置悬停提示、动画过渡。 数据：GitHub Stars 5.3K+，周npm下载量35万+。 Nivo 核心优势：支持SVG/Canvas/HTML三端渲染，内置精美主题与交互动画；服务端渲染（SSR）优化突出。 特色：提供热力图、雷达图等复杂图表，可定制性极强。 数据：GitHub Stars 12K+，企业用户包括Spotify。 🏢 二、企业级解决方案（集成度高，适合复杂系统） Ant Design Charts 核心优势：Ant Design生态专属，提供高质量业务图表（如漏斗图、桑基图）；深度集成Antd组件，主题无缝匹配。 功能亮点：自动响应式、多语言支持。 适用场景：Antd项目、金融/政务后台。 BizCharts（阿里系） 核心优势：基于G2引擎，支持动态数据流与复杂交互（如拖拽缩放）；扩展性强，可组合低阶组件。 局限：文档以中文为主，国际化支持较弱。 数据：GitHub Stars 6.8K+，阿里内部广泛使用。 🎨 三、高定制化库（适合数据可视化专家） Visx（Airbnb出品） 核心优势：D3.js与React的融合，提供底层SVG组件；无预设样式，自由定制能力顶尖。 适用场景：需要独特设计的数据大屏、科研可视化。 学习曲线：需熟悉D3概念，适合进阶开发者。 Victory 核心优势：跨平台一致性（Web+React Native），API简洁；动画系统流畅，适合动态数据展示。 数据：GitHub Stars 11K+，Formidable Labs维护。 ⚡ 四、新兴高性能库（2025年热度攀升） React-ApexCharts 核心优势：封装ApexCharts，提供60+交互式图表（如股票K线图）；实时数据更新性能卓越，支持深色模式。 亮点：零配置响应式，移动端体验优秀。 数据：周npm下载量18万+，逐步取代ECharts React版。 📈 关键维度对比表| 库名 | 包体积 | 学习曲线 | SSR支持 | 特色场景 | 推荐指数 ||———————-|————–|————–|————-|———————-|————–|| Recharts | 中 (≈120KB) | 低 | ✅ 完善 | 通用后台 | ⭐⭐⭐⭐⭐ || React-chartjs-2 | 小 (≈60KB) | 低 | ✅ 良好 | 快速原型 | ⭐⭐⭐⭐ || Ant Design Charts | 中 (≈150KB) | 中 | ✅ 最佳 | Antd生态集成 | ⭐⭐⭐⭐⭐ || Visx | 按需引入 | 高 | ⚠️ 需配置 | 高度定制化 | ⭐⭐⭐⭐ || React-ApexCharts | 中 (≈130KB) | 中 | ✅ 完善 | 实时数据/金融图表 | ⭐⭐⭐⭐ |💎 选型建议 追求开发效率+React风格 → Recharts（平衡型首选） Ant Design项目 → Ant Design Charts（生态无缝集成） 需要复杂交互/定制设计 → Visx（D3自由度高）或 Nivo（开箱高级图表） 移动端+Web统一体验 → Victory（跨平台一致性） 实时金融数据展示 → React-ApexCharts（交互与性能兼得）那ECharts 和Chart.js与Recharts和React-chartjs-2有什么区别✅ 优先选择 ECharts 如果： 需展示复杂图表类型（地图/关系图/3D） 项目为数据大屏或分析型后台（如实时监控、BI系统） 要求强交互：拖拽分析、动态钻取、多图联动 团队可接受一定学习成本✅ 优先选择 Chart.js 如果： 开发轻量级应用（如活动页、移动端报表） 仅需基础图表（柱/线/饼）且追求极速集成 项目性能敏感（低端设备/弱网环境） 团队前端经验较浅，希望快速上手🧱 一、核心定位与架构差异| 库名 | 技术架构 | 渲染引擎 | React 集成方式 | 依赖关系 ||——————-|————————–|————|————————-|———————-|| ECharts | 独立 JS 图表库 | Canvas/SVG | 通过封装库（如 echarts-for-react） | 无 React 依赖，需外部封装 || Chart.js | 原生 JS 图表库 | Canvas | 需封装（如 react-chartjs-2） | 无 React 依赖 || Recharts | 原生 React 组件库 | SVG | 直接作为 React 组件使用 | 基于 D3 轻量模块 || react-chartjs-2 | Chart.js 的 React 封装 | Canvas | 直接作为 React 组件使用 | 依赖 Chart.js | 关键区别： Recharts 是纯 React 组件，声明式 API 与 React 开发模式最契合； ECharts 和 Chart.js 属于通用 JS 库，需封装才能融入 React 生命周期； react-chartjs-2 本质是 Chart.js 的语法糖，提供 React 组件接口但底层仍为 Canvas 渲染 。 " }, { "title": "js系列3:UI组件库选型", "url": "/posts/js-3/", "categories": "js系列", "tags": "js系列", "date": "2024-03-03 04:30:00 +0800", "snippet": "🧩 一、主流 React UI 组件库推荐与对比1. Ant Design 定位：企业级中后台系统解决方案 Next.js 适配：✅ 完美支持 SSR/SSG，内置动态主题切换（配合 next-themes） 核心优势： 提供 60+ 高质量组件（表格、表单、图表等），开箱即用 深度 TypeScript 支持，类型提示完整 国际化(i18n)方案成熟，支持 50+ 语言 缺点： 包体积较大（gzip 后约 350KB），需注意 Tree Shaking 设计风格偏“企业风”，定制需覆盖较多 Less 变量 2. MUI (Material UI) 定位：遵循 Google Material Design 的设计系统 Next.js 适配：✅ 官方提供 @mui/material-nextjs 插件优化 SSR 核心优势： 组件丰富度顶尖（80+），含复杂数据网格、日期选择器等 主题系统灵活，支持动态暗色/亮色模式 图标库完备（含 1,900+ Material Icons） 缺点： 默认 Material Design 风格明显，需深度定制避免“谷歌感” 组件 DOM 结构较深，可能影响渲染性能 3. Chakra UI 定位：模块化 + 强可访问性的轻量级库 Next.js 适配：✅ 原生支持 App Router，Server Component 友好 核心优势： 严格的 WAI-ARIA 可访问性标准支持 基于 Style Props 的原子化设计，定制成本极低 包体积小（gzip 后约 100KB），Tree Shaking 高效 缺点： 复杂组件（如表格）功能较 Ant Design/MUI 偏弱 设计风格偏简约，需额外设计资源支撑视觉复杂度 4. Shadcn UI 定位：基于 Tailwind CSS 的 Headless 组件库 Next.js 适配：✅ 深度整合 Tailwind + Next.js 最佳实践 核心优势： 非封装运行时组件，直接提供可复制粘贴的源码 极致轻量（0 运行时依赖），按需引入 主题定制通过 CSS 变量实现，适配任何设计系统 缺点： 需熟悉 Tailwind CSS 开发模式 无预构建组件，需自行组装交互逻辑 5. NextUI 定位：专为 Next.js 优化的现代组件库 Next.js 适配：✅ 官方为 Next.js 定制，支持 RSC + Suspense 核心优势： 内置深色模式 + 动态主题切换 组件动画流畅（基于 Framer Motion） 对 App Router 路由缓存有特殊优化 缺点： 较新，社区案例少于 Ant/MUI 复杂业务组件（如表单校验联动）需自行扩展 📊 二、关键维度对比速查表| 维度 | Ant Design | MUI | Chakra UI | Shadcn UI | NextUI ||——————|——————|—————–|—————–|—————–|—————–|| 流行度 | ⭐⭐⭐⭐⭐ | ⭐⭐⭐⭐⭐ | ⭐⭐⭐⭐ | ⭐⭐⭐⭐ | ⭐⭐⭐ || SSR 支持 | ✅ 完善 | ✅ 完善 | ✅ 优秀 | ✅ 优秀 | ✅ 最佳 || 包体积 | ⚠️ 较大 (350KB) | ⚠️ 中 (250KB) | ✅ 小 (100KB) | ✅ 极小 (0KB) | ✅ 小 (120KB) || 可定制性 | ⚠️ 需覆盖 Less | ✅ Theme 强大 | ✅ Style Props | ✅ 源码级自由 | ✅ CSS 变量 || 设计风格 | 企业级 | Material | 简约现代 | 无预设风格 | 未来感 || 适合场景 | 后台管理系统 | 跨平台产品 | 快速原型+Accessibility | 高度定制化项目 | Next.js 深度整合 |🎯 三、选型建议 开发企业级中后台系统 → Ant Design：组件最全、文档最完善，适合快速交付复杂界面 追求 Material Design 或跨平台一致性 → MUI：生态成熟，尤其适合 Android 优先场景 重视可访问性 + 轻量开发体验 → Chakra UI：模块化设计友好，适合中小型应用和 MVP 需要极致定制 + 技术可控性 → Shadcn UI：无黑盒逻辑，适合长期维护项目 专为 Next.js 优化 + 现代动效 → NextUI：App Router 集成度最高，适合新潮产品💎 总结在 React 18 + Next.js 14 技术栈下： 综合首选：Chakra UI（平衡型） 或 Ant Design（功能型） 轻量灵活：Shadcn UI + Tailwind CSS 专为 Next.js 而生：NextUI" }, { "title": "js系列2:前端框架选型", "url": "/posts/js-2/", "categories": "js系列", "tags": "js系列", "date": "2024-03-02 04:30:00 +0800", "snippet": "React、Vue、Svelte形成三足鼎立：🧱 一、核心框架选型：2025年三大主流1. React 19（Meta 维护） 核心特点： 灵活架构：只负责视图层，可自由搭配路由（React Router）、状态管理（Redux/Zustand） 并发渲染：React 19 的并发模式优化了高负载场景（如实时数据大屏），首屏速度提升可达40% 生态统治：npm周下载量超1800万，75%大型企业项目（如LinkedIn）采用React技术栈 适用场景：复杂交互的企业级应用（如金融后台、电商平台） 学习曲线：需掌握JSX、Hooks和状态管理，适合有经验的团队2. Vue 4（尤雨溪团队 + 阿里/腾讯共建） 核心特点： 渐进式开发：从简单组件到复杂SPA无缝扩展，单文件组件（SFC）开发效率高 性能突破：基于Wasm的V-Engine编译器，编译速度超React 2倍，内存占用降低40% 本土化优势：国内社区活跃，阿里/腾讯提供开箱即用的企业套件 适用场景：快速迭代的中后台系统（如CMS、管理面板） 学习曲线：文档清晰，1小时可上手，适合初创团队或全栈开发者3. Svelte（编译时框架新锐） 核心特点： 零运行时开销：组件编译为原生JS，10万行数据列表渲染速度比React快3倍，内存占用仅210MB 极简语法：接近原生HTML/CSS，内置状态管理，减少样板代码 前沿技术：支持服务端指令直出（Server Directives），适合全栈集成 适用场景：性能敏感的ToC端产品（如数据可视化、实时监控大屏） 学习曲线：语法直观，但调试编译后代码较复杂，生态仍在成长中🛠️ 2、开发体验与工具链| 维度 | React 19 | Vue 4 | Svelte ||—————-|—————————-|—————————|————————–|| 语法 | JSX（JavaScript + HTML） | 模板语法（类HTML） | 原生HTML + 逻辑块{#if} || 状态管理 | Redux/Zustand（需手动集成）| Vuex/Pinia（官方标准化） | 内置响应式（无需库） || 构建工具 | Next.js 15（SSR/SSG） | Vite 5（冷启动&amp;lt;300ms） | SvelteKit 2.0 || 调试支持 | React DevTools | Vue Devtools | 浏览器原生调试 |痛点对比： React：自由度高但需自行组装工具链，配置复杂 Vue：开箱即用，但深度定制需突破“Vue范式” Svelte：代码简洁，但复杂问题需依赖社区解决方案🌐 3、生态系统与社区支持| 指标 | React | Vue | Svelte ||—————–|—————–|—————–|—————–|| GitHub Stars| 230万+ | 210万+ | 58万+ || 企业采用率 | 78%（大型项目） | 65%（中小项目） | 35%（增长最快） || 中文资源 | 较多（文档/博客）| 极丰富 | 较少 || 未来趋势 | WASM组件实验 | 量子响应式原型 | 量子云编译 | 注：Vue国内企业案例（拼多多海外版），React案例（LinkedIn重构）🎯 4、选型决策指南根据你的项目目标精准匹配： 选 React 19 如果： 项目需要高度定制化架构（如插件化系统） 团队有React经验，且需长期技术延展性 典型场景：跨国电商平台、实时协作工具 选 Vue 4 如果： 追求开发速度与性能平衡（如6周上线活动页） 团队技术栈偏国内，需中文文档支持 典型场景：政务后台、教育CMS 选 Svelte 如果： 性能是核心指标（如60FPS数据可视化大屏） 愿意探索前沿技术，接受生态成长代价 典型场景：IoT监控面板、轻量级H5游戏 💎 总结：没有最好，只有最合适 大型复杂项目 → React 19 + Next.js（灵活性与生态保障） 中小型快速迭代 → Vue 4 + Vite（开发效率与本土支持） 极致性能场景 → Svelte + SvelteKit（轻量与未来技术适配）" }, { "title": "长沙系列1:天然游玩指南", "url": "/posts/cs-1/", "categories": "长沙系列", "tags": "长沙系列", "date": "2024-03-01 05:30:00 +0800", "snippet": "🌞 一、高温应对方案：合理规划时段+室内外穿插 避开高温时段（10:00-16:00）：长沙近期白天体感温度超40℃，户外活动尽量安排在早晨7:00-10:00或傍晚17:00后，中午安排室内景点或休息。 随身携带防暑装备：遮阳帽、小风扇、防晒霜必备；建议备藿香正气水、清凉油应急。 补水技巧：别等口渴才喝水！每小时补充200ml含电解质饮料（如宝矿力），可自带水壶。🏯 二、精选景点推荐：兼顾文化深度与避暑体验白天优先选室内/遮荫好的景点 湖南省博物院 亮点：马王堆汉墓陈列（辛追夫人、素纱襌衣）震撼，空调足，适合全家研学。 避暑技巧：预约最早时段（9:00入场），人少凉快；周五夜场开放至20:00，体验更佳。 时间：2-3小时 费用：免费（提前3天公众号预约）。 谢子龙影像馆 &amp;amp; 李自健美术馆（相邻） 亮点：建筑艺术感强，拍照出片；室内展览+湖边荫凉区可休息。 贴士：谢子龙1楼免费，保安大叔拍照技术是网红彩蛋！ 时间：2小时 费用：谢子龙特展约50元，李自健常展免费。 超级文和友（海信广场店） 亮点：复古长沙街景沉浸体验，室内有空调，可边吃边逛。 避坑：从海信广场2楼侧门进，避开正门长队；建议晚上21:00后人少。 时间：1.5小时 费用：免费入场，餐饮人均80-150元。 傍晚/夜间安排户外经典地标 橘子洲头+湘江夜游 亮点：青年毛泽东雕塑+湘江夜景，傍晚江风较凉。 技巧：乘环洲小火车（40元/人）省体力；19:30后登游船（118元起）看两岸灯光秀。 时间：2小时 费用：小火车40元，游船118元起。 天心阁夜游（强推新活动！） 亮点：2025年暑期新增沉浸式剧游，NPC互动解密明代科举故事，场景精美。 避暑优势：19:00后入园，运营至00:15；凉风习习，俯瞰夜景。 福利：大学生7月底前发社交平台可免票！ 时间：2-3小时 费用：门票约30元，剧游免费参与。 杜甫江阁 亮点：登阁看湘江日落+城市亮灯瞬间（19:00左右），周六偶遇烟花秀。 费用：门票11元。 🗓️ 三、行程安排建议（3天2夜，避暑版）| 日期 | 上午（7:00-10:30） | 中午/下午（室内/休息） | 傍晚/晚上（17:00后） ||————|——————————|—————————–|——————————|| Day 1 | 岳麓山南门→爱晚亭（趁早凉） | 湖南省博物院（预约中午时段） | 天心阁剧游+夜景观光 || Day 2 | 谢子龙/李自健（拍照+看展） | 文和友午餐+逛拍（避开烈日） | 橘子洲小火车+湘江游船 || Day 3 | 古开福寺（祈福）→ 文创街喝茶颜 | 五一广场室内商场购物 | 杜甫江阁夜景+冬瓜山夜市小吃 | ✅ 优势：每天仅1个高温时段户外，中午避暑有保障；夜景体验拉满，避暑又出片。⚠️ 四、关键注意事项 防暑安全第一： 老人/儿童尽量少外出，备足药物（降压药、退热贴）。 警惕中暑前兆：头晕、抽搐、无汗时立即转移至阴凉处，用湿毛巾敷大动脉，并拨打120。 预约！预约！ 湖南省博物院提前3天预约（周一闭馆）； 岳麓山索道早9点前到免排队。 饮食避坑： 步行街“水果捞”慎买（按克计价易被宰）； 火宫殿性价比低，推荐南门口/冬瓜山本地小吃。 带娃技巧： 橘子洲小火车必坐（步行单程1小时太累）； 海底世界/洋湖湿地可替换部分景点（室内+亲水）。 " }, { "title": "Qt官方示例解析系列12:Calculator计算器", "url": "/posts/qt-example-12/", "categories": "Qt官方示例解析", "tags": "Qt官方示例解析", "date": "2024-02-21 06:10:00 +0800", "snippet": "实现了什么功能一个计算器部分源码解析使用了自定义的QToolButton，有什么特殊地方：统一设置了sizePolicy，还有对默认的大小进行了调整。unaryOperator 一元操作符,比如平方std::pow(operand, 2.0);和倒数计算enum { NumDigitButtons = 10 };Button *digitButtons[NumDigitButtons];//数组大小可用enumcreateButton方法接收一个模板参数，该参数是一个函数指针。5.15.2版本是用const char *member接收SLOT(pointClicked()）正负号要用 tr(“\\302\\261”)MC=clearMemoryMR=readMemoryMS=setMemory 计算出最终结果后，将结果存储到内存中M+=addToMemory 计算出最终结果后，将结果加到内存中有数字键盘上数字1-9的布局计算方法。通过sender()获取信号发送者，然后通过qobject_cast转换成Button类型，然后获取textbackspace删除使用text.chop(1);删除最后一个字符参考https://doc.qt.io/qt-6/qtwidgets-widgets-calculator-example.html" }, { "title": "资讯系列1:5年期LPR降到3.95", "url": "/posts/news-1/", "categories": "资讯系列", "tags": "资讯系列", "date": "2024-02-20 09:00:00 +0800", "snippet": "2月20日，下调25个基点，意味着买新房的可以直接享受，老房子要明年1月1日或按合同签订日调整。交行app里面的利率调整方式为按年，即表示合同签订日才会调整。长沙是在LPR基础上减20个基点，即3.75" }, { "title": "AI系列5:Sora介绍", "url": "/posts/ai-5/", "categories": "AI系列", "tags": "AI系列", "date": "2024-02-20 06:00:00 +0800", "snippet": "是一个文字生成视频的模型，可以生成1分钟的高清视频，在 https://en.wikipedia.org/wiki/Sora_(text-to-video_model) 页面有一个生成的视频示例，可以看看效果。是openai公司开发的，在2024年2月15日发布其它类似模型有 Meta’s Make-A-Video, Runway’s Gen-2, and Google’s Lumiere从Runway等AI视频初创公司崛起，到去年Pika爆火，业内人士认为2024是AI行业的「视频大年」参考https://www.huxiu.com/article/2679234.htmlhttps://36kr.com/p/2654895303937288" }, { "title": "Linux命令系列10:定时任务", "url": "/posts/linux-command-10/", "categories": "Linux命令系列", "tags": "Linux命令系列", "date": "2024-02-10 06:00:00 +0800", "snippet": "crontab crontab -e 编辑当前用户的cron服务crontab -l 列出当前用户的cron服务的详细内容crontab -l -u elesos //列出用户elesos的所有调度任务crontab -u 设定某个用户的cron服务crontab -r 删除当前用户的cron服务例如当前登陆的用户是root运行crontab -e 会给root用户创建一个计划任务；并进入vi编辑计划任务内容。分 小时 日 月 星期 命令0-59 0-23 1-31 1-12 0-6 command(一般一行对应一个任务)第1个数字表示分钟（0-59），第2个数字表示小时（0-23），第3个数字表示天（1-31），第4个数字表示月份（1-12），第5个数字表示星期（0-6），其中0表示周日。后面便是你要执行的任务。各部分之间使用空格分开。时间除了使用数字外还有几个特殊符号：“*”表示所有数值 ，如第一位使用* 表示每分钟“/”表示每， 如第一位使用 */1 表示每1分钟“-”表示数值范围，“ ，”用来隔开离散的数值，如第2位 是1-6，8 表示1点到6点，还有8点。注释加#号即可启动与停止/sbin/service crond status 查看状态/sbin/service crond start 启动cron服务/sbin/service crond stop 停止服务/sbin/service crond restart 重启服务docker里面启动whereis crond/usr/sbin/crond start示例[编辑]每10秒执行：定时任务里最好写绝对路径*/1 * * * * /opt/nginx/html/starRTC_web/aec/doc/convert_doc.sh*/1 * * * * (sleep 10; /opt/nginx/html/starRTC_web/aec/doc/convert_doc.sh)*/1 * * * * (sleep 20; /opt/nginx/html/starRTC_web/aec/doc/convert_doc.sh)*/1 * * * * (sleep 30; /opt/nginx/html/starRTC_web/aec/doc/convert_doc.sh)*/1 * * * * (sleep 40; /opt/nginx/html/starRTC_web/aec/doc/convert_doc.sh)*/1 * * * * (sleep 50; /opt/nginx/html/starRTC_web/aec/doc/convert_doc.sh)每天的0点0分执行0 0 * * * /opt/nginx/db_bak.sh每隔1分钟向文件输出”hello elesos”*/1 * * * * echo &quot;hello elesos&quot; &amp;gt;&amp;gt; /data/leijh/test.txt可通过tail -f text.txt进行验证，或查cron的日志tail -f /var/log/cron每天1点向某个文件写入一段话0 1 * * * echo &quot;hello elesos&quot; &amp;gt;&amp;gt; /tmp/test.txt输出重定向[编辑]&amp;gt; /dev/null 2&amp;gt;&amp;amp;1 # 最好在执行的命令最后面加上这个。不然会在/var/spool/clientmqueue目录下产生大量日志文件，而耗尽空间（开启了cron，而cron中执行的程序有输出内容，输出内容会以邮件形式发给cron的用户，而sendmail没有启动所以就产生了这些文件）0：标准输入1：标准输出2：标准错误信息输出如，将某个程序的错误信息输出到log文件中：./program 2&amp;gt;log 这样标准输出还是在屏幕上，但是错误信息会输出到log文件中另外，也可以实现0，1，2之间的重定向。2&amp;gt;&amp;amp;1 ：将错误信息重定向到标准输出。如果想要正常输出和错误信息都不显示，则要把标准输出和标准错误都重定向到/dev/null， 如：ls 1&amp;gt;/dev/null 2&amp;gt;/dev/null还有一种做法是将错误重定向到标准输出，然后再重定向到 /dev/null，如：ls &amp;gt;/dev/null 2&amp;gt;&amp;amp;1注意：此处的顺序不能更改，否则达不到想要的效果*/1 * * * * /opt/adobe/fms/webroot/api/svn.sh一般加上&amp;gt; /dev/null 2&amp;gt;&amp;amp;1 上面是每隔1分钟自动更新。下面是每隔10s*/1 * * * * /opt/adobe/fms/webroot/api/svn.sh*/1 * * * * (sleep 10; /opt/adobe/fms/webroot/api/svn.sh)*/1 * * * * (sleep 20; /opt/adobe/fms/webroot/api/svn.sh)*/1 * * * * (sleep 30; /opt/adobe/fms/webroot/api/svn.sh)*/1 * * * * (sleep 40; /opt/adobe/fms/webroot/api/svn.sh)*/1 * * * * (sleep 50; /opt/adobe/fms/webroot/api/svn.sh)注意空格重启服务 /sbin/service crond restartcrond.service: Unit crond.service not found.service cron start参考http://os.51cto.com/art/201011/233945.htmhttp://os.51cto.com/art/201003/187722.htmhttp://aub.iteye.com/blog/1326200https://my.oschina.net/u/2391658/blog/1525941https://blog.csdn.net/shawnhu007/article/details/50971084https://blog.csdn.net/soi_yu/article/details/82977220" }, { "title": "C++系列17:map与pair", "url": "/posts/cpp-17/", "categories": "C++系列", "tags": "C++系列", "date": "2024-02-05 06:00:00 +0800", "snippet": "pair#include &amp;lt;utility&amp;gt; // std::pair, std::make_pairpair &amp;lt;string,double&amp;gt; product1; // default constructorpair &amp;lt;string,double&amp;gt; product2 (&quot;tomatoes&quot;, 2.30); // value initpair &amp;lt;string,double&amp;gt; product3 (product2); // copy constructorproduct1 = make_pair(string(&quot;lightbulbs&quot;), 0.99); // using make_pair (move)g2 = make_pair(1, &#39;a&#39;);product2.first = &quot;shoes&quot;; //赋值product2.second = 39.90; 操作ms.insert(make_pair(&#39;b&#39;, 25)); mymap.insert ( pair&amp;lt;char,int&amp;gt;(&#39;a&#39;,100) ); //map_name.insert({key, element})mymap.insert (it, pair&amp;lt;char,int&amp;gt;(&#39;b&#39;,300));anothermap.insert(mymap.begin(), mymap.find(&#39;c&#39;)); map&amp;lt;char,int&amp;gt; mymap;mymap.emplace(&#39;x&#39;,100); //map_name.emplace(key, element) 删除:mymap.erase (it); mymap.erase (&#39;c&#39;); // erasing by keymymap.erase ( it, mymap.end() ); // erasing by rangecount(key) //Count elements with a specific key所有容器类 (vector, stack, queue, set, map, etc) 都支持 insert and emplace 操作.emplace不copy of object.参考https://www.cplusplus.com/reference/utility/pair/pair/https://www.geeksforgeeks.org/pair-in-cpp-stl/https://www.geeksforgeeks.org/map-associative-containers-the-c-standard-template-library-stl/https://www.cplusplus.com/reference/map/map/欢迎评论交流" }, { "title": "树莓派系列4:树莓派3B支持的系统", "url": "/posts/rpi-4/", "categories": "树莓派系列", "tags": "树莓派系列", "date": "2024-02-04 06:00:00 +0800", "snippet": "官方系统Raspberry Pi OS（原Raspbian）分三个版本：完整桌面版（含推荐软件）基础桌面版（无额外软件）Lite版（无桌面，仅命令行）We recommend installing an operating system using Raspberry Pi Imager. 也可以用来安装ubuntuCentOS 7.5 64位Ubuntu 64位（16.04/18.04）centos系统有几种? 传统CentOS Linux（已停止维护）CentOS 7：最后稳定版为7.9，官方支持已于2024年6月终止，无安全更新，存在安全风险CentOS 8：2021年底已停止维护，不推荐使用 CentOS Stream（滚动更新版）定位：RHEL的上游开发分支，非稳定生产环境导向最新版本：CentOS Stream 9（基于RHEL 9）：支持至2027年，适合开发测试环境35。CentOS Stream 8：支持至2026年底，但需频繁验证更新稳定性https://www.raspberrypi.com/documentation/computers/getting-started.html树莓派3b安装了Raspberry Pi OS后，ssh连接报找不到匹配的key exchange算法要怎么解决OpenSSH服务端默认禁用了不安全的密钥交换（Key Exchange）算法，而较旧的SSH客户端（如老版本PuTTY、WinSCP或macOS/Linux终端）可能不支持这些算法，导致协商失败。需要安装新版本xshell即可" }, { "title": "树莓派系列3:yum", "url": "/posts/rpi-3/", "categories": "树莓派系列", "tags": "树莓派系列", "date": "2024-02-03 06:00:00 +0800", "snippet": "如何查看板子是树莓派3b还是3b+cat /sys/firmware/devicetree/base/model3B输出：Raspberry Pi 3 Model B Rev 1.23B+：主板上的白色标签印有型号Pi 3 Model B+配置yum源有哪些源sudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-altarch-7.repouname -marmv7lsed -i ‘s/$releasever/7/g’ /etc/yum.repos.d/CentOS-Base.reposed -i ‘s/$basearch/armhfp/g’ /etc/yum.repos.d/CentOS-Base.repoarmv7l与armv7hl 什么区别终端执行 cat /proc/cpuinfo，若输出含 vfpv3 或 neon，则支持 armv7hlyum clean allsudo yum makecache –nogpgcheck # 首次跳过GPG验证（ARM兼容性需要）armhfp 是专为 ARMv7 硬件浮点设备优化的 32 位架构" }, { "title": "C++系列16:enable_shared_from_this", "url": "/posts/cpp-16/", "categories": "C++系列", "tags": "C++系列", "date": "2024-02-02 06:30:00 +0800", "snippet": "是个模板类template&amp;lt; class T &amp;gt; class enable_shared_from_this;能让一个对象（假设为t，已被一个std::shared_ptr 对象 pt 管理）安全地生成新的 std::shared_ptr 实例（假设名为 pt1, pt2, ... ） ，它们与 pt 共享对象 t 的所有权。若一个类T继承 std::enable_shared_from_this&amp;lt;T&amp;gt; ，则会为该类 T 提供成员函数： shared_from_this 。当T类型的对象 t 被一个为名为 pt 的 std::shared_ptr&amp;lt;T&amp;gt; 类对象管理时，调用 T::shared_from_this 成员函数，会返回一个新的 std::shared_ptr&amp;lt;T&amp;gt; 对象，它与 pt 共享 t 的所有权。异步函数可能会使用到异步调用之前就存在的变量。为了保证该变量在异步函数执期间一直有效，我们可以传递一个指向自身的share_ptr给异步函数，这样在异步函数执行期间share_ptr所管理的对象就不会析构，所使用的变量也会一直有效了。也就是说，在需要传递一个shared_ptr的时候，可以通过 shared_from_this 方便地获取一个shared_ptr.参考https://blog.csdn.net/caoshangpa/article/details/79392878https://stackoverflow.com/questions/712279/what-is-the-usefulness-of-enable-shared-from-this欢迎评论交流" }, { "title": "一天一个Qt类系列3:QVariant", "url": "/posts/qt-class-3/", "categories": "一天一个Qt类", "tags": "一天一个Qt类", "date": "2024-02-02 06:10:00 +0800", "snippet": "使用canConvert判断能否转换QVariant v = 42;v.canConvert&amp;lt;int&amp;gt;(); // returns truev.canConvert&amp;lt;QString&amp;gt;(); // returns true但要注意canConvert返回true,不一定就能调用convert成功。只有同时为true才行。比如string里面包含的不是数字。但canConvert(QMetaType::fromType&amp;lt;int&amp;gt;())会返回true.但convert会失败。有方便的api,如toInt();但对GUI类型，比如QImage，没有toX这种函数,需要使用value模板函数：QColor color = variant.value&amp;lt;QColor&amp;gt;();v.typeName()//intQVariant x; // x.isNull() == trueQVariant y = QVariant::fromValue(nullptr); // y.isNull() == trueMyCustomStruct s;return QVariant::fromValue(s);或v.setValue(s);QList&amp;lt;int&amp;gt; intList = {7, 11, 42};QVariant variant = QVariant::fromValue(intList);if (variant.canConvert&amp;lt;QVariantList&amp;gt;()) { QSequentialIterable iterable = variant.value&amp;lt;QSequentialIterable&amp;gt;(); for (const QVariant &amp;amp;v : iterable) { qDebug() &amp;lt;&amp;lt; v; } }欢迎评论交流" }, { "title": "C++系列15:any", "url": "/posts/cpp-15/", "categories": "C++系列", "tags": "C++系列", "date": "2024-02-02 06:00:00 +0800", "snippet": "可以保存任意类型的值，类似Qt的QVariantif (a.type() == typeid(std::string)) { std::string s = std::any_cast&amp;lt;std::string&amp;gt;(a);//使用any_cast&amp;lt;该值的类型&amp;gt;来获取值 useString(s);}else if (a.type() == typeid(int)) // a.type().name()会打印出int{ useInt(std::any_cast&amp;lt;int&amp;gt;(a));}转换失败会抛出std::bad_any_cast所以最好try { auto s = std::any_cast&amp;lt;std::string&amp;gt;(a); ...}catch (std::bad_any_cast&amp;amp; e) { std::cerr &amp;lt;&amp;lt; &quot;EXCEPTION: &quot; &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; &#39;\\n&#39;;}也可以放入容器std::vector&amp;lt;std::any&amp;gt; v;欢迎评论交流" }, { "title": "树莓派系列2:树莓派3有几个型号", "url": "/posts/rpi-2/", "categories": "树莓派系列", "tags": "树莓派系列", "date": "2024-02-01 06:00:00 +0800", "snippet": "树莓派3系列主要有三个型号：Model B、Model B+ 和 Model A+。以下是各型号的核心区别及关键参数总结：📋 1. 树莓派3 Model B（2016年发布） 处理器：1.2GHz 64位四核 ARM Cortex-A53（Broadcom BCM2837）。 内存：1GB LPDDR2。 网络：802.11n Wi-Fi（仅2.4GHz）、蓝牙4.1，10/100M以太网口。 接口：4×USB 2.0、HDMI、40针GPIO、MicroSD卡槽。 电源：5V/2.5A Micro USB供电。 售价：35美元（约人民币247元）。https://www.raspberrypi.org/products/raspberry-pi-3-model-b/📶 2. 树莓派3 Model B+（2018年发布） 处理器：1.4GHz 64位四核 ARM Cortex-A53（Broadcom BCM2837B0），散热优化。 内存：1GB LPDDR2（同Model B）。 网络：双频Wi-Fi（2.4GHz/5GHz）、蓝牙4.2，以太网口吞吐量提升至300Mbps（三倍于前代）。 其他改进：支持模块化认证（便于物联网设备合规）。 售价：35美元（与Model B一致）。📏 3. 树莓派3 Model A+（2018年发布） 处理器：1.4GHz 64位四核 ARM Cortex-A53（同Model B+）。 内存：512MB LPDDR2（减半）。 网络：双频Wi-Fi、蓝牙4.2，无以太网口。 接口：1×USB 2.0（无USB HUB），尺寸更小（标准A+版尺寸）。 定位：低成本简化版，价格降至25美元。📊 型号对比一览表| 特性 | Model B | Model B+ | Model A+ ||—————-|——————-|——————-|——————-|| 发布时间 | 2016年 | 2018年 | 2018年 || 处理器 | 1.2GHz 四核 | 1.4GHz 四核 | 1.4GHz 四核 || 内存 | 1GB | 1GB | 512MB || Wi-Fi | 2.4GHz单频 | 双频(2.4/5GHz) | 双频(2.4/5GHz) || 蓝牙 | 4.1 | 4.2 | 4.2 || 以太网口 | 有 | 有 | 无 || USB接口数 | 4个 | 4个 | 1个 || 售价 | $35 | $35 | $25 |💎 总结 Model B：基础款，适合一般开发及入门项目。 Model B+：网络和散热强化版，适合需要高速Wi-Fi或物联网应用。 Model A+：紧凑廉价版，适合空间敏感或低预算场景（如嵌入式设备）。参考https://www.raspberrypi.org/products/" }, { "title": "Qt官方示例解析系列11:状态机Ping Pong States", "url": "/posts/qt-example-11/", "categories": "Qt官方示例解析", "tags": "Qt官方示例解析", "date": "2024-01-31 06:20:00 +0800", "snippet": "使用了自定义的events 和 transitions是并行状态，可以各自独立地进行转换。The pinger state will post the first ping event upon entry; the ponger state will respond by posting a pong event; this will cause the pinger state to post a new ping event;PingTransition class defines a transition that is triggered by PingEventPongTransition class defines a transition that is triggered by PongEvent，不过代码好像写错了pinger-&amp;gt;addTransition(new PongTransition);//转换是无目标的,当触发这样的转换时，源状态不会退出并重新进入,仅调用转换的 onTransition() 函数" }, { "title": "C++系列14:constexpr", "url": "/posts/cpp-14/", "categories": "C++系列", "tags": "C++系列", "date": "2024-01-31 06:10:00 +0800", "snippet": "static constexpr QEvent::Type PingEventType = QEvent::Type(QEvent::User + 2);const并未区分出编译期常量和运行期常量constexpr限定在了编译期常量All constexpr variables are constconst表示的是read only的语义,constexpr才是名符其实的常量在 C 里面，const 很明确只有「只读」一个语义，不会混淆。C++ 在此基础上增加了「常量」语义，也由 const 关键字来承担，引出来一些奇怪的问题。C++11 把「常量」语义拆出来，交给新引入的 constexpr 关键字。参考https://learn.microsoft.com/en-us/cpp/cpp/constexpr-cpp?view=msvc-170欢迎评论交流" }, { "title": "Qt系列2:状态机框架介绍", "url": "/posts/qt-study-2/", "categories": "Qt系列", "tags": "Qt系列", "date": "2024-01-31 06:00:00 +0800", "snippet": "分层状态机大状态机包含小状态机，小状态机里面有各种状态。小状态机作为一个整体。下面介绍一下Qt状态机框架状态之间的转换可以由信号触发相关类：QHistoryState ：Means of returning to a previously active substate 返回先前活动子状态的方法QStateMachine：Hierarchical finite state machine 分层有限状态机s1-&amp;gt;addTransition(button, &amp;amp;QPushButton::clicked, s2); //转换可以将任何状态作为目标，不必与源状态位于同一层级。machine.addState(s1);machine.setInitialState(s1);machine.start();可以在状态进入和退出时执行一些操作：s1-&amp;gt;assignProperty(label, &quot;text&quot;, &quot;In state s1&quot;);QObject::connect(s3, &amp;amp;QState::entered, button, &amp;amp;QPushButton::showMaximized);QObject::connect(s3, &amp;amp;QState::exited, button, &amp;amp;QPushButton::showMinimized);Custom states可以重新实现QAbstractState::onEntry（） 和QAbstractState::onExit()为了使状态机结束，需要一个最终状态（QFinalState）。可对状态进行分组，分组后的状态可以作为一个整体进行转换。通过指定父状态即可：QState *s11 = new QState(s1);使用历史状态保存和恢复当前状态QHistoryState 代表父状态退出时父状态所处的子状态。 QHistoryState *s1h = new QHistoryState(s1);s3-&amp;gt;addTransition(s1h);使用并行状态避免状态组合爆炸 QState *s1 = new QState(QState::ParallelStates);// s11 and s12 will be entered in parallelQState *s11 = new QState(s1);QState *s12 = new QState(s1);检查组合状态是否结束子状态可以是最终状态，当进入最终子状态时，它的父状态会发出QState::finished（）信号s1-&amp;gt;addTransition(s1, &amp;amp;QState::finished, s2);没有目标的Transition不会改变状态，这可以让我们不必离开该状态QSignalTransition *trans = new QSignalTransition(&amp;amp;button, &amp;amp;QPushButton::clicked);QObject::connect(trans, QSignalTransition::triggered, &amp;amp;msgBox, &amp;amp;QMessageBox::exec);//单击按钮时都会显示消息框s1-&amp;gt;addTransition(trans);保持当前状态s1Events, Transitions and Guards状态机有自己的事件循环，你可以使用QStateMachine::postEvent()将自己的事件发布到状态机。QEvent(QEvent::Type(QEvent::User+1))StringTransition *t1 = new StringTransition(&quot;Hello&quot;);s1-&amp;gt;addTransition(t1);t1-&amp;gt;setTargetState(s2);然后发送事件给状态机machine.postEvent(new StringEvent(&quot;Hello&quot;));使用恢复策略自动恢复属性machine.setGlobalRestorePolicy(QStateMachine::RestoreProperties);置此后将自动恢复所有属性，或者恢复到父状态的属性动画属性分配QSignalTransition *transition = s1-&amp;gt;addTransition(button, &amp;amp;QPushButton::clicked, s2);transition-&amp;gt;addAnimation(new QPropertyAnimation(button, &quot;geometry&quot;));如果状态机的全局恢复策略设置为QStateMachine::RestoreProperties，还可以为属性恢复添加动画。检测All Properties Have Been Set In A States2-&amp;gt;addTransition(s2, &amp;amp;QState::propertiesAssigned, s3);//比如有动画时，动画结束才会进入s3嵌套状态机QStateMachine是一个子类QState。这允许状态机成为另一台机器的子状态参考https://doc.qt.io/qt-5/statemachine-api.html欢迎交流" }, { "title": "Docker系列1:常用操作", "url": "/posts/docker-1/", "categories": "Docker系列", "tags": "Docker系列", "date": "2024-01-30 06:00:00 +0800", "snippet": "安装curl -sSL https://get.daocloud.io/docker | sh #国内curl -sSL https://get.docker.com/ | shsystemctl enable docker &amp;amp;&amp;amp; systemctl start docker运行docker run -d -it -p 80:80 --privileged=true --name elesos centos /bin/bashdocker run -d -it --net=host --name hexo centos:centos7 /bin/bash镜像显示镜像docker images 创建镜像使用commit把有修改的container提交成新的imagedocker commit 容器id elesos/test:version1 #以后有修改，可以重复提交到同一个名字使用Dockerfile待写删除images先停止并删除依赖该image的container：docker stop 容器iddocker rm 容器id然后删除镜像docker rmi 镜像id删除images先停止并删除依赖该image的container：docker stop 容器iddocker rm 容器id然后删除镜像docker rmi 镜像id导出导入docker export 7691a814370e &amp;gt; elesos.tarcat elesos.tar | docker import - elesos/ubuntu:v1.0进入容器wget -P ~ https://raw.githubusercontent.com/elesos/assets/master/.bashrc_docker; # https://gitee.com/elesos/assets/raw/master/2020/09/.bashrc_dockerecho &quot;[ -f ~/.bashrc_docker ] &amp;amp;&amp;amp; . ~/.bashrc_docker&quot; &amp;gt;&amp;gt; ~/.bashrc; source ~/.bashrcdocker-enter 容器名 #或docker exec -it ffmerge /bin/bash拷贝文件把容器內的文件复制出来：注意后面有个点docker cp ff35dcd5168e:/home/elesos.h264 .拷贝到容器中去：docker cp test.flv svn_server:/test.flv问题CentOS 8.0 安装docker 报错package docker-ce-3:19.03.12-3.el7.x86_64 requires containerd.io &amp;gt;= 1.2.2-3, but none of the providers can be installedwget https://download.docker.com/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpmyum install -y containerd.io-1.2.6-3.3.el7.x86_64.rpm然后再安装docker即可不能ping通baidu.com，但却能ping通百度的ip，生成容器时加上：--net=host欢迎评论交流" }, { "title": "树莓派系列1:系统安装", "url": "/posts/rpi-1/", "categories": "树莓派系列", "tags": "树莓派系列", "date": "2024-01-22 06:00:00 +0800", "snippet": "官方系统：Raspbian，可以用NOOBS安装。NOOBS 包含Raspbian 和LibreELEC. Raspbian 是有界面的系统，基于Debian Buster1, https://www.sdcard.org/downloads/formatter_4/index.html下载 SD Card Formatter 5.0.1 Setup.exe 并安装2，解压 noobs zip并全部剪切到sd卡上3，连上鼠标键盘显示器开机即可。使用镜像安装先下载镜像安装 Win32DiskImager(https://sourceforge.net/projects/win32diskimager/) 后以管理员身份运行Raspbian默认账号：pi 密码：raspberry常用操作开启ssh服务systemctl enable sshsystemctl start ssh #https://www.raspberrypi.org/documentation/remote-access/ssh/参考https://www.raspberrypi.org/downloads/欢迎评论交流" }, { "title": "git系列4:push推送", "url": "/posts/git-4/", "categories": "git系列", "tags": "git系列", "date": "2024-01-18 06:30:00 +0800", "snippet": "别的小伙伴，克隆dev分支到本地git checkout -b dev origin/dev如果别人已经push过了。那我们push前需要先更新代码git branch --set-upstream-to=origin/dev dev #指定本地dev分支与远程origin/dev分支关联git pull --rebasegit push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支&amp;gt;:&amp;lt;远程分支&amp;gt;顺序是&amp;lt;源&amp;gt;:&amp;lt;目的&amp;gt;，所以git pull是&amp;lt;远程分支&amp;gt;:&amp;lt;本地分支&amp;gt;，而git push是&amp;lt;本地分支&amp;gt;:&amp;lt;远程分支&amp;gt;push时如果远程分支不存在，会被创建。如果当前分支与多个主机存在追踪关系，可以使用-u选项指定一个默认主机，这样以后就可以不加任何参数使用git push了git push origin dev #推送dev分支git push -u origin master //把master推送到远程git push -u origin local_branch:remote_branch不带任何参数的git push，默认只推送当前分支将本地的所有分支都推送到远程主机，需要使用--all选项：git push --all origin欢迎评论交流" }, { "title": "git系列3:删除本地与远端分支", "url": "/posts/git-3/", "categories": "git系列", "tags": "git系列", "date": "2024-01-18 06:20:00 +0800", "snippet": "不想要的本地分支，使用大写的-D参数删除git branch -D xxx删除远程origin主机的xxx分支git push origin --delete xxx" }, { "title": "C++系列13:using与typedef", "url": "/posts/cpp-13/", "categories": "C++系列", "tags": "C++系列", "date": "2024-01-18 06:10:00 +0800", "snippet": "建议用using代替typedefusing SI=Sales_itemtypedef typename std::vector&amp;lt;T&amp;gt;::size_type size_type;typedef创建了别名，而typename告诉编译器std::vector&amp;lt;T&amp;gt;::size_type是一个类型而不是一个成员。欢迎评论交流" }, { "title": "C++系列12:堆与栈的区别", "url": "/posts/cpp-12/", "categories": "C++系列", "tags": "C++系列", "date": "2024-01-18 06:00:00 +0800", "snippet": "A a；栈堆上创建对象，使用`new`运算符欢迎评论交流" }, { "title": "Linux命令系列9:sz和rz传输文件", "url": "/posts/linux-command-9/", "categories": "Linux命令系列", "tags": "Linux命令系列", "date": "2024-01-17 06:00:00 +0800", "snippet": "yum install lrzsz -yapt install lrzsz #Ubuntu传出来sz filename接收rz -be欢迎评论交流" }, { "title": "一天一个Qt类系列2:QRect", "url": "/posts/qt-class-2/", "categories": "一天一个Qt类", "tags": "一天一个Qt类", "date": "2024-01-16 06:20:00 +0800", "snippet": "QRect r(100, 200, 500, 500);//左上角坐标与宽高QRect::adjust(int dx1, int dy1, int dx2, int dy2)//调整矩形的坐标，dx1,dy1为左上角坐标的增量，dx2,dy2为右下角坐标的增量调用adjust（1,2,3,4)后，r的左上角和宽高为( 101 , 202 ); 502 x 502如果是adjust(-1,-2,3,4),则为( 99 , 198 ); 504 x 506欢迎评论交流" }, { "title": "Qt官方示例解析系列10:Mouse Button Tester鼠标按键测试", "url": "/posts/qt-example-10/", "categories": "Qt官方示例解析", "tags": "Qt官方示例解析", "date": "2024-01-16 06:10:00 +0800", "snippet": "这是一个5.15.2的示例使用QWidget设置了布局setLayout，布局里面放了一个自定义的QTextEdit看一下 ButtonTester 类：using QTextEdit::QTextEdit;：这行代码将 QTextEdit 的所有构造函数引入到 ButtonTester 类中setText后要调用repaint();比较有用的函数是wheelEvent:垂直的上下用 vertical = qAbs(e-&amp;gt;angleDelta().y()) &amp;gt;= qAbs(e-&amp;gt;angleDelta().x());判断，计算滚轮事件的角度变化在垂直方向（y）是否大于或等于水平方向（x）int delta = vertical ? e-&amp;gt;angleDelta().y() : e-&amp;gt;angleDelta().x();：如果 vertical 为 true，则 delta 为滚轮事件的垂直角度变化，否则为水平角度变化。还可以判断左右方向。" }, { "title": "Linux命令系列8:chmod修改权限", "url": "/posts/linux-command-8/", "categories": "Linux命令系列", "tags": "Linux命令系列", "date": "2024-01-16 06:00:00 +0800", "snippet": "权限分别是owner/group/others三种身份各自的read/write/execute权限：r=4w=2x=1最终权限通过累加得到， 例如当权限为： [rwxrwx---] 时：owner = rwx = 4+2+1 = 7group = rwx = 4+2+1 = 7others= --- = 0+0+0 = 0即权限也可以表示为770u（user或owner）, g, o代表三种身份,a代表 all 即全部的身份如果是10进制256 128 64 | 32 16 8 | 4 2 1 =全部权限为511r w r w r w = 438r w x r x r x= 493windows上用ls看到的权限是错的。windows没有执行权限，但ls上依然显示，它的执行权限被w替代了欢迎评论交流" }, { "title": "一天一个Qt类系列1:QLockFile", "url": "/posts/qt-class-1/", "categories": "一天一个Qt类", "tags": "一天一个Qt类", "date": "2024-01-12 06:10:00 +0800", "snippet": "使用一个文件在进程间提供锁定用于防止多个进程同时访问同一资源短时间操作可以调用lock等待操作完成。如果操作时间很长，可以调用setStateLockTime(0)设定锁定文件过时的时间， 然后用一个很短的超时进行tryLock，如果获得锁，返回true一般可以使用 QDir::temp().absoluteFilePath(&quot;test.lock&quot;); 来生成锁定文件tryLock传递一个负数作将永远等待，直到锁定文件可以被锁定。相当于调用lock示例用法：客户端和服务端使用同一个lockfile. 客户启动时tryLock成功后，unlock并启动服务端。服务端启动后tryLock但是不调用unlock，这样下次客户端启动时tryLock失败，就不会再次启动服务端了。欢迎评论交流" }, { "title": "Linux命令系列7:find查找", "url": "/posts/linux-command-7/", "categories": "Linux命令系列", "tags": "Linux命令系列", "date": "2024-01-12 06:00:00 +0800", "snippet": "想查看当前文件夹及子文件夹里有没有文件名为“abc”的文件find . -name abc点号表示当前目录-name：表示根据名称查找欢迎评论交流" }, { "title": "Linux命令系列6:rsync复制", "url": "/posts/linux-command-6/", "categories": "Linux命令系列", "tags": "Linux命令系列", "date": "2024-01-11 07:10:00 +0800", "snippet": "也可以同步文件和目录，可以mac下运行DIR_SYNC_COMMAND=(&quot;rsync&quot; &quot;-rcl&quot;)//或-rul, -u 代表按修改日期，-c代表按 checksum. echo &quot;DIR_SYNC_COMMAND is set to: ${DIR_SYNC_COMMAND[@]}&quot;其中DIR_SYNC_COMMAND 设置为包含两个元素的数组 (&quot;rsync&quot; &quot;-rcl&quot;)； ${DIR_SYNC_COMMAND[@]} 是一种特殊的语法，用于展开数组变量 DIR_SYNC_COMMAND 的所有元素，并以空格分隔欢迎评论交流" }, { "title": "Linux命令系列5:cp复制", "url": "/posts/linux-command-5/", "categories": "Linux命令系列", "tags": "Linux命令系列", "date": "2024-01-11 07:00:00 +0800", "snippet": "cp可复制文件或目录语法cp [选项] 源 目标常见选项-i 或 --interactive 覆盖之前询问-f 或 --force 强行复制-p 或 --preserve 保留源属性-R 递归-v 或 --verbose 显示复制过程--help 帮助示例将文件file1复制成文件file2cp file1 file2将目录dir1复制成目录dir2cp -R dir1 dir2其它一般Linux的启动文件~/.bashrc中会把cp命名成alias cp=&#39;cp -i&#39;这样在Linux下输入cp命令实际上运行的是cp -i，加上一个“\\”符号(即运行\\cp)可以让此次的cp命令不使用别名(cp -i)运行。" }, { "title": "C++系列11:有哪些标准", "url": "/posts/cpp-11/", "categories": "C++系列", "tags": "C++系列", "date": "2024-01-11 06:30:00 +0800", "snippet": "C++98是第一个C++标准，1998年发布。C++11，第三个C++标准，2011年C++14，第四个C++标准，2014年C++17，第五个C++标准，2017年C++20 , 2020年下一代是C++23欢迎评论交流" }, { "title": "C++系列10:std::function与std::bind", "url": "/posts/cpp-10/", "categories": "C++系列", "tags": "C++系列", "date": "2024-01-11 06:20:00 +0800", "snippet": "bind绑定函数参数到一个函数对象上（参数可以使用占位符），并返回一个函数对象using namespace std::placeholders; //为了能使用 _1, _2, _3 进行占位,表示这个参数以调用时传入的参数为准bind (Fn&amp;amp;&amp;amp; fn, Args&amp;amp;&amp;amp;... args); //参数fn也是一个函数对象还可以指定执行结果的返回类型： std::bind&amp;lt;int&amp;gt; (my_divide,_1,_2);std::bind(&amp;amp;callback);std::bind(&amp;amp;aClass::callback, this);//绑定成员函数时第2个参数为对象地址std::bind(&amp;amp;aClass::callback, this， info);functionstd::function&amp;lt;返回值(参数)&amp;gt;可以使用lambda赋值，另外std::bind绑定后的结果可以使用std::function保存,但需要注意参数类型：void print_num(int i){ std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &#39;\\n&#39;;}std::function&amp;lt;void()&amp;gt; f_display_31337 = std::bind(print_num, 31337);f_display_31337(); //原来是有int参数的，经过bind后，不需要参数了。为了方便使用，常用以下形式using target = std::function&amp;lt;bool(QObject* obj)&amp;gt;;然后可以用target声明变量target m_target = nullptr;m_target = std:bind(xxx);使用auto lambdaSendMessage = [this](int id){}connect(hotkey2, &amp;amp;QHotkey::activated, std::bind(lambdaSendMessage, 2)); //connect的第三个参数是一个函数对象，可以用bind返回一个函数对象。参考https://www.cplusplus.com/reference/functional/bind/https://en.cppreference.com/w/cpp/utility/functional/functionhttps://blog.csdn.net/wangshubo1989/article/details/49134235欢迎评论交流" }, { "title": "C++系列9:lambda表达式", "url": "/posts/cpp-9/", "categories": "C++系列", "tags": "C++系列", "date": "2024-01-11 06:15:00 +0800", "snippet": "方便定义匿名函数语法[capture list] (params list) mutable exception -&amp;gt; return type { function body }[capture list] (params list) -&amp;gt; return type {function body}[capture list] (params list) {function body} //常用[capture list] {function body}capture list：捕获外部变量列表, 如[&amp;amp;, a, b]除a和b按值进行传递外，其他参数都按引用进行传递。 [a, &amp;amp;b] 将a按值进行传递，b按引用进行传递。 [=，&amp;amp;a, &amp;amp;b] 除a和b按引用进行传递外，其他参数都按值进行传递。params list：形参mutable指示符：用来说明是否可以修改捕获的变量exception：异常设定return type：返回类型function body：函数体示例：int a = 123;auto f = [a]() mutable { cout &amp;lt;&amp;lt; ++a; }; cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl; // 输出：123f(); // 输出：124欢迎评论交流" }, { "title": "CMake系列3:mac隐藏dock栏图标", "url": "/posts/cmake-3/", "categories": "CMake系列", "tags": "CMake系列", "date": "2024-01-11 06:10:00 +0800", "snippet": "&amp;lt;key&amp;gt;LSUIElement&amp;lt;/key&amp;gt;&amp;lt;string&amp;gt;1&amp;lt;/string&amp;gt;或&amp;lt;key&amp;gt;LSUIElement&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; #自闭合标签欢迎评论交流" }, { "title": "CMake系列2:将Info.plist编译到可执行程序里面", "url": "/posts/cmake-2/", "categories": "CMake系列", "tags": "CMake系列", "date": "2024-01-11 06:00:00 +0800", "snippet": "mac的bundle包里面一般都有Info.plist这个文件，但如果不是bundle包，而只是一个可执行文件，如何将它嵌入到可执行程序里面呢？target_link_options(${target} PRIVATE LINKER:-sectcreate,__TEXT,__info_plist,${CMAKE_CURRENT_SOURCE_DIR}/Info.plist)欢迎评论交流" }, { "title": "Python系列4:基本语法", "url": "/posts/python-4/", "categories": "Python", "tags": "Python", "date": "2024-01-10 08:00:00 +0800", "snippet": "Python对大小写敏感语句末尾不用加分号。以冒号:结尾时，缩进的语句视为代码块。可以在数字中间以_分隔，如10_000_000_000当Python解释器读取源代码时，为了让它按UTF-8编码读取，可在开头加上# -*- coding: utf-8 -*-检查python语法正确性：pip install pyflakespyflakes xxx.py注释多行注释分别在开始行和结束行使用三个单引号或三个双引号(“””),注意也可以用’&#39;’xxx’&#39;’表示多行内容新建一个test.py文件，右键选择“Edit with IDLE”，编辑完成后，Ctrl+S保存，然后按下F5就可以执行代码了。注：IDLE是Python官方提供的一个IDE工具。空值Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。如果print时你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串变量同一个变量可以反复赋值，而且可以是不同类型的变量这种变量本身类型不固定的语言称之为动态语言编码ASCII编码是1个字节，而Unicode编码通常是2个字节本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，，只有很生僻的字符才会被编码成4-6个字节在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件ord()函数获取字符的整数表示，chr()函数则相反：ord(&#39;A&#39;)65chr(66)&#39;B&#39;&#39;\\u4e2d&#39; 表示&#39;中&#39;,中的十进制是20013，用十六进制表示就是\\u4e2d，utf8是3个字节的 E4B8AD4E2D是怎么转换成E4B8AD的？4E2D 的二进制表示为 01001110 00101101即 0100 111000 101101根据 UTF-8 编码规则，将二进制形式的 Unicode 编码值转换为 UTF-8 编码。对于三个字节的情况，UTF-8 编码的格式为 1110xxxx 10xxxxxx 10xxxxxx。将4E2D 的二进制表示按照上述格式进行填充，得到 1110 0100 10 111000 10 101101，也就是 E4 B8 AD。格式化用%cars =100 print&quot;There are&quot;, cars,&quot;cars available.&quot;print&quot;Let&#39;s talk about&quot;,my_nameprint&quot;You&#39;re %s old.&quot; % ageprint&quot;Let&#39;s talk about %s and %s.&quot; %(my_name, your_name)r=2.5s=3.1415print(f&#39;The area of a circle with radius {r} is {s:.2f}&#39;) # :后面的.2f指定了保留两位小数%s永远起作用，它会把任何数据类型转换为字符串。包括数字。如果’本身也是一个字符，可以用”“括起来，如果内部既包含’又包含”怎么办？可以用转义字符\\来标识，最外面使用单引号括起来布尔值True,False可用and、or和not运算" }, { "title": "Qt官方示例解析系列9:Style Sheet与style编辑器", "url": "/posts/qt-example-9/", "categories": "Qt官方示例解析", "tags": "Qt官方示例解析", "date": "2024-01-10 07:00:00 +0800", "snippet": "本示例来自5.15.2实现了什么功能一个 setStyleSheet 和 setStyle 示例. 通过提供的一个style编辑器可以很方便的动态修改style sheet并实时预览效果。有个翻页的风格用到的知识点使用了ui文件使用了qss,qrc资源系统部分源码解析最开始就调用 Q_INIT_RESOURCE解析一下MainWindow类：继承于QMainWindownameLabel-&amp;gt;setProperty(&quot;class&quot;, &quot;mandatory QLabel&quot;);里面包了一个StyleSheetEditor主要代码在StyleSheetEditor类：构造函数：用到正则:regExp(&quot;^.(.*)\\\\+?Style$&quot;);解析:^ 开始$ 结束.匹配除换行符以外的任意字符,一个然后是(.*连在一起就意味着0或多个不包含换行的字符然后是),括号表示这是一个捕获组，可以从匹配结果中提取出来。\\+? 重复\\ 1次或更多次，但尽可能少重复Style如 a(bbb)\\StyleQApplication::style()-&amp;gt;metaObject()-&amp;gt;className();//QWindowsVistaStyledefaultStyle = match.captured(1);//WindowsVista其中Q被.匹配了，并捕获 &quot;WindowsVista&quot; 作为一个组。captured 方法来获取这个组的值。当切换样式时，会调用qApp-&amp;gt;setStyle(styleName);当Apply按钮按下时，会qApp-&amp;gt;setStyleSheet应用。loadStyleSheet 函数是读取qss文件的内容，最终也是调用了qApp-&amp;gt;setStyleSheet参考https://doc.qt.io/qt-5/qtwidgets-widgets-stylesheet-example.html" }, { "title": "正则系列1:基础知识", "url": "/posts/regex-1/", "categories": "正则系列", "tags": "正则系列", "date": "2024-01-10 06:45:00 +0800", "snippet": "精确地查找hi这个单词的话，我们应该使用\\bhi\\b^ 匹配 字符串的开始$ 匹配 字符串的结束. 匹配 除换行符以外的任意字符\\b 匹配 单词的开始或结束, 反义:\\B 匹配 不是单词开头或结束的位置, \\D 匹配任意非数字的字符* 0次或多次+ 1次或多次? 0次或1次{2} 连续匹配2次+? 重复1次或更多次，但尽可能少重复假如你要找的是hi后面不远处跟着一个elesos，你应该用\\bhi\\b.*\\belesos\\b参考https://deerchao.cn/tutorials/regex/regex.htm" }, { "title": "Linux命令系列4:vim", "url": "/posts/linux-command-4/", "categories": "Linux命令系列", "tags": "Linux命令系列", "date": "2024-01-10 06:30:00 +0800", "snippet": "设置行号:set nu跳到文件头和文末结尾gg ： 跳转到文件头 Shift+g ： 跳转到文件末尾清空整个文件内容首先，使用gg调整光标到首行，然后使用dG命令即可。全局替换:[addr]s/源字符串/目的字符串/[option] #s表示替换操作如：:%s/源字符串/目的字符串/c:%s/源字符串/目的字符串/g[addr] 表示检索范围：如：“1，20” ：表示从第1行到20行；“%” ：表示整个文件，同“1,$”；“. ,$” ：从当前行到文件尾；[option] : 表示操作类型，如：g 表示全局替换;c 表示进行确认p 表示替代结果逐行显示（Ctrl + L恢复屏幕）；省略option时仅对每行第一个匹配串进行替换；如果在源字符串和目的字符串中出现特殊字符，需要用”\\”转义乱码查看文件编码格式:set fileencoding先检查ssh工具的终端编码格式，不行再编辑~/.vimrc文件，没有就新建该文件，加上如下几行：set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936set termencoding=utf-8set encoding=utf-8执行脚本出现 bad interpreterbad interpreter: No such file or directory很有可能是你的脚本文件是DOS格式的, 即每一行的行尾以\\r\\n来标识vim filename :set ff? 可以看到dos或unix的字样. 如果的确是dos格式的, 那么你可以用:set ff=unix把它强制为unix格式的, 然后存盘退出. 再运行一遍.批量注释1. 按 ESC 进入 Normal 模式，移动游标定位到 12 行的位置。2. 按 ctrl+v 即进入纵向编辑模式。3. 多次按 j 定位到 23 行（结束位置）。4. 按 I（大写的 i） 进入首行插入模式。5. 按 # 号注释配置项，这时首行会被注释掉。6. 在按 ESC 退出纵向编辑模式的同时所有选中的字符前都加了注释，需要等待 1-2 秒才能看到效果。批量删除注释Normal模式-&amp;gt;ctrl+v进入列编辑模式-&amp;gt;上下箭头选中内容-&amp;gt;d删除-&amp;gt;:wq保存即可批量删除多行1.首先在命令模式下，输入“：set nu”显示行号；2.通过行号确定你要删除的行；3.命令输入“：32,65d”,回车键，32-65行就被删除了如果无意中删除错了，可以使用‘u’键恢复" }, { "title": "CEF系列6:编译沙盒库", "url": "/posts/cef-6/", "categories": "CEF系列", "tags": "CEF系列", "date": "2024-01-10 06:15:00 +0800", "snippet": "开启沙盒后，sub-process will be terminated before it can do any harm需要你的程序链接 cef_sandbox 静态库.如何编译才能支持沙盒一般使用官方的automate_git.py脚本sandbox-specific configuration comes from the GetConfigArgsSandbox function in the gn_args.py 最后通过make_distrib.py 工具 combines multiple lib files into a single cef_sandbox.libcd chromium\\src\\cefset GN_DEFINES=is_official_build=truepython3 tools\\gn_args.py执行这个会输出Platform: windowsout/Debug_GN_x64:alternate_cdm_storage_id_key=&quot;968b47690*****28e859454&quot;clang_use_chrome_plugins=falsedcheck_always_on=truedisable_fieldtrial_testing_config=trueenable_background_mode=falseenable_basic_printing=trueenable_cdm_host_verification=trueenable_cdm_storage_id=trueenable_downgrade_processing=falseenable_nacl=falseenable_print_preview=trueenable_resource_allowlist_generation=falseenable_rlz=trueenable_widevine=trueis_component_build=falseis_debug=falseis_official_build=trueoptimize_webui=truetarget_cpu=&quot;x64&quot;v8_enable_sandbox=false...然后cd chromium\\srcautoninja -C out\\Debug_GN_x64_sandbox cef_sandboxcd chromium\\src\\cef\\toolsmake_distrib.bat --allow-partial --sandbox --ninja-build --x64-build --no-archive --no-symbols --no-docs 其中--allow-partial：allow creation of partial distributions--sandbox：include only the cef_sandbox static library--no-archive：don\\&#39;t create archives for output directories应该是不压缩--no-symbols：don\\&#39;t create symbol files，可能就是pdb文件--no-docs：don\\&#39;t create documentation在一个单独的_sandbox目录下，如 Debug_GN_x64_sandbox最终打包生成只生成了一个文件：cef\\binary_distrib\\cef_binary_*_windows64_sandbox\\Debug\\cef_sandbox.lib如 cef_binary_121.0.0-master.2886+ga097b62+chromium-121.0.6167.0_windows64_sandbox\\Release\\cef_sandbox.lib但之前的编译不使用autoninja -C out\\Debug_GN_x64_sandbox cef_sandbox也能编译出cef_sandbox.lib库，暂不清楚2个库的区别，可能上面的是开启了一些额外的选项。参考https://bitbucket.org/chromiumembedded/cef/wiki/SandboxSetup.md" }, { "title": "CEF系列5:官方编译", "url": "/posts/cef-5/", "categories": "CEF系列", "tags": "CEF系列", "date": "2024-01-10 06:00:00 +0800", "snippet": "使用automate-git.py --help脚本编译，具体可以参考系列1这是个CEF build script，它会下载depot_tools(如果没有的话)，还有chromium和CEF源码按官方文档放好目录结构，可以将chromium_git 改成其它目录，就能同时处理多个分支。创建c:\\code\\chromium_git\\update.bat并在cmd里面运行（注意代码路径最好尽量短，不然后面创建文件会失败，目录C:\\code\\cef_compile\\official\\lastest就长了,要少于35个字符），用于启动automate-git.pyset GN_DEFINES=is_official_build=true proprietary_codecs=true ffmpeg_branding=Chromead其中的is_official_build：表示disable debugging code and enable additional link-time optimizations in Release builds，另2个表示开启ffmpeg支持，用于h264解码is_component_build=true 一般不用，用于reduce link time.cannot be used to create a CEF binary distribution.会生成很多小的动态库，而不是生成一个大的静态库。automate-git.py选项--branch=XXXX 用于指定cef分支名--no-distrib: Don&#39;t create a CEF binary distribution.--with-pgo-profiles:Download PGO profiles for the build.--no-build: Do not build CEF.--x64-build ：64位，更多选项可以看对应py脚本会输出：Reading C:\\code\\cef_compile\\official\\lastest\\cef\\CHROMIUM_BUILD_COMPATIBILITY.txtCEF Output Directory: C:\\code\\cef_compile\\official\\lastest\\out_masterWriting C:\\code\\cef_compile\\official\\lastest\\chromium\\.gclientCopying directory C:\\code\\cef_compile\\official\\lastest\\cef to C:\\code\\cef_compile\\official\\lastest\\chromium\\src\\cefWriting C:\\code\\cef_compile\\official\\lastest\\chromium\\src\\out\\cef.branch创建src\\cef\\create.bat 并运行（GN_DEFINES配置项和上面保存一致）(generate Ninja and Visual Studio project files.如cef.sln)最后就是编译autoninja -C out\\Debug_GN_x86 cef参考https://bitbucket.org/chromiumembedded/cef/wiki/MasterBuildQuickStart.mdhttps://chromium.googlesource.com/chromium/src/+/master/docs/component_build.md" }, { "title": "Linux常见问题系列2:Ubuntu配置apt源", "url": "/posts/linux-skills-2/", "categories": "Linux常见问题", "tags": "Linux常见问题", "date": "2024-01-09 06:00:00 +0800", "snippet": "cp /etc/apt/sources.list /etc/apt/sources.list.bak #备份vim /etc/apt/sources.list #修改，里面会有代号，其中trusty是14.04的，16.04是xenial，18.04是bionic，可以通过 cat /etc/lsb-release 查看到把里面的url都换成 mirrors.aliyun.com通过全局替换命令：:%s/源字符串/目的字符串/g或：sed -i &quot;s/archive.ubuntu.com/mirrors.aliyun.com/g&quot; /etc/apt/sources.listsed -i &quot;s/security.ubuntu.com/mirrors.aliyun.com/g&quot; /etc/apt/sources.listapt update #更新列表## apt使用apt-get update -qq # qq:No output except for errors参考http://mirrors.163.com/.help/ubuntu.htmlhttps://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.53322f700fCvX1" }, { "title": "Linux常见问题系列1:Ubuntu如何打开终端terminal", "url": "/posts/linux-skills-1/", "categories": "Linux常见问题", "tags": "Linux常见问题", "date": "2024-01-08 06:10:00 +0800", "snippet": "快捷键Ctrl+Alt+T" }, { "title": "Linux命令系列3:scp传输文件", "url": "/posts/linux-command-3/", "categories": "Linux命令系列", "tags": "Linux命令系列", "date": "2024-01-08 06:00:00 +0800", "snippet": "从本地复制到远程scp test.tar.gz 192.168.1.11:/opt指定端口：scp -P 60022 nginx.tar.gz 192.168.160.44:/opt/ray/从远程复制到本地scp root@112.126.111.250:/root/test.tar.bz2 /root/" }, { "title": "Linux命令系列2:压缩与解压tar", "url": "/posts/linux-command-2/", "categories": "Linux命令系列", "tags": "Linux命令系列", "date": "2024-01-05 06:20:00 +0800", "snippet": "常见压缩文件的扩展名 .gz：gzip压缩的； .bz2：bzip2压缩的； .tar：tar程序打包但没有压缩的； .tar.gz：打包后并经过gzip压缩的； .tar.bz2：打包后并经过bzip2压缩的；语法tar [-j或-z][cv][-f 生成的压缩文件名] 要被压缩的文件或目录 //打包与压缩tar [-j或-z][xv][-f 生成的压缩文件名][-C 解压目录] //解压tar [-j或-z][tv][-f 生成的压缩文件名] //查看参数解释： c建立打包档案，x解压, t查看含有哪些文件，（cxt不能同时使用）v显示处理信息j用于tar.bz2z用于.tar.gz，tgz排除某些文件夹tar zcvf tomcat.tar.gz --exclude=tomcat/logs --exclude=tomcat/webapp/xxxx//WEB-INF/logs tomcat将tomcat目录中，除了tomcat/logs 和 tomcat/webapp/xxxx//WEB-INF/logs 之外的文件压缩成压缩包：tomcat.tar.gz注意，去除的文件夹后面不能带/,否则该文件夹依然会被压缩！又如：如果123目录下有3个子目录，aa、bb、cc。我现在想只对aa和bb目录打包压缩，命令如下：tar -zcvf 123.tar.gz --exclude=cc 123 #在123目录的外面运行使用exclude参数来过滤不需要的目录或文件，排除某个文件的操作和目录一样。示例以test目录为例：压缩首先进入上一层目录tar -jcv-f test.tar.bz2 test查看压缩包里有什么文件:（t重点在查看含有哪些文件，v显示详细信息）tar -jtv-f test.tar.bz2tar -jt-f test.tar.bz2解压tar -jx-f test.tar.bz2 -C/tmp //熟悉后，可以直接tar-jxf test.tar.bz2 -C/tmp解压xz解压tar.xz文件：tar -xvf test.tar.xz如果不能解压，请先执行yum -y install xz xz-devel 解压rarwget http://www.rarlab.com/rar/rarlinux-3.8.0.tar.gz tar zxvf rarlinux-3.8.0.tar.gz cd rar make install解压rar文件，可以使用unrar x **.rar如果报错：unrar: error while loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory解决：yum-y install libstdc++.so.6zip文件unzipyum install -y unzip ziptar (child): bzip2: Cannot exec: No such file or directoryyum install bzip2tar: command not foundyum install tar -yZip 只打包不压缩zip -0 -r mydirectory.zip mydirectory-0 means store and don&#39;t compress (-r recursive, -p preserve relative path).Zip: you have a folder foo, and want to zip it to myzip.zip&quot;C:\\Program Files\\7-Zip\\7z.exe&quot; a -r myzip.zip -w foo -mem=AES256Unzip: you want to unzip it (myzip.zip) to current directory (./)&quot;C:\\Program Files\\7-Zip\\7z.exe&quot; x myzip.zip -o./ -y -r //注意-o后面没有空格参考http://www.ha97.com/4024.htmlhttp://dl528888.blog.51cto.com/2382721/739871http://blog.is36.com/rar_for_linux/欢迎交流" }, { "title": "Qt系列1:阿拉伯语言处理", "url": "/posts/qt-study-1/", "categories": "Qt系列", "tags": "Qt系列", "date": "2024-01-05 06:10:00 +0800", "snippet": "判断是不是阿拉伯语layoutDirection() == Qt::RightToLeft或用语言locale判断layout-&amp;gt;setAlignment(Qt::AlignRight);layout-&amp;gt;setDirection(QBoxLayout::RightToLeft);有可能setContentsMargins的左右边距参数要互换，阿拉伯一般是设置右边距还有addStretch的添加次序可能要调整如果控件没对齐，可能要设置下父控件的宽度。欢迎交流" }, { "title": "CEF系列4:任意分支编译之4389", "url": "/posts/cef-4/", "categories": "CEF系列", "tags": "CEF系列", "date": "2024-01-05 06:00:00 +0800", "snippet": "具体参考系列1需要vs2017和对应的Windows sdk版本，不支持vs2022，需要用 -ide=vs2017gclient sync --nohooks --no-history时报错：具体是dav1d下载报错error: RPC failed; HTTP 400 curl 22 The requested URL returned error: 400fatal: expected &#39;packfile&#39;解决：直接clone一份libdav1d放在third_party\\dav1d目录下，然后按照根目录下的DEPS里面的commit Id切换到对应提交点。不需要autoninja -C out\\Release_GN_x64_sandbox cef_sandbox,需要编译autoninja -C out\\Debug_GN_x64 cef最后打包make_distrib.bat --ninja-build --x64-build最后打包会生成cef_binary_89.0.0+gb36241d+chromium-89.0.4389.114_windows64.zip" }, { "title": "网络协议系列1:磁力链接", "url": "/posts/protocol-1/", "categories": "网络协议系列", "tags": "网络协议系列", "date": "2024-01-04 06:15:00 +0800", "snippet": "磁力链接Magnet URI schememagnet:?xt=urn:btih:4DB578BE8FE577DB56C9A837BE9DEB73631D18A9&amp;amp;dn=Fargo.S05E01.1080p.FIX%e5%ad%97%e5%b9%95%e4%be%a0&amp;amp;tr=http%3a%2f%[2ft.nyaatracker.com](http://2ft.nyaatracker.com/)%2fannounce&amp;amp;tr=http%3a%2f%[2fshare.camoe.cn](http://2fshare.camoe.cn/)%3a8080%2fannounce&amp;amp;tr=http%3a%2f%[2ftracker.kamigami.org](http://2ftracker.kamigami.org/)%3a2710%2fannounce其中dn表示显示名称其它最常见的参数是”xt”，”exact topic”的缩写，它包含文件散列函数值的URN，URN是统一资源名称（Uniform Resource Name），它是统一资源标识（URI）的历史名字，BTIH（BitTorrent Info Hash）是BitTorrent使用的散列函数算法tr：Tracker地址，BT下载的Tracker URL参考https://zh.wikipedia.org/zh-cn/磁力链接" }, { "title": "chromium系列4:添加3方库", "url": "/posts/chromium-4/", "categories": "chromium系列", "tags": "chromium系列", "date": "2024-01-04 06:00:00 +0800", "snippet": "都放在third_party目录下有2种方法引用代码： 在根目录DEPS文件的entries里面放上git repo。 如果不是git，也可以放一个snapshot 通过DEPS拉代码：要在谷歌官方仓库里面镜像然后在根目录的DEPS里面添加，如&#39;src/third_party/dav1d/libdav1d&#39;: Var(&#39;chromium_git&#39;) + &#39;/external/github.com/videolan/dav1d.git&#39; + &#39;@&#39; + &#39;47107e384bd1dc25674acf04d000a8cdc6195234&#39;,此外还要添加一些文档，如OWNERS，README.chromium等参考https://chromium.googlesource.com/chromium/src/+/main/docs/adding_to_third_party.md" }, { "title": "cmd系列4:长命令换行", "url": "/posts/cmd-4/", "categories": "cmd系列", "tags": "cmd系列", "date": "2024-01-03 07:15:00 +0800", "snippet": "cmake -S src ^ # ^ 表示命令将在下一行继续。" }, { "title": "CEF系列3:查看cef版本", "url": "/posts/cef-3/", "categories": "CEF系列", "tags": "CEF系列", "date": "2024-01-03 07:00:00 +0800", "snippet": "编译后会生成 include/cef_version.h#define CEF_VERSION &quot;121.0.0+g2201028+chromium-121.0.6167.16”g2201028 要去掉前面的g，然后才是7位的commit id" }, { "title": "CEF系列2:打包", "url": "/posts/cef-2/", "categories": "CEF系列", "tags": "CEF系列", "date": "2024-01-03 06:50:00 +0800", "snippet": "编译完成之后，就可以打包了：cd cef\\toolsmake_distrib.bat --ninja-build --x64-build #在binary_distrib目录输出：Creating C:\\code\\cef_compile\\6167\\src\\cef\\binary_distrib\\cef_binary_121.0.0+g2201028+chromium-121.0.6167.16_windows64 directory...Creating C:\\code\\cef_compile\\6167\\src\\cef\\binary_distrib\\cef_binary_121.0.0+g2201028+chromium-121.0.6167.16_windows64\\Release directory这步报错了：具体是combine_libs.py 生成 Release\\\\cef_sandbox.lib 时报 RuntimeError: lib.exe exited with status 1107官方论坛里面有说need to use automate-git.py to create an official build, or follow the cef_sandbox build instructions：https://bitbucket.org/chromiumembedded/cef/wiki/SandboxSetup.mdautoninja -C out\\Release_GN_x64_sandbox cef_sandbox #进入_sandbox目录编译下cef_sandboxninja: Entering directory `out\\Release_GN_x64_sandbox&#39;[1028/1028] LIB obj/cef/cef_sandbox.lib重新运行并添加 -minimal选项（include only release build binary files）,不然会尝试打包Debug版本，如：Copying files from C:\\code\\cef_compile\\6167\\src\\out\\Debug_GN_x64 to C:\\code\\cef_compile\\6167\\src\\cef\\binary_distrib\\cef_binary_121.0.0+g2201028+chromium-121.0.6167.16_windows64\\Debug或者把debug版本也编译一下make_distrib.bat --ninja-build --x64-build --minimal...Creating zip archive for cef_binary_121.0.0+g2201028+chromium-121.0.6167.16_windows64_minimal...Creating zip archive for cef_binary_121.0.0+g2201028+chromium-121.0.6167.16_windows64_minimal_release_symbols...参考https://www.magpcss.org/ceforum/viewtopic.php?f=6&amp;amp;t=18764https://magpcss.org/ceforum/viewtopic.php?f=6&amp;amp;t=18346" }, { "title": "CEF系列1:windows平台自己拉分支编译支持H264", "url": "/posts/cef-1/", "categories": "CEF系列", "tags": "CEF系列", "date": "2024-01-03 06:30:00 +0800", "snippet": "CEF，全称为Chromium Embedded Framework，它可以让你在应用里面嵌入浏览器https://bitbucket.org/chromiumembedded/cef/先配置好 depot_tools编译，没有用官方的automate-git.py：最好始终在一个cmd终端里面操作。git clone https://bitbucket.org/chromiumembedded/cef.git -b 6167 --depth 1cef与chromium和depot_tools的版本对应关系在 “cef\\CHROMIUM_BUILD_COMPATIBILITY.txt”{&#39;chromium_checkout&#39;: &#39;refs/tags/121.0.6167.16&#39;,&#39;depot_tools_checkout&#39;: &#39;6444de14d1&#39;}根据对应关系，下载相应版本：把depot_tools切换到对应的commitId（切换之前最好备份下目录），并禁用更新，不然后面gclient时又会更新到新版了。git reset --hard 6444de14d1git clone https://chromium.googlesource.com/chromium/src.git -b 121.0.6167.16 --depth 1 #如果要编译其它cef版本最好也这样下载，不要通过切换分支去切换代码。gclient config https://chromium.googlesource.com/chromium/src.git --unmanaged # 生成.gclientgclient sync --nohooks --no-history #在.gclient文件同级目录执行gclient runhooksgit tag然后将cef拷贝到chromium源码目录的src\\cef下，进入cef目录，以下都在cmd终端里面一条一条运行set GN_DEFINES=is_official_build=true proprietary_codecs=true ffmpeg_branding=Chromeset GN_ARGUMENTS=--ide=vs2022 --sln=cef --filters=//cef/*call cef_create_projects.bat # generate Ninja and Visual Studio project files.会生成cef.sln输出：Generating CEF version header file...Patching build configuration and source files for CEF...95 patches total (95 applied, 0 skipped, 0 failed)...Generating CEF project files...Creating C:\\code\\cef_compile\\6167\\src\\out\\Debug_GN_x64 directory.Generating Visual Studio projects took 4498msDone. Made 19516 targets from 3565 files in 15462msCreating C:\\code\\cef_compile\\6167\\src\\out\\Release_GN_x64 directory.在C:/code/cef_compile/6167/src/tools/update_pgo_profiles.py里面报错了：RuntimeError: requested profile &quot;C:\\code\\cef_compile\\6167\\src\\chrome\\build\\pgo_profiles\\chrome-win64-6167-1702403312-82d61bcc654e9a17abfd09e1a6b05cf3c78be59e.profdata&quot; doesn&#39;t exist原因是没有下载profdata 文件根据提示修复，在.gclient 文件里面添加&quot;custom_vars&quot;: { &quot;checkout_pgo_profiles&quot;: True,},then run &quot;gclient runhooks&quot; to download it.Running hooks: 49% (84/171) Fetch PGO profiles for win-arm64重新运行call cef_create_projects.bat生成了Debug_GN_x64，Debug_GN_x64_sandbox，Release_GN_x64等8份目录，我们只要其中一个：编译cd C:\\code\\cef_compile\\6167\\src #chromium源码目录下autoninja -C out\\Release_GN_x64 cefninja: Entering directory `out\\Release_GN_x64&#39;[61904/61904] STAMP obj/cef/cef.stamp # 跟chromium一样，要几个小时运行下 cefclient.exe，加载一下&amp;lt;https://html5test.com/&amp;gt; 看看是否支持H264但最后打包失败了，下一篇单独讲。参考https://bitbucket.org/chromiumembedded/cef/wiki/MasterBuildQuickStarthttps://www.cnblogs.com/zgliubo/p/16423247.html" }, { "title": "cmd系列3:当前目录与参数传递", "url": "/posts/cmd-3/", "categories": "cmd系列", "tags": "cmd系列", "date": "2024-01-03 06:10:00 +0800", "snippet": "脚本test.bat内容如下python.bat %~dp0\\make_distrib.py --output-dir %~dp0\\..\\binary_distrib\\ %* # %~dp0 是批处理脚本自身的目录# %*：这是所有传递给批处理脚本test.bat的参数。这些参数将被传递给 make_distrib.py 脚本。" }, { "title": "cmd系列2:echo环境变量的值", "url": "/posts/cmd-2/", "categories": "cmd系列", "tags": "cmd系列", "date": "2024-01-03 06:00:00 +0800", "snippet": "echo %PATH%" }, { "title": "CMake系列1:编译多架构程序", "url": "/posts/cmake-1/", "categories": "CMake系列", "tags": "CMake系列", "date": "2024-01-02 06:30:00 +0800", "snippet": "cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=&quot;x86_64;arm64&quot; -S . -B build #指定源码在当前目录，输出到build目录下cmake --build build#编译" }, { "title": "windows常见问题系列2:如何在终端打开当前文件夹", "url": "/posts/win-skills-2/", "categories": "windows常见问题", "tags": "windows常见问题", "date": "2024-01-02 06:00:00 +0800", "snippet": "explorer .大家新年快乐" }, { "title": "微信开发系列1:小程序", "url": "/posts/wxapp-1/", "categories": "微信开发系列", "tags": "微信开发系列", "date": "2024-01-01 04:30:00 +0800", "snippet": "下载并安装官方开发者工具：官网地址：https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html/pages/ ← 页面文件/app.js ← 小程序入口脚本/app.json ← 全局配置/app.wxss ← 全局样式完成开发后，点击 “上传” 按钮提交代码到小程序后台登录 微信公众平台，进入“版本管理”提交审核（一般审核时间 1~3 天）审核通过后点击“发布”上线所有后端接口域名必须完成HTTPS备案在公众平台【开发→开发设置→服务器域名】中配置后端服务：推荐选择”微信云开发”（免费基础资源）接入云开发（不需要自己搭服务器）" }, { "title": "酒类系列5:拉菲波尔多和梅多克", "url": "/posts/wine-5/", "categories": "酒类系列", "tags": "酒类系列", "date": "2023-12-31 17:30:00 +0800", "snippet": "拉菲波尔多和梅多克是法国波尔多地区的两个著名产区，拉菲波尔多产区位于波尔多左岸而梅多克产区位于波尔多右岸，拉菲波尔多的葡萄酒更加优雅、精致，而梅多克的葡萄酒则更加浓烈、果味浓郁。拉菲珍藏和传奇都是法国波尔多地区的顶级葡萄酒品牌拉菲珍藏通常是由拉菲酒庄的特殊年份酿造而成，高品质的葡萄酒通常在10年或更长时间的陈年后才能上市，因此拉菲珍藏的产量非常有限，价格也非常昂贵。传奇则是拉菲酒庄的第二款葡萄酒，在拉菲酒庄主要产出的标准葡萄酒之外，传奇是一个更经济的选择。" }, { "title": "酒类系列4:红葡萄酒的度数，甜度与醒酒", "url": "/posts/wine-4/", "categories": "酒类系列", "tags": "酒类系列", "date": "2023-12-31 10:30:00 +0800", "snippet": "根据质检总局规定，所有进口酒都必须在酒瓶背面贴上中文酒标，而中文酒标的信息是跟正面酒标一样的，所以在购买进口酒时不用担心看不懂酒标。酒标上一般会有酒庄名，年份等消息在选购红酒时，一般只需关注酒庄名、产地、度数、甜型还是干型即可度数对于口感有一定的影响，度数在11%Vol以下的葡萄酒被称为低度酒精葡萄酒，11%-13.9%Vol之间为中度酒精葡萄酒，14%Vol及以上则为高度酒精葡萄酒。高度数的红葡萄酒入口厚重粘稠，部分口味偏甜。低度数的葡萄酒入口轻盈爽快，也有部分出现酸度偏高的现象。而中度数的葡萄酒也是最常见的，酸度和甜度均匀，最受欢迎。按照甜度，红酒可以分为四种，残糖量越大喝起来越甜：1. 干型：酒中的残糖含量＜4g/L；2. 半干型：4g/L＜残糖含量＜12g/L；3. 半甜型：12g/L＜残糖含量＜45g/L；4. 甜型：残糖含量＞45g/L真假怎么看1. 看酒瓶上的标签和防伪码，真酒的防伪码是非常精致的，仔细观察还会发现有花纹2. 看酒塞的标识和防盗代码，真酒酒塞的标识与外包装保持一致，另外，也可以通过官网查看真伪 看酒液颜色，年份越久，酒液的颜色越深，而且一般真酒的颜色也是偏深的，浓稠度均匀，不会出现颜色深浅不一的情况。 怎么醒酒 醒酒是指通过加速葡萄酒氧化的过程，让葡萄酒释放其原有的芳香，并且使其口感变得细腻顺滑。红酒不“醒”可能会增加醉意，易上头，而且口感酸涩，入口冲鼻，往往就是因为红酒里有一种叫“单宁”的物质，没有得到氧化。 一般情况下，普通红酒醒酒只需5-15分钟即可饮用，但若陈年珍藏了很久的红酒，则需要一天甚至更久的时间来醒酒。醒酒时也有讲究，将红酒醒酒器倾斜，让酒液沿着器壁缓缓倒入，这样就能使红酒和氧气充分接触了。" }, { "title": "酒类系列3:葡萄酒分类", "url": "/posts/wine-3/", "categories": "酒类系列", "tags": "酒类系列", "date": "2023-12-31 09:30:00 +0800", "snippet": "葡萄酒包括红葡萄酒、白葡萄酒、桃红葡萄酒、起泡酒以及香槟这几类白葡萄酒是用白葡萄（如霞多丽、长相思、雷司令等），或红皮白肉的红葡萄（如黑皮诺、赤珠霞）酿造的，酿造时果汁与葡萄皮分离、澄清，常见的酒液颜色为金黄色、黄绿色等。桃红葡萄酒酒液颜色介于红葡萄酒和白葡萄酒之间，所用原料与红葡萄酒相差无异，这种颜色是最考验酿酒技术的，需要严格控制果皮和葡萄汁的接触时间，才能获取理想的口感和颜色。葡萄酒按二氧化碳压力值分，可分为两大类：在20℃时,酒中二氧化碳压力＜0.5bar的葡萄酒称为静止葡萄酒,红、白、桃红葡萄酒就属于这类；而酒中二氧化碳压力≥0.5bar的葡萄酒称为起泡葡萄酒，起泡酒和香槟则属于起泡葡萄酒。起泡葡萄酒就是会起泡的酒，香槟也是起泡酒的一种，但是根据法国香槟原产地保护制度,只有在法国香槟区选用指定的葡萄品种，用传统法酿制而成的起泡酒,才可标注为香槟(Champagne)。总之香槟一定是起泡酒，但起泡酒不一定是香槟。" }, { "title": "酒类系列2:红葡萄酒选购", "url": "/posts/wine-2/", "categories": "酒类系列", "tags": "酒类系列", "date": "2023-12-31 08:30:00 +0800", "snippet": "波尔多、勃艮gen第是法国最受尊崇的两大葡萄酒产区 法国，罗曼尼康帝（ROMANEE-CONTI），罗曼尼康帝酒庄目前共有8个葡萄园，均为勃艮第特级葡萄园(Grand Cru)，分别为拉塔希园、罗曼尼圣维旺园、依瑟索园，大依瑟索园、李其堡园、科通园、罗曼尼康帝园、蒙哈榭园。罗曼尼康帝特级园红酒价格通常在10万人民币以上，而平价的依瑟索园、科通园则标价1、2万元左右。 勒桦，Leroy，也是勃艮第酒庄分为两类，一类为酒庄酒，产自酒庄(Domaine Leroy)自有葡萄园；一类为酒商酒，葡萄采购自周边酒农，而非自家庄园，属于勒桦酒商(Maison Leroy)。前者一般为红色封口，后者为白色，因此也分别被称作“红头勒桦”与“白头勒桦”勒桦酒庄的葡萄园大部分为特级园和一级园，此外还有村级园和大区级园 柏图斯，（Chateau Petrus）波尔多右岸波美侯产区 ，只生产一款葡萄酒，那就是柏图斯梅洛，柏图斯平均年产不到30000瓶，数量不及拉菲古堡的1/6 美国的啸鹰酒庄，酒庄出产着当今葡萄酒世界最受瞩目的赤霞珠干红，采用Clone 7赤霞珠葡萄，啸鹰酒庄赤霞珠干红目前国际税前均价在3682美元左右，京东平台上，2015年份的新酒标价26800元。 美国的哈兰酒庄，赤霞珠占比70%，梅洛占比20% 法国的罗斯柴尔德木桐堡，酒庄目前共有木桐堡正牌酒和小木桐两款红酒。 法国拉图酒庄，头牌葡萄酒大拉图，边缘地块则一般用于副牌酒拉图堡，也叫小拉图的酿造。大拉图价格在5000-10000元区间内，部分顶级年份可突破万元；小拉图价位亲民，一般2500元即可入手，拉图酒庄已在2011年退出期酒销售模式，即2011年后，拉图酒庄将不再以期酒形式售卖葡萄酒。通俗来说，就是拉图酒庄将会自行对葡萄酒进行窖藏，待葡萄酒成长到适合饮用的时期再行发售。因此，若选购时遇到新年份的酒标，那么你很大概率是碰上假酒了 法国侯伯王，又译红颜容、奥比昂， 侯伯王是目前五大庄中性价比最高的选择，多次获得帕克满分，市场交易价却远低于拉图、拉菲等其他名庄， 法国玛歌，玛歌酒庄的红酒可分为三款：正牌玛歌葡萄酒、副牌玛歌红亭葡萄酒、玛歌三牌酒，在京东平台上，玛歌正牌葡萄酒的售价在4500-6000元之间。 法国拉菲，酒标有“五支箭”，共有两款红酒，分别为拉菲罗斯柴尔德古堡（大拉菲）和拉菲罗斯柴尔德珍宝（小拉菲），大拉菲售价大致为4800-10000元，小拉菲售价在3000元左右，拉菲罗斯柴尔德集团还收购了不少小酒庄，出产带有罗斯柴尔德家族“五支箭”标志的中低端红酒，这些红酒常出现在普通超市内，售价大多在500元以内。 拉菲古堡、木桐堡都属于罗斯柴尔德家族，酒标均有“五支箭”，但其实二者属于不同的支系集团，前者为拉菲罗斯柴尔德集团，后者为罗斯柴尔德男爵集团 意大利的圣圭托酒庄，创造了西施佳雅，西施佳雅是目前性价比最高的顶级红酒之一，在京东、天猫等电商平台上，一般1500-2500元就可以入手一瓶。 法国里鹏，波尔多右岸波美侯新贵，里鹏只生产一款红葡萄酒 澳大利亚奔富，澳洲第一葡萄酒庄。的奔富中端酒Bin 407，Bin 407被认为是Bin 707的平价版，京东售价700元，Bin 707则索价4000元左右。葛兰许是奔富的顶级酒款，同时也是澳洲最贵的葡萄酒，一瓶葛兰许售价在4500-6000元内。 西班牙维格西西莉亚，Unico唯一，维格西西莉亚的正牌产品，Valbuena 5°瓦布娜五号是维格西西莉亚的入门酒，Unico售价为3500-4000元左右，Valbuena 5°便宜不少，要价在1500元左右。 美国的作品一号，作品一号除了正牌酒Opus One之外，还推出了副牌酒，序曲Overture 美国鹿跃酒窖，旗舰产品Cask 23以熟成时的橡木桶编号命名，是鹿跃酒窖第一款葡萄酒，国内售价在2900元左右。区内还有一家“鹿跃酒庄”(Stags’ Leap Winery)，两家鹿跃位置相邻，名字雷同，曾因此闹上加州最高法院，后来经过协调，二者确定了各自的酒庄名字，一个分号在s前，一个在s后，若打定主意购买鹿跃酒窖(Stag’s Leap Wine Cellars)的产品，需要细心甄别。 美国蒙大菲酒庄 " }, { "title": "UML系列1:入门", "url": "/posts/uml-1/", "categories": "UML系列", "tags": "UML系列", "date": "2023-12-30 06:00:00 +0800", "snippet": "动物依赖氧气，虚线箭头表示, 箭头指向被依赖者关联：拥有关系，实线箭头指向被拥有者聚合：整体和部分的关系, 部分可以离开整体单独存在， 空心菱形实线箭头表示, 菱形指向整体组合 整体和部分的关系,但部分不能离开整体而单独存在 实心菱形实线箭头表示, 菱形指向整体聚合和组合容易搞混，这俩都是表示整体和部分,has-a关系，它俩最大的区别就是整体负不负责个体的生命周期, 不负责就是聚合，负责就是组合，关联 是拥有关系 ，类似于”知道”，比如人和气候就是关联聚合是一种强耦合的关联关系耦合强度等级：关联-&amp;gt;聚合-&amp;gt;组合，比如界面上有一个搜索框，就是一个聚合关系，但如果是外部传入的，那就是关联关系。泛化 实线空心三角表示, 箭头指向父类实现 虚线空心三角表示, 箭头指向接口" }, { "title": "C++系列8:const与生命周期", "url": "/posts/cpp-8/", "categories": "C++系列", "tags": "C++系列", "date": "2023-12-29 08:00:00 +0800", "snippet": "const char* p = qString.toStdString().c_str()这种方式，toStdString()会生成一个临时对象，执行c_str()后就消亡了如果把qString.toStdString().c_str()直接放在printf里面输出是没问题的。但是如果把p传给第3方库接口或后面再使用p就容易出现野指针问题。解决：使用const引用延长生命周期一直到当前的局部作用域结束。{ const string&amp;amp; pstr= qString.toStdString(); const char *p = pstr.c_str() ...//use p}或者不用QString，直接使用std::string。就不会生成临时对象了。" }, { "title": "depot_tools系列3:首次运行gclient时报错", "url": "/posts/depot-tools-3/", "categories": "depot_tools系列", "tags": "depot_tools系列", "date": "2023-12-29 07:15:00 +0800", "snippet": "首次运行gclient时报错:depot_tools\\\\.cipd_bin\\goma_ctl.py&quot;, line 403, in communicate这个goma是一个distributed compiler service，可以不需要。在goma_ctl.py里面_CheckOutput传入的第一个参数是C:\\code\\depot_tools.cipd_bin\\gomacc.exe可以先创建一个分支git new-branch xxx git map-branches -v然后在update_depot_tools.bat里面屏蔽它。然后再运行gclient最后DEPOT_TOOLS_UPDATE=0禁止更新参考https://magpcss.org/ceforum/viewtopic.php?f=6&amp;amp;t=19395" }, { "title": "YAML系列1:常用语法", "url": "/posts/yaml-1/", "categories": "YAML系列", "tags": "YAML系列", "date": "2023-12-28 22:00:00 +0800", "snippet": "用来写配置文件的语言 使用缩进表示层级关系 缩进时不允许使用Tab键，只允许使用空格。 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可# 表示注释&#39;key: value&#39; 的形式组成(冒号后面必须是一个空格)" }, { "title": "Markdown系列1:常用语法", "url": "/posts/markdown-1/", "categories": "Markdown系列", "tags": "Markdown系列", "date": "2023-12-28 07:00:00 +0800", "snippet": "markdown可以让你专注于写作而不是排版标题在文本前面加上 # 即可，同理，还可以增加二到六级标题，总共六级注：# 和标题之间保留一个字符的空格代码如果只有一行可以用 ` （Esc下面的那个键）将语句括起来。如果为多行，可以将```置于这段代码的首行和末行。列表无序列表在前面加上星号、减号或是加号有序列表，直接在文字前面加上 1. 2. 3. 就可以：注：减号和’1.’ 要和文本之间要保留一个空格。粗体两个 * 包含一段文本斜体一个 * 包含一段文本链接&amp;lt;url&amp;gt; //用于直接显示链接[链接名称](链接地址)![elesos](/home/picture/1.png)为何要用markdown无论是 EPUB, mobi，还是 Kindle 用的专有格式 .azw，都只是把一堆 HTML 文件打包而已。如果你写的是书，用 Markdown格式后，可以很方便地转为这些格式.使用Word时，我们会花费大量力气去排版，试图让文档变得漂亮一些。是粗体还是斜体，是宋体还是黑体，对创作来说，有那么重要吗？ 方便版本跟踪：每一位自杀的写作者电脑里，都必然有一个Word文档，从V1.0到V20.0的无数版本. 方便协作 Markdown语法简单到每个人都可以在5分钟内学会。参考http://www.jianshu.com/p/q81RERhttp://www.appinn.com/markdown/https://laravel-china.org/topics/621/you-will-be-able-to-master-these-markdown-grammarshttp://www.jianshu.com/p/qqGjLNhttp://www.jianshu.com/p/PpDNMGhttps://www.jianshu.com/p/280c6a6f2594https://www.runoob.com/markdown/md-link.html" }, { "title": "C++系列7:using与继承", "url": "/posts/cpp-7/", "categories": "C++系列", "tags": "C++系列", "date": "2023-12-27 08:40:00 +0800", "snippet": "public继承会继承基类的成员函数（除了构造函数和子类有的同名函数）class Human:public Animal{public: using Animal::Animal; //继承基类所有构造函数 using Animal::eat;//继承基类的同名函数：不管参数是否一样只要函数名相同就算是同名函数，都会被隐藏};参考https://zhuanlan.zhihu.com/p/98193858" }, { "title": "酒类系列1:白酒选购", "url": "/posts/wine-1/", "categories": "酒类系列", "tags": "酒类系列", "date": "2023-12-27 08:30:00 +0800", "snippet": "品牌：贵州茅台，四川五粮液等等茅台代表作：飞天53°500ml，酱香，1499元一般买不到。得写个抢购脚本试试。五粮液普五第八代 浓香型白酒 52度 500ml ，约1000元郎酒 红花郎15 酱香型白酒 53度 500ml约500元郎酒 红花郎10 第四代 酱香型白酒 53度 500ml 约300元郎酒 青花郎 酱香型白酒 53度 500ml 约1000元￼贵州习酒 君品53度酱香型白酒 500mL 约1000元洋河 梦之蓝M6 52度 550ml 浓香型￼￼约800元" }, { "title": "C++系列6:如何在程序运行之前执行某些操作", "url": "/posts/cpp-6/", "categories": "C++系列", "tags": "C++系列", "date": "2023-12-27 07:20:00 +0800", "snippet": "定义全局作用域的对象，该对象的构造函数会在程序运行之前执行，也就是在main函数之前执行。析构函数在main之后执行。#define RegisterBuilderByType(BuilderClassName, type) \\ ExecuteBeforeMain(BuilderClassName){\\ theFactory-&amp;gt;registerWidget(new (BuilderClassName), type);\\ }#define ExecuteBeforeMain(ClassName)\\struct ExecuteBeforeMain##ClassName{\\ ExecuteBeforeMain##ClassName();\\}__##ExecuteBeforeMain##ClassName;\\ExecuteBeforeMain##ClassName::ExecuteBeforeMain##ClassName()展开 RegisterBuilderByType(MyBuilderClass, MyType); 的步骤如下：ExecuteBeforeMain(MyBuilderClass) { theFactory-&amp;gt;registerWidget(new (MyBuilderClass), MyType);}继续展开：struct ExecuteBeforeMainMyBuilderClass {//定义了一个结构体，并在内部定义了一个构造函数 ExecuteBeforeMainMyBuilderClass();} __ExecuteBeforeMainMyBuilderClass;//在全局作用域中创建了一个名为__xxx的对象，这样程序运行之前会自动执行该对象的构造函数。ExecuteBeforeMainMyBuilderClass::ExecuteBeforeMainMyBuilderClass() { theFactory-&amp;gt;registerWidget(new (MyBuilderClass), MyType);}" }, { "title": "C++系列5:auto关键字", "url": "/posts/cpp-5/", "categories": "C++系列", "tags": "C++系列", "date": "2023-12-27 07:10:00 +0800", "snippet": "一般用于自动推断值的类型可以使用指针和引用运算符修饰auto，auto* 的作用是告诉编译器，值是一个指针类型，并且根据右侧表达式的类型进行类型推导。" }, { "title": "C++系列4:位运算的巧妙运用", "url": "/posts/cpp-4/", "categories": "C++系列", "tags": "C++系列", "date": "2023-12-27 07:00:00 +0800", "snippet": "Template = 1 &amp;lt;&amp;lt; 0,MainType = 0x0000FFFF,Basic = 0x10000 &amp;lt;&amp;lt; 0,SubType = 0xFFFF0000,TemplateBasic = Template | Basic,#define GetMainType(type) (PropertyType)((int)type &amp;amp; (int)PropertyType::MainType)同理可以定义GetSubTypeGetMainType(TemplateBasic)的计算过程如下：1. 总体是将 `TemplateBasic` 的值（即 `Template | Basic`）与 `PropertyType::MainType` 进行按位与运算。2. `TemplateBasic` 的值为 `Template | Basic`，即 `0x00000001 | 0x00010000`，结果为 `0x00010001`。3. `PropertyType::MainType` 的值为 `0x0000FFFF`。4. 进行按位与运算：`0x00010001 &amp;amp; 0x0000FFFF`。5. 最终的结果为 `0x00000001`，即 `PropertyType` 枚举中 `Template` 的值。因此，`GetMainType(TemplateBasic)` 的计算结果为 `Template`。" }, { "title": "AI系列4:Midjourney介绍", "url": "/posts/ai-4/", "categories": "AI系列", "tags": "AI系列", "date": "2023-12-26 08:40:00 +0800", "snippet": "人工智能程序，可根据文本生成图像，2022年7月12日进入公开测试阶段。" }, { "title": "AI系列3:DALL-E介绍", "url": "/posts/ai-3/", "categories": "AI系列", "tags": "AI系列", "date": "2023-12-26 08:30:00 +0800", "snippet": "通过文本描述生成图像的人工智能程序，于2021年1月5日由OpenAI发表。通过120亿参数版本的GPT-3 Transformer模型来理解自然语言输入并生成相应的图片。2022年4月，OpenAI宣布了新版本的DALL-E 22023 年 9 月份发布的DALL・E 3 与上一代模型 DALL・E 2 最大的区别在于，它可以利用 ChatGPT 生成提示（prompt），然后让模型根据该提示生成图像。对于不擅长编写提示的普通人来说，这一改进大大提高了 DALL・E 3 的使用效率。https://github.com/openai/DALL-E参考https://openai.com/dall-e-3https://openai.com/blog/dall-e-3-is-now-available-in-chatgpt-plus-and-enterprise" }, { "title": "Qt官方示例解析系列8:Flow Layout流式布局", "url": "/posts/qt-example-8/", "categories": "Qt官方示例解析", "tags": "Qt官方示例解析", "date": "2023-12-26 07:15:00 +0800", "snippet": "实现了什么功能可以根据窗口大小,自动将控件换行.用到哪些重要的类QLayout部分源码解析子类化QLayout，需要重新实现一些函数。具体见帮助文档addItem将item放在一个list中。takeAt删除并返回。计算水平和垂直间距时，用到了QStyle::PixelMetric：style()-&amp;gt;pixelMetric,先获取QWidget的QStyle，然后调用其pixelMetric函数以获取适当的像素度量值。minimumSize方法：QSize::expandedTo 是 QSize 类的成员函数，用于获取两个尺寸中的较大值。最后将边距的左右值与 size 的宽度相加，并将边距的上下值与 size 的高度相加，它最重要的函数是 doLayout：QStyle::layoutSpacing 返回2个控件之间的间距。nextX ：计算下一个布局项的 x 坐标，为当前 x 坐标加上当前布局项的推荐宽度和水平间距。如果下一个布局项的 x 坐标减去水平间距大于 effectiveRect 的右边界，并且当前行的高度大于 0，则表示当前行已满，需要换行：将 y 坐标增加当前行的高度和垂直间距。如何知道有几行？可添加一个变量 mutable int m_lines;，在 doLayout 中每次换行时将其加 1即可。参考https://doc.qt.io/qt-6/layout.htmlhttps://doc.qt.io/qt-6/qtwidgets-layouts-flowlayout-example.html" }, { "title": "C++系列3:as_const", "url": "/posts/cpp-3/", "categories": "C++系列", "tags": "C++系列", "date": "2023-12-26 07:00:00 +0800", "snippet": "创建一个const的引用，const_cast用于移除const属性。" }, { "title": "AI系列2:ChatGPT介绍", "url": "/posts/ai-2/", "categories": "AI系列", "tags": "AI系列", "date": "2023-12-25 22:30:00 +0800", "snippet": "全称是Chat Generative Pre-trained Transformer，OpenAI开发的聊天机器人，于2022年11月30日推出。2023年3月12日，OpenAI发布多模态模型GPT-42023年10月,新增了DALLE-3图像生成功能2023年11月，推出新模型 GPT-4 Turbo类似产品：2023年2月，谷歌推出类似于ChatGPT的对话人工智能服务Bard2023年3月，由前OpenAI员工共同创立的初创公司Anthropic推出了大型语言模型Claude。" }, { "title": "排行榜系列2:编程语言排行", "url": "/posts/rank-2/", "categories": "排行榜系列", "tags": "排行榜系列", "date": "2023-12-25 07:20:00 +0800", "snippet": "https://www.tiobe.com/tiobe-index/2023年12月情况：Python第一，C第2，C++第3，JS第6，PHP第7，Go第13" }, { "title": "Qt官方示例解析系列7:Fortune Server and Client", "url": "/posts/qt-example-7/", "categories": "Qt官方示例解析", "tags": "Qt官方示例解析", "date": "2023-12-25 07:15:00 +0800", "snippet": "这个示例与上一个类似，只是使用了QTcpServer和 QTcpSocket服务端用到了 QTcpServerQTcpServer::newConnection信号收到后，就tcpServer-&amp;gt;nextPendingConnection();发送数据，最后disconnectFromHost();其它：Qt::TextBrowserInteraction 的作用是允许用户与文本标签进行交互，类似于文本浏览器（QTextBrowser）的交互行为。具体来说，它允许用户选择和复制文本内容，以及在文本中点击链接。QGuiApplication::styleHints()-&amp;gt;showIsFullScreen() 检查当前应用程序是否处于全屏QNetworkInterface::allAddresses();用于获取当前系统上所有网络接口的 IP 地址。Threaded Fortune Server解析重新实现了QTcpServer，覆写了incomingConnection方法，在里面启动了一个线程。使用qintptr保存socket描述符，通过setSocketDescriptor初始化最后写数据：tcpSocket.write(block);tcpSocket.disconnectFromHost();tcpSocket.waitForDisconnected(); //阻塞客户端QHostInfo::localHostName() 查本机机器名，先abort后connectToHost有数据时QIODevice::readyRead()信号触发，读取数据，因为数据不是一次性发完的，读数据前先QDataStream.startTransaction();开始一个事务。在调用该函数后，所有对 QDataStream 对象的数据操作都将被记录在事务中。然后就可以读取数据，最后调用 commitTransaction() 函数来提交事务。Blocking Fortune Client 解析用到了QWaitCondition和QMutex（可能同时会读写线程的数据成员，所以这个线程一次只能处理一个请求）调了线程的方法requestNewFortune，在里面再调用了start, 如果启动了，就wakeOne()。使用了阻塞式api:waitForConnected和waitForReadyRead处理完后，会cond.wait(&amp;amp;mutex);等待，让线程sleep参考https://doc.qt.io/qt-6/qtnetwork-fortuneserver-example.htmlhttps://doc.qt.io/qt-6/qtnetwork-fortuneclient-example.htmlhttps://doc.qt.io/qt-6/qtnetwork-threadedfortuneserver-example.htmlhttps://doc.qt.io/qt-6/qtnetwork-blockingfortuneclient-example.html" }, { "title": "git系列2:删除远程无效分支", "url": "/posts/git-2/", "categories": "git系列", "tags": "git系列", "date": "2023-12-25 07:00:00 +0800", "snippet": "有些分支在远端其实早就被删除了，但是在你本地依然可以看见这些被删除的分支。清理远端不需要的分支：git remote prune origin" }, { "title": "C++系列2:宏定义时#(井号)和##(双井号)的作用", "url": "/posts/cpp-2/", "categories": "C++系列", "tags": "C++系列", "date": "2023-12-21 07:30:00 +0800", "snippet": "#表示将其后的内容转换为字符串，即加上双引号。#define example(instr) printf(&quot;the input string is:%s&quot;,#instr)#define example1(instr) #instr当使用该宏定义时：example(abc); 在编译时将会展开成：printf(&quot;the input string is:%s&quot;,&quot;abc&quot;);string str=example1(abc); 将会展成：string str=&quot;abc&quot;;##被称为连接符#define TYPE1(type,name) type name_##type##_type#define TYPE2(type,name) type name##_##type##_typeTYPE1(int, c); 转换为：int 　name_int_type ; (因为##号将后面分为 name_ 、type 、 _type三组，替换后强制连接)TYPE2(int, d);转换为： int 　d_int_type ; (因为##号将后面分为 name、_、type 、_type四组，替换后强制连接)" }, { "title": "Qt官方示例解析系列6:Local Fortune Server and Client", "url": "/posts/qt-example-6/", "categories": "Qt官方示例解析", "tags": "Qt官方示例解析", "date": "2023-12-20 18:00:00 +0800", "snippet": "实现了什么功能客户端用到的知识点使用了QDialogButtonBox，一个作为ActionRole，一个作为RejectRole，QLocalServer为服务端， QLocalSocket是客户端。部分源码解析setWindowFlags(windowFlags() &amp;amp; ~Qt::WindowContextHelpButtonHint);//会在标题栏添加一个问号按钮,这里会去掉服务端会收到QLocalServer::newConnection 信号， 然后调用 nextPendingConnection()获取 QLocalSocket 对象，然后就可以读写数据了。用完后要disconnectFromServer();其它：int fortuneIndex = QRandomGenerator::global()-&amp;gt;bounded(0, fortunes.size()); //生成随机数客户端源码：QDataStream.setDevice(socket);数据准备好后，QLocalSocket::readyRead信号会被触发，就可以使用QDataStream读取数据了。 connectToServer前先 socket-&amp;gt;abort();" }, { "title": "开源软件推荐系列10:OBS", "url": "/posts/opensource-soft-10/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2023-12-20 12:20:00 +0800", "snippet": "可录屏，可推流https://obsproject.com/源码：https://github.com/obsproject/obs-studio" }, { "title": "开源软件推荐系列9:7zip解压缩", "url": "/posts/opensource-soft-9/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2023-12-20 12:10:00 +0800", "snippet": "https://www.7-zip.org/源码：https://github.com/ip7z/7zip" }, { "title": "开源软件推荐系列8:VLC播放器", "url": "/posts/opensource-soft-8/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2023-12-20 12:00:00 +0800", "snippet": "开源跨平台播放器https://www.videolan.org/vlc/https://www.videolan.org/developers/vlc.html源码：https://wiki.videolan.org/VLC_Source_code/https://code.videolan.org/videolan/vlc" }, { "title": "cmd系列1:setx", "url": "/posts/cmd-1/", "categories": "cmd系列", "tags": "cmd系列", "date": "2023-12-20 09:40:00 +0800", "snippet": "setx永久设定环境变量其中/m 表示设置系统环境变量，记录在HKEY_LOCAL_MACHINE,不加此选项默认在HKEY_CURRENT_USER，同时会在用户环境变量那里新增一个变量。一般不用/m而SET用于设置临时环境变量" }, { "title": "排行榜系列1:Github", "url": "/posts/rank-1/", "categories": "排行榜系列", "tags": "排行榜系列", "date": "2023-12-20 09:00:00 +0800", "snippet": "https://github.com/search?q=stars%3A%3E20000&amp;amp;s=stars&amp;amp;type=Repositories&amp;amp;p=1" }, { "title": "WebRTC系列3:架构", "url": "/posts/webrtc-3/", "categories": "WebRTC系列", "tags": "WebRTC系列", "date": "2023-12-20 08:30:00 +0800", "snippet": "浅绿色部分分为四层PeerConnection:主要实现P2P连接Session:会话层第三层，包含音频引擎，视频引擎，传输，3大核心模块最底层是与硬件相关的硬件适配层：包含音频的采集和渲染，视频的捕捉，网络IO其中Voice Engine 音频引擎包含3大模块：NetEQ for voice: NetEQ实际上是一个音频缓冲buffer,防止音频抖动Video Engine 视频引擎也包含3大模块Video jitter buffer:视频jitter buffer跟音频buffer一样也是用来防止视频抖动的。Transport 传输模块包含3大模块SRTP: 一般正常视频传输都是使用RTP协议，但是由于浏览器对安全性要求比较高，增加了加密这块的处理，采用SRTP协议。还有流控处理的RTCP(实时控制协议（Real-Time Control Protocol）)Multplexing:多个流复用同一个通道P2P (STUN + TURN + ICE) : 主要是P2P相关的技术参考https://webrtc.github.io/webrtc-org/architecture/" }, { "title": "GN系列2:入门", "url": "/posts/gn-2/", "categories": "GN系列", "tags": "GN系列", "date": "2023-12-20 08:10:00 +0800", "snippet": "gn args --list out/my_build 可以列出可用的参数，切换不同的目录可能会有变化在BUILD.gn里面&quot;//tools/gn/tutorial:hello_world&quot;, 冒号后面的表示target名字ninja -C out/Default hello_world或ninja -C out/Default tools/gn/tutorial:hello_world第2次执行ninja时，不需要再次手动运行gn.它会自动重新生成ninja文件的让使用库的用户自动加载库的configs:all_dependent_configs-v 选项可以 run GN in verbose mode还可以在gn文件里面使用print(configs)参考https://chromium.googlesource.com/chromium/src/tools/gn/+/48062805e19b4697c5fbd926dc649c78b6aaa138/docs/quick_start.md" }, { "title": "Qt官方示例解析系列5:QtConcurrent Progress Dialog", "url": "/posts/qt-example-5/", "categories": "Qt官方示例解析", "tags": "Qt官方示例解析", "date": "2023-12-20 08:00:00 +0800", "snippet": "本示例为5.15.2版本实现了什么功能使用QFutureWatcher 检测进度信息部分源码解析QFutureWatcher&amp;lt;void&amp;gt; futureWatcher;通过信号槽与进度对话框进行关联。调用setFuture开始。" }, { "title": "C++系列1:optional", "url": "/posts/cpp-1/", "categories": "C++系列", "tags": "C++系列", "date": "2023-12-19 15:30:00 +0800", "snippet": "用于表示一个可选的值，即一个值可能存在，也可能不存在。可以很轻松的判断到底是有返回值还是没有可以使用*符号解引用里面的值。std::nullopt等同于{}参考https://en.cppreference.com/w/cpp/utility/optional" }, { "title": "chromium系列3:查看源码版本", "url": "/posts/chromium-3/", "categories": "chromium系列", "tags": "chromium系列", "date": "2023-12-19 12:00:00 +0800", "snippet": "打开chrome\\VERSION文件即可" }, { "title": "git系列1:clone", "url": "/posts/git-1/", "categories": "git系列", "tags": "git系列", "date": "2023-12-19 07:30:00 +0800", "snippet": "git clone https://bitbucket.org/chromiumembedded/cef.git -b 6099其中-b表示clone远端的6099分支，但同时也会拉取其它远端分支的信息。如果不想拉取其它远端分支的信息，只想要6099这一个分支的信息，需要加上--single-branch选项。" }, { "title": "AI系列1:几个工具", "url": "/posts/ai-1/", "categories": "AI系列", "tags": "AI系列", "date": "2023-12-18 23:00:00 +0800", "snippet": "1.ImagineMeta 公司推出的文生图工具，使用 Facebook 和 Instagram 的11亿张图片进行训练，现在可以免费使用。2.NotebookLM谷歌发布的 AI 笔记工具，用户上传文档，然后可以对文档提问，并且自动生成笔记，目前对美国用户免费开放。不过，它好像只支持上传英文PDF3.RoomGPT开源，你上传一张房间照片，它会使用 AI 重新设计你的房间。" }, { "title": "开源软件推荐系列7:ftp工具FileZilla", "url": "/posts/opensource-soft-7/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2023-12-18 18:00:00 +0800", "snippet": "免费开源跨平台的ftp工具https://filezilla-project.org/sourcecode.phphttps://svn.filezilla-project.org/svn/FileZilla3" }, { "title": "depot_tools系列2:gclient介绍", "url": "/posts/depot-tools-2/", "categories": "depot_tools系列", "tags": "depot_tools系列", "date": "2023-12-18 10:00:00 +0800", "snippet": "代码checkout工具,是一个Python脚本gclient help [sync] 帮助和子命令帮助它可以在checkout代码后运行Hooks.gclient]文件是通过gclient config &amp;lt;url&amp;gt;生成的，或手动创建的，跟src目录同级，其中 -unmanaged参数表示 unmanaged mode （is the default），在.gclient文件的managed字段有这个标志，默认会用到 DEPS文件，DEPS文件指定依赖关系：deps变量：子依赖，key是要checkout的目录，hooks：sync之后要运行的gclient sync：同步代码，主要根据DEPS文件来进行，--nohooks 表示拉取代码之后不执行hooks-no-history不拉取git提交的历史信息gclient runhooks：执行hooks。当你拉取代码时使用了--nohooks参数时，就可以使用该命令来手动执行hooks一般步骤就是config、sync、runhooks参考https://www.chromium.org/developers/how-tos/depottools/https://chromium.googlesource.com/chromium/tools/depot_tools/+/HEAD/README.gclient.mdhttps://www.chromium.org/developers/how-tos/get-the-code/gclient-managed-mode/" }, { "title": "Qt官方示例解析系列4:Image Scaling", "url": "/posts/qt-example-4/", "categories": "Qt官方示例解析", "tags": "Qt官方示例解析", "date": "2023-12-18 08:00:00 +0800", "snippet": "实现了什么功能异步下载用到的知识点qsizetypestd::optional，为空会返回std::nullopt;网络请求QFutureWatcher: 使用信号槽monitoring a QFutureQFuture&amp;lt;int&amp;gt; future = QtConcurrent::run(...);#run返回的future不能cancel,watcher.setFuture(future);开始watching部分源码解析主要功能都在process和cancel函数里面如何删除QGridLayout里面的元素。child-&amp;gt;widget()-&amp;gt;setParent(nullptr);delete child-&amp;gt;widget();delete child;QFuture download(const QList &amp;amp;urls); 返回值表示异步操作的结果，函数里面new了一个QPromise，并start(),QPromise provides a way to store computation results to be accessed by QFuture逻辑在QtFuture::connect里处理，如promise-&amp;gt;addResult，并报告结束promise-&amp;gt;finish();最后用promise-&amp;gt;future()返回这个返回值可以调用cancel()取消异步操作，或调用then进行链式处理（如下载完成后执行缩放）并且可以使用多个then。注意lambda里面使用了(auto)。中止下载就用reply-&amp;gt;abort();connect(&amp;amp;scalingWatcher, &amp;amp;QFutureWatcher&amp;lt;QList&amp;lt;QImage&amp;gt;&amp;gt;::finished, this, &amp;amp;Images::scaleFinished);# scalingWatcher用于监视一个异步操作的完成状态scalingWatcher 需要先通过setFuture设置好。最后通过scalingWatcher.result()拿结果。其它：qDeleteAll(ui-&amp;gt;urlListWidget-&amp;gt;selectedItems(); # qDeleteAll() 用于删除给定容器中的所有元素。image.loadFromData(imgData);加载图片数据注意如果为空，会返回std::nullopt;不会继续遍历。同时注意使用了QSharedPointer，因为多处用到。5.15里面同名示例：QFutureWatcher&amp;lt;QImage&amp;gt; *imageScaling = new QFutureWatcher&amp;lt;QImage&amp;gt;(this);它有resultReadyAt和finished信号，有cancel槽，有暂停和恢复槽 togglePausedimageScaling-&amp;gt;setFuture(QtConcurrent::mapped(files, scale));//scale是一个函数 QPixmap::fromImage(imageScaling-&amp;gt;resultAt(num))// 取结果通过Qt Concurrent,不需要使用底层的mutex,读写锁等api就可以写多线程程序.参考https://doc.qt.io/qt-6/qtconcurrent-imagescaling-example.htmlhttps://doc.qt.io/qt-6/qtconcurrent-index.html" }, { "title": "Goma系列1:介绍", "url": "/posts/goma-1/", "categories": "Goma系列", "tags": "Goma系列", "date": "2023-12-18 07:10:00 +0800", "snippet": "https://chromium.googlesource.com/infra/goma/client/ #它还有一个severGoma is a distributed compiler service for open-source project such as Chromium and Android." }, { "title": "GN系列1:介绍", "url": "/posts/gn-1/", "categories": "GN系列", "tags": "GN系列", "date": "2023-12-15 12:10:00 +0800", "snippet": "https://chromium.googlesource.com/chromium/src/tools/gn/+/48062805e19b4697c5fbd926dc649c78b6aaa138/README.md用于生成Ninja文件(Ninja可以看作make编译工具)，.ninja文件可以看作Makefilegn 即 Generate ninjia ,可以理解为cmake工具，.gn文件可以看作是CMakeLists.txt文件GN is 20x faster than GYP，用于取代GYP.gn help工作流程在当前目录中查找.gn 文件加载 BUILD.gn加载其它目录下的BUILD.gn当target的依赖解析完成后，就创建ninja文件当所有的target都解析完后，会写build.ninja根文件第一个被执行的文件是build config file.在根目录下的 .gn 文件里面有指定.Chrome里面是src/build/config/BUILDCONFIG.gn.build config file只有一个" }, { "title": "depot_tools系列1:windows安装", "url": "/posts/depot-tools-1/", "categories": "depot_tools系列", "tags": "depot_tools系列", "date": "2023-12-15 10:00:00 +0800", "snippet": "它里面有很多工具，如fetch --helpgclient help #代码checkout工具安装以下为win上安装文档win上下载 depot_tools.zip 并解压或git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git将 C:\\src\\depot_tools 添加到PATH环境变量的最前面设置DEPOT_TOOLS_WIN_TOOLCHAIN环境变量，设置为0，告诉depot_tools使用本地的vs版本设置vs2022_install环境变量为vs2022安装地址：C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional最好把windows index索引关闭。包括任务管理器里面和服务里面的Windows search最好将其它版本python删除，包括那些Python虚拟环境。然后在cmd.exe里面进入depot_tools目录下运行gclient（不需要加.bat后缀，它会安装msysgit and python）注意不要用其它终端运行！包括后面的chromium和webrtc源码编译当运行 gclient时depot_tools会自动更新，首次更新后，可以设置环境变量DEPOT_TOOLS_UPDATE=0禁用更新，不然每次同步代码它都会检查更新。即使你checkout到了某个提交。运行下where python确保python已经安装并且在最前面。" }, { "title": "WebRTC系列2:windows编译", "url": "/posts/webrtc-2/", "categories": "WebRTC系列", "tags": "WebRTC系列", "date": "2023-12-15 09:30:00 +0800", "snippet": "先配置好depot_tools下载源码fetch --no-history --nohooks webrtcgclient sync 进入src目录配置gn gen out/DefaultDone. Made 1764 targets from 295 files in 5178ms 编译autoninja -C out/Defaultninja: Entering directory `out/Default&#39;[6307/6307] STAMP obj/default.stamp编译出了peerconnection_server.exe和peerconnection_client.exe，stunserver.exe，turnserver.exe等程序参考https://webrtc.googlesource.com/src/+/main/docs/native-code/development/" }, { "title": "chromium系列2:windows编译", "url": "/posts/chromium-2/", "categories": "chromium系列", "tags": "chromium系列", "date": "2023-12-15 08:00:00 +0800", "snippet": "最新版需要vs2022，安装时要勾选 MFC和ATLwindows下默认是GBK，会报UnicodeDecodeError: ‘gbk’ codec can’t decode byte，先设置成英文版本，同时设置环境变量PYTHONUTF8=1。先安装depot_tools，具体参考depot_tools系列获取源码先按官方文档文档配置好git，最好把杀毒软件关掉，有个字体报毒会被删除导致同步不了代码。然后fetch --no-history chromium会run hooksgclient sync进入src目录，编译配置：gn gen out\\Default --args=&quot;is_component_build = true is_debug = true&quot; #GN会生成.ninja文件Done. Made 18681 targets from 3568 files in 13662ms编译Chromium:autoninja -C out\\Default chromeninja: Entering directory `out\\Debug&#39;[58785/58785] STAMP obj/chrome/chrome.stamp编译出了 chrome.exe其它的target可以通过 gn ls out\\Default查看参考https://chromium.googlesource.com/chromium/src/+/HEAD/docs/windows_build_instructions.md" }, { "title": "windows软件推荐系列3:搜索Listary", "url": "/posts/windows-softs-3/", "categories": "windows软件推荐", "tags": "windows软件推荐", "date": "2023-12-14 20:30:00 +0800", "snippet": "双击ctrl可以打开Listary在当前文件夹下，也可以直接输入关键字进行搜索 (不需要按快捷键)。" }, { "title": "WebRTC系列1:介绍", "url": "/posts/webrtc-1/", "categories": "WebRTC系列", "tags": "WebRTC系列", "date": "2023-12-14 12:00:00 +0800", "snippet": "https://webrtc.googlesource.com/src本地编译文档：https://webrtc.googlesource.com/src/+/main/docs/native-code" }, { "title": "chromium系列1:介绍", "url": "/posts/chromium-1/", "categories": "chromium系列", "tags": "chromium系列", "date": "2023-12-14 12:00:00 +0800", "snippet": "最好的入口：https://chromium.googlesource.com/chromium/src/文档在 https://chromium.googlesource.com/chromium/src/+/HEAD/docs/README.md" }, { "title": "Linux命令系列1:软链接ln", "url": "/posts/linux-command-1/", "categories": "Linux命令系列", "tags": "Linux命令系列", "date": "2023-12-14 08:00:00 +0800", "snippet": "软链接类似Windows的快捷方式ln -s 源文件 目标文件(要建立的快捷方式)删除软链接ls -alh myphpadmin -&amp;gt; /opt/nginx/html/phpmyadmin前面的是目标，所以rm -rf myphpadmin即可，注意后面千万不要加/" }, { "title": "Qt官方示例解析系列3:Basic Layouts", "url": "/posts/qt-example-3/", "categories": "Qt官方示例解析", "tags": "Qt官方示例解析", "date": "2023-12-13 21:00:00 +0800", "snippet": "实现了什么功能演示了QGridLayout和QFormLayout.比较简单整体是一个QScrollArea部分源码解析fileMenu-&amp;gt;addAction(tr(&quot;E&amp;amp;xit&quot;)); QGroupBox 可以 setLayoutmainLayout-&amp;gt;setMenuBar(menuBar); 布局可以设置菜单，在mac上没有生效。scrollArea-&amp;gt;verticalScrollBar()-&amp;gt;setStyleSheet(&quot;QScrollBar:vertical {width: 20px;}&quot;);参考https://doc.qt.io/qt-6/qtwidgets-layouts-basiclayouts-example.html" }, { "title": "开源软件推荐系列6:Wireshark", "url": "/posts/opensource-soft-6/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2023-12-13 18:00:00 +0800", "snippet": "网络协议分析器使用了Qthttps://gitlab.com/wireshark/wireshark" }, { "title": "Qt源码解析系列1:源码编译for macos arm64", "url": "/posts/qt-src-1/", "categories": "Qt源码解析系列", "tags": "Qt源码解析系列", "date": "2023-12-13 15:00:00 +0800", "snippet": "使用Qt5.15.2版本。源码解压后最好放在~/Qt/5.15.2/Src目录下，这样当把编译出来的库放到~/Qt/5.15.2/clang_64目录下时，就可以直接调试源码了，不然还需要映射源码路径。编译注：arm的需要在arm机器上编译./configure -prefix ./arm64 -opensource -force-debug-info -nomake tests QMAKE_APPLE_DEVICE_ARCHS=arm64 -skip qtdoc报错:qiosurfacegraphicsbuffer.h:54:32: error: unknown type name &#39;CGColorSpaceRef&#39;解决方案：找到qiosurfacegraphicsbuffer.h，我的文件目录如下qt-everywhere-src-5.15.5/qtbase/src/plugins/platforms/cocoa/qiosurfacegraphicsbuffer.h在46行添加头文件：#include &amp;lt;CoreGraphics/CGColorSpace.h&amp;gt;又报错../../../3rdparty/assimp/contrib/zip/src/miniz.h:3075:30: error: variable has incomplete type &#39;struct stat64&#39;解决方案:搜索miniz.h文件，共2个，然后将代码中 stat64 改成 stat：./qtquick3d/src/3rdparty/assimp/src/contrib/zip/src/miniz.h./qt3d/src/3rdparty/assimp/contrib/zip/src/miniz.h 看来是qt3d用到。也可以添加 -skip qt3d -skip qtquick3d 解决如何编译出dSYM符号表需要添加 -separate-debug-info报错：Error copying Cannot open qttools/bin/qcollectiongenerator.dSYM/Contents/Resources/DWARF/qcollectiongenerator for inputqcollectiongenerator这个编译不出来，这个是qttools里面的assistant里面依赖的。可以添加 -skip qttools，不过就编译不出来lrelease工具了。通过 ./configure -list-features -no-feature-&amp;lt;feature&amp;gt; Disable &amp;lt;feature&amp;gt; 可知可以用-no-feature-assistant选项跳过assistant，同时也可以添加 -nomake tests -nomake examples #根据名字可以猜测，examples,tests有可能就是qtbase下那些文件夹的名字，综上先 vim qtbase/src/plugins/platforms/cocoa/qiosurfacegraphicsbuffer.h在46行添加头文件：#include &amp;lt;CoreGraphics/CGColorSpace.h&amp;gt;然后在arm机器上编译：./configure -prefix ./arm64 -release -opensource -force-debug-info -separate-debug-info -nomake tests -nomake examples QMAKE_APPLE_DEVICE_ARCHS=arm64 -skip qtdoc -skip qt3d -skip qtquick3d -skip qtwebengine -no-feature-assistant 在intel机器上编译：./configure -prefix ./x86_64 -release -opensource -force-debug-info -separate-debug-info -nomake tests -nomake examples QMAKE_APPLE_DEVICE_ARCHS=x86_64 -skip qtdoc -skip qt3d -skip qtquick3d -skip qtwebengine -no-feature-assistantmake -j12注意最后用make -j1 install #安装时最好用j1防止竞争合并成universal库QMAKE_APPLE_DEVICE_ARCHS使用”x86_64h;arm64”，会编译失败，需要一个平台一个平台地编译（intel的在intel机器上编译）。GitHub上有个工具 https://github.com/nedrysoft/makeuniversal，用它可以合并两个文件夹为universal库makeuniversal universal arm64 x86_64 # 3个都是根目录 其中 x86_64为编译出来的x86版本根目录，arm64 为编译出来的的arm64版本根目录，命令执行成功后 universal目录下就是支持两个平台的Qt工具集.验证看看是否生成 qmake,lrelease工具附为什么要改成stat#include &amp;lt;sys/stat.h&amp;gt; 里面有 #if __DARWIN_64_BIT_INO_Tstruct stat __DARWIN_STRUCT_STAT64;#if !__DARWIN_ONLY_64_BIT_INO_Tstruct stat64 __DARWIN_STRUCT_STAT64;可以看到都指向了同一个结构体，所以将stat64 改成 stat可行。```cppqt-everywhere-src-5.15.2/qt3d/src/3rdparty/assimp/contrib/zip/src/miniz.h:3075:30 ，在官方bug上：&amp;lt;https://bugreports.qt.io/browse/QTBUG-98826&amp;gt; 有提到-skip qt3d -skip qtquick3d -skip qtwebengine #根据qt3d名字可以猜测，有可能就是根目录下文件夹的名字，比如qttools参考https://www.jianshu.com/p/1d879b42a5d8https://doc.qt.io/qt-5/macos-building.htmlhttps://doc.qt.io/qt-6/macos.html#architectureshttps://blog.csdn.net/ykun089/article/details/120430329https://www.cnblogs.com/wqcwood/p/15138983.html" }, { "title": "开源软件推荐系列5:DB Browser for SQLite", "url": "/posts/opensource-soft-5/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2023-12-13 13:00:00 +0800", "snippet": "https://github.com/sqlitebrowser/sqlitebrowser开源，跨平台，一个SQLite数据库管理工具使用Qt开发" }, { "title": "开源软件推荐系列4:SwitchHosts", "url": "/posts/opensource-soft-4/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2023-12-13 12:00:00 +0800", "snippet": "https://github.com/oldj/SwitchHostsbased on Electron可以快速切换不同的hosts。" }, { "title": "github使用系列3:Actions使用", "url": "/posts/github-3/", "categories": "github", "tags": "github", "date": "2023-12-13 09:30:00 +0800", "snippet": "github的持续集成服务，比如可以实现push代码后自动执行某个脚本。Actions 的配置文件叫做 workflow 文件，放在仓库的.github/workflows目录workflow 文件后缀名为.yml，一个库可以有多个 workflow 文件。GitHub 只要发现.github/workflows目录里面有.yml文件，就会自动运行该文件on字段指定触发条件，通常是某些事件runs-on字段指定运行的虚拟机环境可以直接引用他人写好的 action，官方的 actions 都放在 github.com/actions 里面参考https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.htmlhttps://docs.github.com/zh/actions" }, { "title": "开源软件推荐系列3:ohmyzsh", "url": "/posts/opensource-soft-3/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2023-12-12 23:30:00 +0800", "snippet": "https://github.com/ohmyzsh/ohmyzsh是一个可以让你的终端更强大的工具，可以简写很多命令，如gpr=git pull --rebase // 更多缩写参见 https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gitgcb=git checkout -bgco= git checkout另外不用cd目录，直接输入目录回车就能进入到对应目录。windows上安装oh-my-zsh1，安装 git bash2，安装zsh在下面的网站可以下载到最新的 zsh 安装包：https://packages.msys2.org/package/zsh?repo=msys&amp;amp;variant=x86_64如果是tar.zst，先在其它平台解压：如macos上brew install zstdunzstd yourfile.tar.zstlinuxtar -I zstd -xf xxx解压会生成etc与usr目录将这些文件直接解压到 Git 的安装目录下，与之前的文件夹进行合并启动 git bash，敲下 zsh，出现%表示进入到了zsh里面。zsh --versionsh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;配置 zsh 为 bash 默认终端编辑 ~/.bashrc，或者是 C:\\Program Files\\Git\\etc\\bash.bashrc，加入下面的几行。# Launch Zshif [ -t 1 ]; thenexec zshfi参考：https://miaotony.xyz/2020/12/13/Server_Terminal_gitbash_zsh/" }, { "title": "Qt官方示例解析系列2:Analog Clock", "url": "/posts/qt-example-2/", "categories": "Qt官方示例解析", "tags": "Qt官方示例解析", "date": "2023-12-12 22:30:00 +0800", "snippet": "实现了什么功能实现了一个时钟，展示了使用paintEvent 来对自定义控件进行绘制。用到的知识点QPainter的使用部分源码解析connect(timer, &amp;amp;QTimer::timeout, this, QOverload&amp;lt;&amp;gt;::of(&amp;amp;AnalogClock::update));QOverload&amp;lt;&amp;gt;::of() 是一个模板函数，它接受一个函数指针， 超时就调update刷新界面, 可以用qOverload&amp;lt;&amp;gt;(xxx) 代替QTime::currentTime() 用于获取当前时间，然后可以调用 .hour()获取小时数painter.save()和restore 可以确保他们之间的旋转代码不会影响到后续的绘制。Qt::NoPen ：不会有outline，不然会有轮廓线。另外qt5的官方示例里面还有一个《Analog Clock Window Example》，继承自QWindow，show 后会收到 exposeEvent，然后绘制，用到了示例1里面的类。可以通过startTimer来启动定时器，然后在timerEvent里面判断timerId()。" }, { "title": "js系列1:数据类型", "url": "/posts/js-1/", "categories": "js系列", "tags": "js系列", "date": "2023-12-12 15:30:00 +0800", "snippet": "网景公司开发，为了让JavaScript成为全球标准，几个公司联合ECMA（European Computer Manufacturers Association）组织制定了标准，称为ECMAScript标准。JavaScript是网景公司对ECMAScript标准的一种实现&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;上面默认的type就是JavaScript, 所以不必显式地把type指定为JavaScript。开发者工具的Console里可以直接输入JavaScript代码，按回车执行开发者工具的Sources里面，可以进行断点和单步执行JavaScript严格区分大小写，也不区分整数和浮点数，也就是说12.00 === 12（始终用===比较）NaN表示Not a Number，当无法计算结果时用NaN表示null表示一个“空”的值，undefined表示值未定义，undefined仅在判断函数参数是否传递的情况下有用。JavaScript的数组可以包括任意数据类型字符串内部如果既包含&#39;又包含&quot;，可以用\\来转义，外面再使用单引号括起来。模板字符串会自动替换字符串中的变量，如**let** message = `你好, ${name}, 你今年${age}岁了?`;slice可以截取数组，如果不传参数，会截取整个数组var aCopy = arr.slice();由于JavaScript的对象是动态类型，所以可以动态地添加或删除属性。" }, { "title": "开源软件推荐系列2:Electron", "url": "/posts/opensource-soft-2/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2023-12-12 09:30:00 +0800", "snippet": "https://www.electronjs.org/原来是github开发的，用于桌面GUI应用程序开发，Build cross-platform desktop apps with JavaScript, HTML, and CSS,通过使用Node.js（作为后端）和Chromium渲染引擎（作为前端）完成跨平台桌面GUI应用程序的开发。有很多使用Electron开发的软件，如：VS Code,Notion,Figma,Postman,Skype,Slack,Teams,Github Desktop等等现在加入了OpenJS 基金会 https://www.electronjs.org/blog/electron-joins-openjsf" }, { "title": "开源软件推荐系列1:VS Code", "url": "/posts/opensource-soft-1/", "categories": "开源软件推荐系列", "tags": "开源软件推荐系列", "date": "2023-12-11 19:40:00 +0800", "snippet": "微软开发的跨平台开源编辑器官网：https://code.visualstudio.com/源码：https://github.com/microsoft/vscode使用Electron开发可以安装大量插件，如github copilot" }, { "title": "Qt官方示例解析系列1:Raster Window", "url": "/posts/qt-example-1/", "categories": "Qt官方示例解析", "tags": "Qt官方示例解析", "date": "2023-12-11 17:30:00 +0800", "snippet": "本系列基于6.6.0 官方示例实现了什么功能Raster是 光栅、栅格的意思使用 QWindow 类创建一个窗口，然后使用 QBackingStore 类在窗口上绘制图形。用到哪些重要的类The QBackingStore class provides a drawing area for QWindow可以只更新部分区域。使用方法m_backingStore-&amp;gt;beginPaint(rect);QPaintDevice *device = m_backingStore-&amp;gt;paintDevice();QPainter painter(device);painter画完之后，需要调用m_backingStore-&amp;gt;endPaint();m_backingStore-&amp;gt;flush(rect);部分源码解析qt_standard_project_setup()是一个 CMake 函数，用于设置 Qt 项目的一些标准配置。具体来说，qt_standard_project_setup() 函数会执行以下操作：调用 find_package(Qt5 COMPONENTS Core Gui Widgets REQUIRED) 指令，查找并加载 Qt5 的模块。调用 set(CMAKE_AUTOMOC ON) 指令，启用自动 MOC（Meta-Object Compiler）功能，用于处理 Qt 元对象系统的代码生成。调用 set(CMAKE_AUTORCC ON) 指令，启用自动 RCC（Resource Compiler）功能，用于处理 Qt 资源文件的编译。调用 set(CMAKE_AUTOUIC ON) 指令，启用自动 UIC（User Interface Compiler）功能，用于处理 Qt 用户界面文件的代码生成。调用 set(CMAKE_INCLUDE_CURRENT_DIR ON) 指令，将当前目录添加到头文件搜索路径中。调用 set(CMAKE_CXX_STANDARD 11) 指令，设置 C++ 标准为 C++11。QScopedPointer&amp;lt;QBackingStore&amp;gt; m_backingStore; 不需要赋值nullptr进行初始化它源码里面有个方法 renderLater() 没有调用。供其它例子使用的（在示例2中用到）。“QWindow”这个字符串为何要用QStringLiteral包装?它会在编译期生成，而不是运行期生成，这样可以提高运行效率。用于创建一个 Unicode 字符串常量。使用 QStringLiteral 可以确保字符串在编译时被转换为 Unicode 编码，从而避免了运行时的转换开销和潜在的编码问题。QBackingStore： manage the window’s back buffer for QPainter based graphicsshow后会收到exposeEvent，contains the exposed sub-region，窗口被遮挡也会收到requestUpdate异步渲染：让重绘发生在事件循环中参考：https://doc.qt.io/qt-6/qtgui-rasterwindow-example.html" }, { "title": "Python系列3:在vscode中调试python", "url": "/posts/python-3/", "categories": "Python", "tags": "Python", "date": "2023-12-11 15:30:00 +0800", "snippet": "创建配置文件时，选择Python File，然后修改下program和python的值：{ // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;name&quot;: &quot;Python: debug_main&quot;, #可任意 &quot;type&quot;: &quot;python&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;${workspaceFolder}/debug_main.py&quot;, &quot;console&quot;: &quot;integratedTerminal&quot;, &quot;justMyCode&quot;: true, &quot;python&quot;: &quot;/Users/ws/your_venv/bin/python3&quot;, #Python interpreter } ]}参考https://code.visualstudio.com/docs/python/debugging" }, { "title": "Python系列2:安装依赖项", "url": "/posts/python-2/", "categories": "Python", "tags": "Python", "date": "2023-12-11 15:30:00 +0800", "snippet": "python -m pip freeze &amp;gt; requirements.txt #将所有依赖项及其版本信息输出python -m pip install -r requirements.txt" }, { "title": "Python系列1:使用venv创建虚拟环境", "url": "/posts/python-1/", "categories": "Python", "tags": "Python", "date": "2023-12-11 14:30:00 +0800", "snippet": "The module used to create and manage virtual environments is called venv.python3 -m venv myvenvpath # 可以在myvenvpath前加--copies选项，但会占用更多的磁盘空间source myvenvpath/bin/activate 激活它deactivate 退出当前环境参考https://www.liaoxuefeng.com/wiki/1016959663602400/1019273143120480https://docs.python.org/3/tutorial/venv.html" }, { "title": "汽车知识系列1:沃尔沃xc90与理想L9对比", "url": "/posts/car-1/", "categories": "汽车知识系列", "tags": "汽车知识系列", "date": "2023-12-11 10:05:00 +0800", "snippet": "小白一枚，今天想看下沃尔沃xc90与理想L9的区别具体型号是2024年沃尔沃xc90 B6智雅7座与理想L9 2022 max版本价格63vs46，差了17个w，可以买个车位了。2.0t vs1.5t理想长宽高都大一些，长有5218了，沃尔沃4953座位7vs6胎压监测：沃尔沃只是屏幕上有报警标志，理想有胎压显示中控屏9vs15.7车外摄像头5个vs11个二者都有手机无线充电，抬头显示系统，多层隔音玻璃此外，理想有自动泊车，方向盘加热，遥控移动车辆，内置行车记录仪，前排座椅按摩，第二排座椅加热和按摩，第三排座椅加热，副驾驶屏幕15.7，后排液晶屏，后排隐私玻璃，车载冰箱沃尔沃有前雾灯，后窗侧遮阳帘，车顶行李架，以及安全感。" }, { "title": "教育常识系列1:六三制和五四制的区别", "url": "/posts/edu-baike-1/", "categories": "教育常识系列", "tags": "教育常识系列", "date": "2023-12-10 16:30:00 +0800", "snippet": "五四制:小学五年，初中四年，初中九门课，会有更多的时间去消化和理解；六三制：小学六年，初中三年，三年压力会突然增大。" }, { "title": "windows常见问题系列1:win7关闭打开文件时的安全警告", "url": "/posts/win-skills-1/", "categories": "windows常见问题", "tags": "windows常见问题", "date": "2023-12-09 19:50:00 +0800", "snippet": "gpedit.msc用户配置–管理模板–Windows组件–附件管理器双击打开右侧的“中等风险文件类型的包含列表”先设置为“已启用”，然后在选项下方输入“.exe”，点击“确定”即可。" }, { "title": "windows软件推荐系列2:本地搜索", "url": "/posts/windows-softs-2/", "categories": "windows软件推荐", "tags": "windows软件推荐", "date": "2023-12-09 19:40:00 +0800", "snippet": "Everything" }, { "title": "windows软件推荐系列1:截图", "url": "/posts/windows-softs-1/", "categories": "windows软件推荐", "tags": "windows软件推荐", "date": "2023-12-09 19:30:00 +0800", "snippet": "snipaste https://zh.snipaste.com/按F1即可截图mac下也可以使用" }, { "title": "github使用系列2:如何在手机上新建文件夹", "url": "/posts/github-2/", "categories": "github", "tags": "github", "date": "2023-12-09 17:30:00 +0800", "snippet": "下载官方app然后进入到对应的目录，点击右上角创建文件。输入文件夹名称，然后输入’/’以进入子文件夹。或输入’…’，然后输入’/’可跳到上级目录。如果要删除目录，可以在手机浏览器里面，点击右上角进行删除。" }, { "title": "github使用系列1:如何在同一台电脑上使用多个GitHub账号", "url": "/posts/github-1/", "categories": "github", "tags": "github", "date": "2023-12-09 17:30:00 +0800", "snippet": "首先需要对自己的多个不同账户生成对应的秘钥然后将两个pub公钥分别添加到对应的github账户中然后vim ~/.ssh/config#privateHost github_private #可任意名字HostName ssh.github.comUser gitIdentityFile ~/.ssh/id_rsa1#workHost github_*work*HostName ssh.github.comUser gitIdentityFile ~/.ssh/id_rsa_2然后测试下ssh -T git@github_*private* ssh -T git@github_*work*然后删除git配置的全局用户名和邮箱.接着在自己每个项目的仓库中按照需要设置不同的user.name和user.email.后面clone时把github.com替换成对应的Host名字即可如果已经clone了可以更新url:git remote set-url origin git@github_work:username/repo_name.git" }, { "title": "测试", "url": "/posts/test/", "categories": "测试", "tags": "测试", "date": "2023-12-09 10:30:00 +0800", "snippet": "这是一个测试页面.这是一个测试页面.这是一个测试页面." } ]
